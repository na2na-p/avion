generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.md"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  userId        String    @unique
  email         String?   @unique
  name          String?
  introduction  String?
  password      String
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  Terminal      Terminal  @relation(fields: [terminalId], references: [id])
  terminalId    String
  Medium        Medium?   @relation(fields: [iconId], references: [id])
  iconId        String?
  assignedRoles Role[]
  Drop          Drop[]
  Followee      Follow[]  @relation("followee")
  Follower      Follow[]  @relation("follower")
  Antenna       Antenna[]
}

model Follow {
  id         String   @id
  followeeId String
  followerId String
  followedAt DateTime @default(now())
  followee   User     @relation("followee", fields: [followeeId], references: [id])
  follower   User     @relation("follower", fields: [followerId], references: [id])
}

model Drop {
  id        String     @id
  userId    String
  scope     PostScope
  cw        String?
  body      String
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  medium    Medium[]
  reactions Reaction[]
  User      User       @relation(fields: [userId], references: [id])
}

model Antenna {
  id              String   @id
  name            String
  description     String?
  condifition     String[]
  exclusions      String[]
  createdByUserId String
  createdAt       DateTime @default(now())
  User            User     @relation(fields: [createdByUserId], references: [id])
}

model Role {
  id          String       @id
  name        String       @unique
  description String?
  baseType    BaseRoleType
  users       User[]
}

model Terminal {
  id                 String   @id
  name               String
  firstSeen          DateTime @default(now())
  updatedAt          DateTime @default(now())
  /// 自インスタンスから観測されているユーザ数
  userCount          Int
  /// 自インスタンスから観測されている投稿数
  dropCount          Int
  isRegistrationOpen Boolean
  User               User[]
  Emoji              Emoji[]
  Medium             Medium[]
}

/// ユーザのつけたリアクションを表すエンティティ
model Reaction {
  id     String  @id
  name   String  @unique
  Drop   Drop?   @relation(fields: [dropId], references: [id])
  dropId String?
}

/// ユーザの利用できる絵文字を表すエンティティ
model Emoji {
  id         String          @id
  /// ユーザが利用時に指定する一意な名前
  name       String          @unique
  createdAt  DateTime        @default(now())
  /// メディアキャッシュも考えてEmojiエンティティでも保存する
  terminalId String
  mediumId   String
  categories EmojiCategory[]
  Medium     Medium          @relation(fields: [mediumId], references: [id])
  Terminal   Terminal        @relation(fields: [terminalId], references: [id])
}

model EmojiCategory {
  id    String  @id
  name  String
  Emoji Emoji[]
}

model Medium {
  id         String              @id
  terminalId String
  url        String
  isNsfw     Boolean
  users      User[]
  dropId     String?
  type       MediumExtensionType
  Emoji      Emoji[]
  Terminal   Terminal            @relation(fields: [terminalId], references: [id])
  Drop       Drop?               @relation(fields: [dropId], references: [id])
}

enum PostScope {
  PUBLIC
  HOME
  FOLLOWERS_ONLY
}

enum BaseRoleType {
  ADMIN
  MODERATOR
  USER
  BOT
}

enum TimelineType {
  HOME_TIMELINE
  LOCAL_TIMELINE
  GLOBAL_TIMELINE
  ANTENNA_TIMELINE
}

enum JobQueueType {
  INBOX
  DELIVER
}

enum MediumExtensionType {
  PNG
  JPEG
  JPG
  GIF
  MP4
  MP3
  WEBM
  WEBP
  WMV
  AVI
  MOV
  MKV
  FLV
  SWF
  OGG
  UNKNOWN
}
