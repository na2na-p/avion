// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/moderation/v1/moderation_service.proto

package moderationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModerationService_CreateUserReport_FullMethodName           = "/avion.moderation.v1.ModerationService/CreateUserReport"
	ModerationService_GetUserReport_FullMethodName              = "/avion.moderation.v1.ModerationService/GetUserReport"
	ModerationService_ListUserReports_FullMethodName            = "/avion.moderation.v1.ModerationService/ListUserReports"
	ModerationService_UpdateUserReport_FullMethodName           = "/avion.moderation.v1.ModerationService/UpdateUserReport"
	ModerationService_ProcessUserReport_FullMethodName          = "/avion.moderation.v1.ModerationService/ProcessUserReport"
	ModerationService_ModerateContent_FullMethodName            = "/avion.moderation.v1.ModerationService/ModerateContent"
	ModerationService_BatchModerateContent_FullMethodName       = "/avion.moderation.v1.ModerationService/BatchModerateContent"
	ModerationService_GetContentModerationStatus_FullMethodName = "/avion.moderation.v1.ModerationService/GetContentModerationStatus"
	ModerationService_ExecuteModerationAction_FullMethodName    = "/avion.moderation.v1.ModerationService/ExecuteModerationAction"
	ModerationService_GetModerationAction_FullMethodName        = "/avion.moderation.v1.ModerationService/GetModerationAction"
	ModerationService_ListModerationActions_FullMethodName      = "/avion.moderation.v1.ModerationService/ListModerationActions"
	ModerationService_RevokeModerationAction_FullMethodName     = "/avion.moderation.v1.ModerationService/RevokeModerationAction"
	ModerationService_CreateAppeal_FullMethodName               = "/avion.moderation.v1.ModerationService/CreateAppeal"
	ModerationService_GetAppeal_FullMethodName                  = "/avion.moderation.v1.ModerationService/GetAppeal"
	ModerationService_ListAppeals_FullMethodName                = "/avion.moderation.v1.ModerationService/ListAppeals"
	ModerationService_ReviewAppeal_FullMethodName               = "/avion.moderation.v1.ModerationService/ReviewAppeal"
	ModerationService_CreateFilterRule_FullMethodName           = "/avion.moderation.v1.ModerationService/CreateFilterRule"
	ModerationService_GetFilterRule_FullMethodName              = "/avion.moderation.v1.ModerationService/GetFilterRule"
	ModerationService_ListFilterRules_FullMethodName            = "/avion.moderation.v1.ModerationService/ListFilterRules"
	ModerationService_UpdateFilterRule_FullMethodName           = "/avion.moderation.v1.ModerationService/UpdateFilterRule"
	ModerationService_DeleteFilterRule_FullMethodName           = "/avion.moderation.v1.ModerationService/DeleteFilterRule"
	ModerationService_ApplyContentFilter_FullMethodName         = "/avion.moderation.v1.ModerationService/ApplyContentFilter"
	ModerationService_CreateModerationLog_FullMethodName        = "/avion.moderation.v1.ModerationService/CreateModerationLog"
	ModerationService_ListModerationLogs_FullMethodName         = "/avion.moderation.v1.ModerationService/ListModerationLogs"
	ModerationService_ExportModerationLogs_FullMethodName       = "/avion.moderation.v1.ModerationService/ExportModerationLogs"
	ModerationService_GetModerationStats_FullMethodName         = "/avion.moderation.v1.ModerationService/GetModerationStats"
	ModerationService_GetModeratorPerformance_FullMethodName    = "/avion.moderation.v1.ModerationService/GetModeratorPerformance"
	ModerationService_RegisterModerator_FullMethodName          = "/avion.moderation.v1.ModerationService/RegisterModerator"
	ModerationService_UpdateModerator_FullMethodName            = "/avion.moderation.v1.ModerationService/UpdateModerator"
	ModerationService_ListModerators_FullMethodName             = "/avion.moderation.v1.ModerationService/ListModerators"
	ModerationService_DeactivateModerator_FullMethodName        = "/avion.moderation.v1.ModerationService/DeactivateModerator"
)

// ModerationServiceClient is the client API for ModerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// モデレーションサービス
type ModerationServiceClient interface {
	// ユーザー報告関連
	// ユーザー報告を作成
	CreateUserReport(ctx context.Context, in *CreateUserReportRequest, opts ...grpc.CallOption) (*CreateUserReportResponse, error)
	// ユーザー報告を取得
	GetUserReport(ctx context.Context, in *GetUserReportRequest, opts ...grpc.CallOption) (*GetUserReportResponse, error)
	// ユーザー報告を一覧取得
	ListUserReports(ctx context.Context, in *ListUserReportsRequest, opts ...grpc.CallOption) (*ListUserReportsResponse, error)
	// ユーザー報告を更新
	UpdateUserReport(ctx context.Context, in *UpdateUserReportRequest, opts ...grpc.CallOption) (*UpdateUserReportResponse, error)
	// ユーザー報告を処理
	ProcessUserReport(ctx context.Context, in *ProcessUserReportRequest, opts ...grpc.CallOption) (*ProcessUserReportResponse, error)
	// コンテンツモデレーション
	// コンテンツを審査
	ModerateContent(ctx context.Context, in *ModerateContentRequest, opts ...grpc.CallOption) (*ModerateContentResponse, error)
	// バッチでコンテンツを審査
	BatchModerateContent(ctx context.Context, in *BatchModerateContentRequest, opts ...grpc.CallOption) (*BatchModerateContentResponse, error)
	// コンテンツのモデレーション状態を取得
	GetContentModerationStatus(ctx context.Context, in *GetContentModerationStatusRequest, opts ...grpc.CallOption) (*GetContentModerationStatusResponse, error)
	// モデレーションアクション
	// モデレーションアクションを実行
	ExecuteModerationAction(ctx context.Context, in *ExecuteModerationActionRequest, opts ...grpc.CallOption) (*ExecuteModerationActionResponse, error)
	// モデレーションアクションを取得
	GetModerationAction(ctx context.Context, in *GetModerationActionRequest, opts ...grpc.CallOption) (*GetModerationActionResponse, error)
	// モデレーションアクションを一覧取得
	ListModerationActions(ctx context.Context, in *ListModerationActionsRequest, opts ...grpc.CallOption) (*ListModerationActionsResponse, error)
	// モデレーションアクションを取り消し
	RevokeModerationAction(ctx context.Context, in *RevokeModerationActionRequest, opts ...grpc.CallOption) (*RevokeModerationActionResponse, error)
	// アピール（異議申し立て）
	// アピールを作成
	CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...grpc.CallOption) (*CreateAppealResponse, error)
	// アピールを取得
	GetAppeal(ctx context.Context, in *GetAppealRequest, opts ...grpc.CallOption) (*GetAppealResponse, error)
	// アピールを一覧取得
	ListAppeals(ctx context.Context, in *ListAppealsRequest, opts ...grpc.CallOption) (*ListAppealsResponse, error)
	// アピールを審査
	ReviewAppeal(ctx context.Context, in *ReviewAppealRequest, opts ...grpc.CallOption) (*ReviewAppealResponse, error)
	// フィルタ管理
	// フィルタールールを作成
	CreateFilterRule(ctx context.Context, in *CreateFilterRuleRequest, opts ...grpc.CallOption) (*CreateFilterRuleResponse, error)
	// フィルタールールを取得
	GetFilterRule(ctx context.Context, in *GetFilterRuleRequest, opts ...grpc.CallOption) (*GetFilterRuleResponse, error)
	// フィルタールールを一覧取得
	ListFilterRules(ctx context.Context, in *ListFilterRulesRequest, opts ...grpc.CallOption) (*ListFilterRulesResponse, error)
	// フィルタールールを更新
	UpdateFilterRule(ctx context.Context, in *UpdateFilterRuleRequest, opts ...grpc.CallOption) (*UpdateFilterRuleResponse, error)
	// フィルタールールを削除
	DeleteFilterRule(ctx context.Context, in *DeleteFilterRuleRequest, opts ...grpc.CallOption) (*DeleteFilterRuleResponse, error)
	// コンテンツをフィルタリング
	ApplyContentFilter(ctx context.Context, in *ApplyContentFilterRequest, opts ...grpc.CallOption) (*ApplyContentFilterResponse, error)
	// モデレーションログ
	// モデレーションログを作成
	CreateModerationLog(ctx context.Context, in *CreateModerationLogRequest, opts ...grpc.CallOption) (*CreateModerationLogResponse, error)
	// モデレーションログを一覧取得
	ListModerationLogs(ctx context.Context, in *ListModerationLogsRequest, opts ...grpc.CallOption) (*ListModerationLogsResponse, error)
	// モデレーションログをエクスポート
	ExportModerationLogs(ctx context.Context, in *ExportModerationLogsRequest, opts ...grpc.CallOption) (*ExportModerationLogsResponse, error)
	// 統計・レポート
	// モデレーション統計を取得
	GetModerationStats(ctx context.Context, in *GetModerationStatsRequest, opts ...grpc.CallOption) (*GetModerationStatsResponse, error)
	// モデレーターのパフォーマンスを取得
	GetModeratorPerformance(ctx context.Context, in *GetModeratorPerformanceRequest, opts ...grpc.CallOption) (*GetModeratorPerformanceResponse, error)
	// モデレーター管理
	// モデレーターを登録
	RegisterModerator(ctx context.Context, in *RegisterModeratorRequest, opts ...grpc.CallOption) (*RegisterModeratorResponse, error)
	// モデレーター情報を更新
	UpdateModerator(ctx context.Context, in *UpdateModeratorRequest, opts ...grpc.CallOption) (*UpdateModeratorResponse, error)
	// モデレーターを一覧取得
	ListModerators(ctx context.Context, in *ListModeratorsRequest, opts ...grpc.CallOption) (*ListModeratorsResponse, error)
	// モデレーターを無効化
	DeactivateModerator(ctx context.Context, in *DeactivateModeratorRequest, opts ...grpc.CallOption) (*DeactivateModeratorResponse, error)
}

type moderationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModerationServiceClient(cc grpc.ClientConnInterface) ModerationServiceClient {
	return &moderationServiceClient{cc}
}

func (c *moderationServiceClient) CreateUserReport(ctx context.Context, in *CreateUserReportRequest, opts ...grpc.CallOption) (*CreateUserReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserReportResponse)
	err := c.cc.Invoke(ctx, ModerationService_CreateUserReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetUserReport(ctx context.Context, in *GetUserReportRequest, opts ...grpc.CallOption) (*GetUserReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReportResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetUserReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListUserReports(ctx context.Context, in *ListUserReportsRequest, opts ...grpc.CallOption) (*ListUserReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserReportsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListUserReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UpdateUserReport(ctx context.Context, in *UpdateUserReportRequest, opts ...grpc.CallOption) (*UpdateUserReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserReportResponse)
	err := c.cc.Invoke(ctx, ModerationService_UpdateUserReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ProcessUserReport(ctx context.Context, in *ProcessUserReportRequest, opts ...grpc.CallOption) (*ProcessUserReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessUserReportResponse)
	err := c.cc.Invoke(ctx, ModerationService_ProcessUserReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ModerateContent(ctx context.Context, in *ModerateContentRequest, opts ...grpc.CallOption) (*ModerateContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModerateContentResponse)
	err := c.cc.Invoke(ctx, ModerationService_ModerateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) BatchModerateContent(ctx context.Context, in *BatchModerateContentRequest, opts ...grpc.CallOption) (*BatchModerateContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchModerateContentResponse)
	err := c.cc.Invoke(ctx, ModerationService_BatchModerateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetContentModerationStatus(ctx context.Context, in *GetContentModerationStatusRequest, opts ...grpc.CallOption) (*GetContentModerationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentModerationStatusResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetContentModerationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ExecuteModerationAction(ctx context.Context, in *ExecuteModerationActionRequest, opts ...grpc.CallOption) (*ExecuteModerationActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteModerationActionResponse)
	err := c.cc.Invoke(ctx, ModerationService_ExecuteModerationAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetModerationAction(ctx context.Context, in *GetModerationActionRequest, opts ...grpc.CallOption) (*GetModerationActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModerationActionResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetModerationAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListModerationActions(ctx context.Context, in *ListModerationActionsRequest, opts ...grpc.CallOption) (*ListModerationActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModerationActionsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListModerationActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) RevokeModerationAction(ctx context.Context, in *RevokeModerationActionRequest, opts ...grpc.CallOption) (*RevokeModerationActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeModerationActionResponse)
	err := c.cc.Invoke(ctx, ModerationService_RevokeModerationAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...grpc.CallOption) (*CreateAppealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppealResponse)
	err := c.cc.Invoke(ctx, ModerationService_CreateAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetAppeal(ctx context.Context, in *GetAppealRequest, opts ...grpc.CallOption) (*GetAppealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppealResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListAppeals(ctx context.Context, in *ListAppealsRequest, opts ...grpc.CallOption) (*ListAppealsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppealsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListAppeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ReviewAppeal(ctx context.Context, in *ReviewAppealRequest, opts ...grpc.CallOption) (*ReviewAppealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewAppealResponse)
	err := c.cc.Invoke(ctx, ModerationService_ReviewAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) CreateFilterRule(ctx context.Context, in *CreateFilterRuleRequest, opts ...grpc.CallOption) (*CreateFilterRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFilterRuleResponse)
	err := c.cc.Invoke(ctx, ModerationService_CreateFilterRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetFilterRule(ctx context.Context, in *GetFilterRuleRequest, opts ...grpc.CallOption) (*GetFilterRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilterRuleResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetFilterRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListFilterRules(ctx context.Context, in *ListFilterRulesRequest, opts ...grpc.CallOption) (*ListFilterRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilterRulesResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListFilterRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UpdateFilterRule(ctx context.Context, in *UpdateFilterRuleRequest, opts ...grpc.CallOption) (*UpdateFilterRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFilterRuleResponse)
	err := c.cc.Invoke(ctx, ModerationService_UpdateFilterRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) DeleteFilterRule(ctx context.Context, in *DeleteFilterRuleRequest, opts ...grpc.CallOption) (*DeleteFilterRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFilterRuleResponse)
	err := c.cc.Invoke(ctx, ModerationService_DeleteFilterRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ApplyContentFilter(ctx context.Context, in *ApplyContentFilterRequest, opts ...grpc.CallOption) (*ApplyContentFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyContentFilterResponse)
	err := c.cc.Invoke(ctx, ModerationService_ApplyContentFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) CreateModerationLog(ctx context.Context, in *CreateModerationLogRequest, opts ...grpc.CallOption) (*CreateModerationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModerationLogResponse)
	err := c.cc.Invoke(ctx, ModerationService_CreateModerationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListModerationLogs(ctx context.Context, in *ListModerationLogsRequest, opts ...grpc.CallOption) (*ListModerationLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModerationLogsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListModerationLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ExportModerationLogs(ctx context.Context, in *ExportModerationLogsRequest, opts ...grpc.CallOption) (*ExportModerationLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportModerationLogsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ExportModerationLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetModerationStats(ctx context.Context, in *GetModerationStatsRequest, opts ...grpc.CallOption) (*GetModerationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModerationStatsResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetModerationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) GetModeratorPerformance(ctx context.Context, in *GetModeratorPerformanceRequest, opts ...grpc.CallOption) (*GetModeratorPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModeratorPerformanceResponse)
	err := c.cc.Invoke(ctx, ModerationService_GetModeratorPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) RegisterModerator(ctx context.Context, in *RegisterModeratorRequest, opts ...grpc.CallOption) (*RegisterModeratorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterModeratorResponse)
	err := c.cc.Invoke(ctx, ModerationService_RegisterModerator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UpdateModerator(ctx context.Context, in *UpdateModeratorRequest, opts ...grpc.CallOption) (*UpdateModeratorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModeratorResponse)
	err := c.cc.Invoke(ctx, ModerationService_UpdateModerator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListModerators(ctx context.Context, in *ListModeratorsRequest, opts ...grpc.CallOption) (*ListModeratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModeratorsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListModerators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) DeactivateModerator(ctx context.Context, in *DeactivateModeratorRequest, opts ...grpc.CallOption) (*DeactivateModeratorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateModeratorResponse)
	err := c.cc.Invoke(ctx, ModerationService_DeactivateModerator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModerationServiceServer is the server API for ModerationService service.
// All implementations must embed UnimplementedModerationServiceServer
// for forward compatibility.
//
// モデレーションサービス
type ModerationServiceServer interface {
	// ユーザー報告関連
	// ユーザー報告を作成
	CreateUserReport(context.Context, *CreateUserReportRequest) (*CreateUserReportResponse, error)
	// ユーザー報告を取得
	GetUserReport(context.Context, *GetUserReportRequest) (*GetUserReportResponse, error)
	// ユーザー報告を一覧取得
	ListUserReports(context.Context, *ListUserReportsRequest) (*ListUserReportsResponse, error)
	// ユーザー報告を更新
	UpdateUserReport(context.Context, *UpdateUserReportRequest) (*UpdateUserReportResponse, error)
	// ユーザー報告を処理
	ProcessUserReport(context.Context, *ProcessUserReportRequest) (*ProcessUserReportResponse, error)
	// コンテンツモデレーション
	// コンテンツを審査
	ModerateContent(context.Context, *ModerateContentRequest) (*ModerateContentResponse, error)
	// バッチでコンテンツを審査
	BatchModerateContent(context.Context, *BatchModerateContentRequest) (*BatchModerateContentResponse, error)
	// コンテンツのモデレーション状態を取得
	GetContentModerationStatus(context.Context, *GetContentModerationStatusRequest) (*GetContentModerationStatusResponse, error)
	// モデレーションアクション
	// モデレーションアクションを実行
	ExecuteModerationAction(context.Context, *ExecuteModerationActionRequest) (*ExecuteModerationActionResponse, error)
	// モデレーションアクションを取得
	GetModerationAction(context.Context, *GetModerationActionRequest) (*GetModerationActionResponse, error)
	// モデレーションアクションを一覧取得
	ListModerationActions(context.Context, *ListModerationActionsRequest) (*ListModerationActionsResponse, error)
	// モデレーションアクションを取り消し
	RevokeModerationAction(context.Context, *RevokeModerationActionRequest) (*RevokeModerationActionResponse, error)
	// アピール（異議申し立て）
	// アピールを作成
	CreateAppeal(context.Context, *CreateAppealRequest) (*CreateAppealResponse, error)
	// アピールを取得
	GetAppeal(context.Context, *GetAppealRequest) (*GetAppealResponse, error)
	// アピールを一覧取得
	ListAppeals(context.Context, *ListAppealsRequest) (*ListAppealsResponse, error)
	// アピールを審査
	ReviewAppeal(context.Context, *ReviewAppealRequest) (*ReviewAppealResponse, error)
	// フィルタ管理
	// フィルタールールを作成
	CreateFilterRule(context.Context, *CreateFilterRuleRequest) (*CreateFilterRuleResponse, error)
	// フィルタールールを取得
	GetFilterRule(context.Context, *GetFilterRuleRequest) (*GetFilterRuleResponse, error)
	// フィルタールールを一覧取得
	ListFilterRules(context.Context, *ListFilterRulesRequest) (*ListFilterRulesResponse, error)
	// フィルタールールを更新
	UpdateFilterRule(context.Context, *UpdateFilterRuleRequest) (*UpdateFilterRuleResponse, error)
	// フィルタールールを削除
	DeleteFilterRule(context.Context, *DeleteFilterRuleRequest) (*DeleteFilterRuleResponse, error)
	// コンテンツをフィルタリング
	ApplyContentFilter(context.Context, *ApplyContentFilterRequest) (*ApplyContentFilterResponse, error)
	// モデレーションログ
	// モデレーションログを作成
	CreateModerationLog(context.Context, *CreateModerationLogRequest) (*CreateModerationLogResponse, error)
	// モデレーションログを一覧取得
	ListModerationLogs(context.Context, *ListModerationLogsRequest) (*ListModerationLogsResponse, error)
	// モデレーションログをエクスポート
	ExportModerationLogs(context.Context, *ExportModerationLogsRequest) (*ExportModerationLogsResponse, error)
	// 統計・レポート
	// モデレーション統計を取得
	GetModerationStats(context.Context, *GetModerationStatsRequest) (*GetModerationStatsResponse, error)
	// モデレーターのパフォーマンスを取得
	GetModeratorPerformance(context.Context, *GetModeratorPerformanceRequest) (*GetModeratorPerformanceResponse, error)
	// モデレーター管理
	// モデレーターを登録
	RegisterModerator(context.Context, *RegisterModeratorRequest) (*RegisterModeratorResponse, error)
	// モデレーター情報を更新
	UpdateModerator(context.Context, *UpdateModeratorRequest) (*UpdateModeratorResponse, error)
	// モデレーターを一覧取得
	ListModerators(context.Context, *ListModeratorsRequest) (*ListModeratorsResponse, error)
	// モデレーターを無効化
	DeactivateModerator(context.Context, *DeactivateModeratorRequest) (*DeactivateModeratorResponse, error)
	mustEmbedUnimplementedModerationServiceServer()
}

// UnimplementedModerationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModerationServiceServer struct{}

func (UnimplementedModerationServiceServer) CreateUserReport(context.Context, *CreateUserReportRequest) (*CreateUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserReport not implemented")
}
func (UnimplementedModerationServiceServer) GetUserReport(context.Context, *GetUserReportRequest) (*GetUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReport not implemented")
}
func (UnimplementedModerationServiceServer) ListUserReports(context.Context, *ListUserReportsRequest) (*ListUserReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserReports not implemented")
}
func (UnimplementedModerationServiceServer) UpdateUserReport(context.Context, *UpdateUserReportRequest) (*UpdateUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserReport not implemented")
}
func (UnimplementedModerationServiceServer) ProcessUserReport(context.Context, *ProcessUserReportRequest) (*ProcessUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserReport not implemented")
}
func (UnimplementedModerationServiceServer) ModerateContent(context.Context, *ModerateContentRequest) (*ModerateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModerateContent not implemented")
}
func (UnimplementedModerationServiceServer) BatchModerateContent(context.Context, *BatchModerateContentRequest) (*BatchModerateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchModerateContent not implemented")
}
func (UnimplementedModerationServiceServer) GetContentModerationStatus(context.Context, *GetContentModerationStatusRequest) (*GetContentModerationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentModerationStatus not implemented")
}
func (UnimplementedModerationServiceServer) ExecuteModerationAction(context.Context, *ExecuteModerationActionRequest) (*ExecuteModerationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteModerationAction not implemented")
}
func (UnimplementedModerationServiceServer) GetModerationAction(context.Context, *GetModerationActionRequest) (*GetModerationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModerationAction not implemented")
}
func (UnimplementedModerationServiceServer) ListModerationActions(context.Context, *ListModerationActionsRequest) (*ListModerationActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModerationActions not implemented")
}
func (UnimplementedModerationServiceServer) RevokeModerationAction(context.Context, *RevokeModerationActionRequest) (*RevokeModerationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeModerationAction not implemented")
}
func (UnimplementedModerationServiceServer) CreateAppeal(context.Context, *CreateAppealRequest) (*CreateAppealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppeal not implemented")
}
func (UnimplementedModerationServiceServer) GetAppeal(context.Context, *GetAppealRequest) (*GetAppealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppeal not implemented")
}
func (UnimplementedModerationServiceServer) ListAppeals(context.Context, *ListAppealsRequest) (*ListAppealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppeals not implemented")
}
func (UnimplementedModerationServiceServer) ReviewAppeal(context.Context, *ReviewAppealRequest) (*ReviewAppealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewAppeal not implemented")
}
func (UnimplementedModerationServiceServer) CreateFilterRule(context.Context, *CreateFilterRuleRequest) (*CreateFilterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilterRule not implemented")
}
func (UnimplementedModerationServiceServer) GetFilterRule(context.Context, *GetFilterRuleRequest) (*GetFilterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterRule not implemented")
}
func (UnimplementedModerationServiceServer) ListFilterRules(context.Context, *ListFilterRulesRequest) (*ListFilterRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilterRules not implemented")
}
func (UnimplementedModerationServiceServer) UpdateFilterRule(context.Context, *UpdateFilterRuleRequest) (*UpdateFilterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilterRule not implemented")
}
func (UnimplementedModerationServiceServer) DeleteFilterRule(context.Context, *DeleteFilterRuleRequest) (*DeleteFilterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilterRule not implemented")
}
func (UnimplementedModerationServiceServer) ApplyContentFilter(context.Context, *ApplyContentFilterRequest) (*ApplyContentFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyContentFilter not implemented")
}
func (UnimplementedModerationServiceServer) CreateModerationLog(context.Context, *CreateModerationLogRequest) (*CreateModerationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModerationLog not implemented")
}
func (UnimplementedModerationServiceServer) ListModerationLogs(context.Context, *ListModerationLogsRequest) (*ListModerationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModerationLogs not implemented")
}
func (UnimplementedModerationServiceServer) ExportModerationLogs(context.Context, *ExportModerationLogsRequest) (*ExportModerationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportModerationLogs not implemented")
}
func (UnimplementedModerationServiceServer) GetModerationStats(context.Context, *GetModerationStatsRequest) (*GetModerationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModerationStats not implemented")
}
func (UnimplementedModerationServiceServer) GetModeratorPerformance(context.Context, *GetModeratorPerformanceRequest) (*GetModeratorPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModeratorPerformance not implemented")
}
func (UnimplementedModerationServiceServer) RegisterModerator(context.Context, *RegisterModeratorRequest) (*RegisterModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModerator not implemented")
}
func (UnimplementedModerationServiceServer) UpdateModerator(context.Context, *UpdateModeratorRequest) (*UpdateModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModerator not implemented")
}
func (UnimplementedModerationServiceServer) ListModerators(context.Context, *ListModeratorsRequest) (*ListModeratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModerators not implemented")
}
func (UnimplementedModerationServiceServer) DeactivateModerator(context.Context, *DeactivateModeratorRequest) (*DeactivateModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateModerator not implemented")
}
func (UnimplementedModerationServiceServer) mustEmbedUnimplementedModerationServiceServer() {}
func (UnimplementedModerationServiceServer) testEmbeddedByValue()                           {}

// UnsafeModerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModerationServiceServer will
// result in compilation errors.
type UnsafeModerationServiceServer interface {
	mustEmbedUnimplementedModerationServiceServer()
}

func RegisterModerationServiceServer(s grpc.ServiceRegistrar, srv ModerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedModerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModerationService_ServiceDesc, srv)
}

func _ModerationService_CreateUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).CreateUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_CreateUserReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).CreateUserReport(ctx, req.(*CreateUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetUserReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetUserReport(ctx, req.(*GetUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListUserReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListUserReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListUserReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListUserReports(ctx, req.(*ListUserReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UpdateUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UpdateUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UpdateUserReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UpdateUserReport(ctx, req.(*UpdateUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ProcessUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ProcessUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ProcessUserReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ProcessUserReport(ctx, req.(*ProcessUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ModerateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ModerateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ModerateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ModerateContent(ctx, req.(*ModerateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_BatchModerateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchModerateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).BatchModerateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_BatchModerateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).BatchModerateContent(ctx, req.(*BatchModerateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetContentModerationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentModerationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetContentModerationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetContentModerationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetContentModerationStatus(ctx, req.(*GetContentModerationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ExecuteModerationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteModerationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ExecuteModerationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ExecuteModerationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ExecuteModerationAction(ctx, req.(*ExecuteModerationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetModerationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModerationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetModerationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetModerationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetModerationAction(ctx, req.(*GetModerationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListModerationActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModerationActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListModerationActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListModerationActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListModerationActions(ctx, req.(*ListModerationActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_RevokeModerationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeModerationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).RevokeModerationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_RevokeModerationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).RevokeModerationAction(ctx, req.(*RevokeModerationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_CreateAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).CreateAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_CreateAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).CreateAppeal(ctx, req.(*CreateAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetAppeal(ctx, req.(*GetAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListAppeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListAppeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListAppeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListAppeals(ctx, req.(*ListAppealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ReviewAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ReviewAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ReviewAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ReviewAppeal(ctx, req.(*ReviewAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_CreateFilterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).CreateFilterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_CreateFilterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).CreateFilterRule(ctx, req.(*CreateFilterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetFilterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetFilterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetFilterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetFilterRule(ctx, req.(*GetFilterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListFilterRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilterRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListFilterRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListFilterRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListFilterRules(ctx, req.(*ListFilterRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UpdateFilterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UpdateFilterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UpdateFilterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UpdateFilterRule(ctx, req.(*UpdateFilterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_DeleteFilterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).DeleteFilterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_DeleteFilterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).DeleteFilterRule(ctx, req.(*DeleteFilterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ApplyContentFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContentFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ApplyContentFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ApplyContentFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ApplyContentFilter(ctx, req.(*ApplyContentFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_CreateModerationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModerationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).CreateModerationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_CreateModerationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).CreateModerationLog(ctx, req.(*CreateModerationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListModerationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModerationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListModerationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListModerationLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListModerationLogs(ctx, req.(*ListModerationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ExportModerationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportModerationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ExportModerationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ExportModerationLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ExportModerationLogs(ctx, req.(*ExportModerationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetModerationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModerationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetModerationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetModerationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetModerationStats(ctx, req.(*GetModerationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_GetModeratorPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeratorPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).GetModeratorPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_GetModeratorPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).GetModeratorPerformance(ctx, req.(*GetModeratorPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_RegisterModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).RegisterModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_RegisterModerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).RegisterModerator(ctx, req.(*RegisterModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UpdateModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UpdateModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UpdateModerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UpdateModerator(ctx, req.(*UpdateModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListModerators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModeratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListModerators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListModerators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListModerators(ctx, req.(*ListModeratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_DeactivateModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).DeactivateModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_DeactivateModerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).DeactivateModerator(ctx, req.(*DeactivateModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModerationService_ServiceDesc is the grpc.ServiceDesc for ModerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.moderation.v1.ModerationService",
	HandlerType: (*ModerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserReport",
			Handler:    _ModerationService_CreateUserReport_Handler,
		},
		{
			MethodName: "GetUserReport",
			Handler:    _ModerationService_GetUserReport_Handler,
		},
		{
			MethodName: "ListUserReports",
			Handler:    _ModerationService_ListUserReports_Handler,
		},
		{
			MethodName: "UpdateUserReport",
			Handler:    _ModerationService_UpdateUserReport_Handler,
		},
		{
			MethodName: "ProcessUserReport",
			Handler:    _ModerationService_ProcessUserReport_Handler,
		},
		{
			MethodName: "ModerateContent",
			Handler:    _ModerationService_ModerateContent_Handler,
		},
		{
			MethodName: "BatchModerateContent",
			Handler:    _ModerationService_BatchModerateContent_Handler,
		},
		{
			MethodName: "GetContentModerationStatus",
			Handler:    _ModerationService_GetContentModerationStatus_Handler,
		},
		{
			MethodName: "ExecuteModerationAction",
			Handler:    _ModerationService_ExecuteModerationAction_Handler,
		},
		{
			MethodName: "GetModerationAction",
			Handler:    _ModerationService_GetModerationAction_Handler,
		},
		{
			MethodName: "ListModerationActions",
			Handler:    _ModerationService_ListModerationActions_Handler,
		},
		{
			MethodName: "RevokeModerationAction",
			Handler:    _ModerationService_RevokeModerationAction_Handler,
		},
		{
			MethodName: "CreateAppeal",
			Handler:    _ModerationService_CreateAppeal_Handler,
		},
		{
			MethodName: "GetAppeal",
			Handler:    _ModerationService_GetAppeal_Handler,
		},
		{
			MethodName: "ListAppeals",
			Handler:    _ModerationService_ListAppeals_Handler,
		},
		{
			MethodName: "ReviewAppeal",
			Handler:    _ModerationService_ReviewAppeal_Handler,
		},
		{
			MethodName: "CreateFilterRule",
			Handler:    _ModerationService_CreateFilterRule_Handler,
		},
		{
			MethodName: "GetFilterRule",
			Handler:    _ModerationService_GetFilterRule_Handler,
		},
		{
			MethodName: "ListFilterRules",
			Handler:    _ModerationService_ListFilterRules_Handler,
		},
		{
			MethodName: "UpdateFilterRule",
			Handler:    _ModerationService_UpdateFilterRule_Handler,
		},
		{
			MethodName: "DeleteFilterRule",
			Handler:    _ModerationService_DeleteFilterRule_Handler,
		},
		{
			MethodName: "ApplyContentFilter",
			Handler:    _ModerationService_ApplyContentFilter_Handler,
		},
		{
			MethodName: "CreateModerationLog",
			Handler:    _ModerationService_CreateModerationLog_Handler,
		},
		{
			MethodName: "ListModerationLogs",
			Handler:    _ModerationService_ListModerationLogs_Handler,
		},
		{
			MethodName: "ExportModerationLogs",
			Handler:    _ModerationService_ExportModerationLogs_Handler,
		},
		{
			MethodName: "GetModerationStats",
			Handler:    _ModerationService_GetModerationStats_Handler,
		},
		{
			MethodName: "GetModeratorPerformance",
			Handler:    _ModerationService_GetModeratorPerformance_Handler,
		},
		{
			MethodName: "RegisterModerator",
			Handler:    _ModerationService_RegisterModerator_Handler,
		},
		{
			MethodName: "UpdateModerator",
			Handler:    _ModerationService_UpdateModerator_Handler,
		},
		{
			MethodName: "ListModerators",
			Handler:    _ModerationService_ListModerators_Handler,
		},
		{
			MethodName: "DeactivateModerator",
			Handler:    _ModerationService_DeactivateModerator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/moderation/v1/moderation_service.proto",
}
