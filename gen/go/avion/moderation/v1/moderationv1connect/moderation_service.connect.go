// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/moderation/v1/moderation_service.proto

package moderationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/moderation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModerationServiceName is the fully-qualified name of the ModerationService service.
	ModerationServiceName = "avion.moderation.v1.ModerationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModerationServiceCreateUserReportProcedure is the fully-qualified name of the ModerationService's
	// CreateUserReport RPC.
	ModerationServiceCreateUserReportProcedure = "/avion.moderation.v1.ModerationService/CreateUserReport"
	// ModerationServiceGetUserReportProcedure is the fully-qualified name of the ModerationService's
	// GetUserReport RPC.
	ModerationServiceGetUserReportProcedure = "/avion.moderation.v1.ModerationService/GetUserReport"
	// ModerationServiceListUserReportsProcedure is the fully-qualified name of the ModerationService's
	// ListUserReports RPC.
	ModerationServiceListUserReportsProcedure = "/avion.moderation.v1.ModerationService/ListUserReports"
	// ModerationServiceUpdateUserReportProcedure is the fully-qualified name of the ModerationService's
	// UpdateUserReport RPC.
	ModerationServiceUpdateUserReportProcedure = "/avion.moderation.v1.ModerationService/UpdateUserReport"
	// ModerationServiceProcessUserReportProcedure is the fully-qualified name of the
	// ModerationService's ProcessUserReport RPC.
	ModerationServiceProcessUserReportProcedure = "/avion.moderation.v1.ModerationService/ProcessUserReport"
	// ModerationServiceModerateContentProcedure is the fully-qualified name of the ModerationService's
	// ModerateContent RPC.
	ModerationServiceModerateContentProcedure = "/avion.moderation.v1.ModerationService/ModerateContent"
	// ModerationServiceBatchModerateContentProcedure is the fully-qualified name of the
	// ModerationService's BatchModerateContent RPC.
	ModerationServiceBatchModerateContentProcedure = "/avion.moderation.v1.ModerationService/BatchModerateContent"
	// ModerationServiceGetContentModerationStatusProcedure is the fully-qualified name of the
	// ModerationService's GetContentModerationStatus RPC.
	ModerationServiceGetContentModerationStatusProcedure = "/avion.moderation.v1.ModerationService/GetContentModerationStatus"
	// ModerationServiceExecuteModerationActionProcedure is the fully-qualified name of the
	// ModerationService's ExecuteModerationAction RPC.
	ModerationServiceExecuteModerationActionProcedure = "/avion.moderation.v1.ModerationService/ExecuteModerationAction"
	// ModerationServiceGetModerationActionProcedure is the fully-qualified name of the
	// ModerationService's GetModerationAction RPC.
	ModerationServiceGetModerationActionProcedure = "/avion.moderation.v1.ModerationService/GetModerationAction"
	// ModerationServiceListModerationActionsProcedure is the fully-qualified name of the
	// ModerationService's ListModerationActions RPC.
	ModerationServiceListModerationActionsProcedure = "/avion.moderation.v1.ModerationService/ListModerationActions"
	// ModerationServiceRevokeModerationActionProcedure is the fully-qualified name of the
	// ModerationService's RevokeModerationAction RPC.
	ModerationServiceRevokeModerationActionProcedure = "/avion.moderation.v1.ModerationService/RevokeModerationAction"
	// ModerationServiceCreateAppealProcedure is the fully-qualified name of the ModerationService's
	// CreateAppeal RPC.
	ModerationServiceCreateAppealProcedure = "/avion.moderation.v1.ModerationService/CreateAppeal"
	// ModerationServiceGetAppealProcedure is the fully-qualified name of the ModerationService's
	// GetAppeal RPC.
	ModerationServiceGetAppealProcedure = "/avion.moderation.v1.ModerationService/GetAppeal"
	// ModerationServiceListAppealsProcedure is the fully-qualified name of the ModerationService's
	// ListAppeals RPC.
	ModerationServiceListAppealsProcedure = "/avion.moderation.v1.ModerationService/ListAppeals"
	// ModerationServiceReviewAppealProcedure is the fully-qualified name of the ModerationService's
	// ReviewAppeal RPC.
	ModerationServiceReviewAppealProcedure = "/avion.moderation.v1.ModerationService/ReviewAppeal"
	// ModerationServiceCreateFilterRuleProcedure is the fully-qualified name of the ModerationService's
	// CreateFilterRule RPC.
	ModerationServiceCreateFilterRuleProcedure = "/avion.moderation.v1.ModerationService/CreateFilterRule"
	// ModerationServiceGetFilterRuleProcedure is the fully-qualified name of the ModerationService's
	// GetFilterRule RPC.
	ModerationServiceGetFilterRuleProcedure = "/avion.moderation.v1.ModerationService/GetFilterRule"
	// ModerationServiceListFilterRulesProcedure is the fully-qualified name of the ModerationService's
	// ListFilterRules RPC.
	ModerationServiceListFilterRulesProcedure = "/avion.moderation.v1.ModerationService/ListFilterRules"
	// ModerationServiceUpdateFilterRuleProcedure is the fully-qualified name of the ModerationService's
	// UpdateFilterRule RPC.
	ModerationServiceUpdateFilterRuleProcedure = "/avion.moderation.v1.ModerationService/UpdateFilterRule"
	// ModerationServiceDeleteFilterRuleProcedure is the fully-qualified name of the ModerationService's
	// DeleteFilterRule RPC.
	ModerationServiceDeleteFilterRuleProcedure = "/avion.moderation.v1.ModerationService/DeleteFilterRule"
	// ModerationServiceApplyContentFilterProcedure is the fully-qualified name of the
	// ModerationService's ApplyContentFilter RPC.
	ModerationServiceApplyContentFilterProcedure = "/avion.moderation.v1.ModerationService/ApplyContentFilter"
	// ModerationServiceCreateModerationLogProcedure is the fully-qualified name of the
	// ModerationService's CreateModerationLog RPC.
	ModerationServiceCreateModerationLogProcedure = "/avion.moderation.v1.ModerationService/CreateModerationLog"
	// ModerationServiceListModerationLogsProcedure is the fully-qualified name of the
	// ModerationService's ListModerationLogs RPC.
	ModerationServiceListModerationLogsProcedure = "/avion.moderation.v1.ModerationService/ListModerationLogs"
	// ModerationServiceExportModerationLogsProcedure is the fully-qualified name of the
	// ModerationService's ExportModerationLogs RPC.
	ModerationServiceExportModerationLogsProcedure = "/avion.moderation.v1.ModerationService/ExportModerationLogs"
	// ModerationServiceGetModerationStatsProcedure is the fully-qualified name of the
	// ModerationService's GetModerationStats RPC.
	ModerationServiceGetModerationStatsProcedure = "/avion.moderation.v1.ModerationService/GetModerationStats"
	// ModerationServiceGetModeratorPerformanceProcedure is the fully-qualified name of the
	// ModerationService's GetModeratorPerformance RPC.
	ModerationServiceGetModeratorPerformanceProcedure = "/avion.moderation.v1.ModerationService/GetModeratorPerformance"
	// ModerationServiceRegisterModeratorProcedure is the fully-qualified name of the
	// ModerationService's RegisterModerator RPC.
	ModerationServiceRegisterModeratorProcedure = "/avion.moderation.v1.ModerationService/RegisterModerator"
	// ModerationServiceUpdateModeratorProcedure is the fully-qualified name of the ModerationService's
	// UpdateModerator RPC.
	ModerationServiceUpdateModeratorProcedure = "/avion.moderation.v1.ModerationService/UpdateModerator"
	// ModerationServiceListModeratorsProcedure is the fully-qualified name of the ModerationService's
	// ListModerators RPC.
	ModerationServiceListModeratorsProcedure = "/avion.moderation.v1.ModerationService/ListModerators"
	// ModerationServiceDeactivateModeratorProcedure is the fully-qualified name of the
	// ModerationService's DeactivateModerator RPC.
	ModerationServiceDeactivateModeratorProcedure = "/avion.moderation.v1.ModerationService/DeactivateModerator"
)

// ModerationServiceClient is a client for the avion.moderation.v1.ModerationService service.
type ModerationServiceClient interface {
	// ユーザー報告関連
	// ユーザー報告を作成
	CreateUserReport(context.Context, *connect.Request[v1.CreateUserReportRequest]) (*connect.Response[v1.CreateUserReportResponse], error)
	// ユーザー報告を取得
	GetUserReport(context.Context, *connect.Request[v1.GetUserReportRequest]) (*connect.Response[v1.GetUserReportResponse], error)
	// ユーザー報告を一覧取得
	ListUserReports(context.Context, *connect.Request[v1.ListUserReportsRequest]) (*connect.Response[v1.ListUserReportsResponse], error)
	// ユーザー報告を更新
	UpdateUserReport(context.Context, *connect.Request[v1.UpdateUserReportRequest]) (*connect.Response[v1.UpdateUserReportResponse], error)
	// ユーザー報告を処理
	ProcessUserReport(context.Context, *connect.Request[v1.ProcessUserReportRequest]) (*connect.Response[v1.ProcessUserReportResponse], error)
	// コンテンツモデレーション
	// コンテンツを審査
	ModerateContent(context.Context, *connect.Request[v1.ModerateContentRequest]) (*connect.Response[v1.ModerateContentResponse], error)
	// バッチでコンテンツを審査
	BatchModerateContent(context.Context, *connect.Request[v1.BatchModerateContentRequest]) (*connect.Response[v1.BatchModerateContentResponse], error)
	// コンテンツのモデレーション状態を取得
	GetContentModerationStatus(context.Context, *connect.Request[v1.GetContentModerationStatusRequest]) (*connect.Response[v1.GetContentModerationStatusResponse], error)
	// モデレーションアクション
	// モデレーションアクションを実行
	ExecuteModerationAction(context.Context, *connect.Request[v1.ExecuteModerationActionRequest]) (*connect.Response[v1.ExecuteModerationActionResponse], error)
	// モデレーションアクションを取得
	GetModerationAction(context.Context, *connect.Request[v1.GetModerationActionRequest]) (*connect.Response[v1.GetModerationActionResponse], error)
	// モデレーションアクションを一覧取得
	ListModerationActions(context.Context, *connect.Request[v1.ListModerationActionsRequest]) (*connect.Response[v1.ListModerationActionsResponse], error)
	// モデレーションアクションを取り消し
	RevokeModerationAction(context.Context, *connect.Request[v1.RevokeModerationActionRequest]) (*connect.Response[v1.RevokeModerationActionResponse], error)
	// アピール（異議申し立て）
	// アピールを作成
	CreateAppeal(context.Context, *connect.Request[v1.CreateAppealRequest]) (*connect.Response[v1.CreateAppealResponse], error)
	// アピールを取得
	GetAppeal(context.Context, *connect.Request[v1.GetAppealRequest]) (*connect.Response[v1.GetAppealResponse], error)
	// アピールを一覧取得
	ListAppeals(context.Context, *connect.Request[v1.ListAppealsRequest]) (*connect.Response[v1.ListAppealsResponse], error)
	// アピールを審査
	ReviewAppeal(context.Context, *connect.Request[v1.ReviewAppealRequest]) (*connect.Response[v1.ReviewAppealResponse], error)
	// フィルタ管理
	// フィルタールールを作成
	CreateFilterRule(context.Context, *connect.Request[v1.CreateFilterRuleRequest]) (*connect.Response[v1.CreateFilterRuleResponse], error)
	// フィルタールールを取得
	GetFilterRule(context.Context, *connect.Request[v1.GetFilterRuleRequest]) (*connect.Response[v1.GetFilterRuleResponse], error)
	// フィルタールールを一覧取得
	ListFilterRules(context.Context, *connect.Request[v1.ListFilterRulesRequest]) (*connect.Response[v1.ListFilterRulesResponse], error)
	// フィルタールールを更新
	UpdateFilterRule(context.Context, *connect.Request[v1.UpdateFilterRuleRequest]) (*connect.Response[v1.UpdateFilterRuleResponse], error)
	// フィルタールールを削除
	DeleteFilterRule(context.Context, *connect.Request[v1.DeleteFilterRuleRequest]) (*connect.Response[v1.DeleteFilterRuleResponse], error)
	// コンテンツをフィルタリング
	ApplyContentFilter(context.Context, *connect.Request[v1.ApplyContentFilterRequest]) (*connect.Response[v1.ApplyContentFilterResponse], error)
	// モデレーションログ
	// モデレーションログを作成
	CreateModerationLog(context.Context, *connect.Request[v1.CreateModerationLogRequest]) (*connect.Response[v1.CreateModerationLogResponse], error)
	// モデレーションログを一覧取得
	ListModerationLogs(context.Context, *connect.Request[v1.ListModerationLogsRequest]) (*connect.Response[v1.ListModerationLogsResponse], error)
	// モデレーションログをエクスポート
	ExportModerationLogs(context.Context, *connect.Request[v1.ExportModerationLogsRequest]) (*connect.Response[v1.ExportModerationLogsResponse], error)
	// 統計・レポート
	// モデレーション統計を取得
	GetModerationStats(context.Context, *connect.Request[v1.GetModerationStatsRequest]) (*connect.Response[v1.GetModerationStatsResponse], error)
	// モデレーターのパフォーマンスを取得
	GetModeratorPerformance(context.Context, *connect.Request[v1.GetModeratorPerformanceRequest]) (*connect.Response[v1.GetModeratorPerformanceResponse], error)
	// モデレーター管理
	// モデレーターを登録
	RegisterModerator(context.Context, *connect.Request[v1.RegisterModeratorRequest]) (*connect.Response[v1.RegisterModeratorResponse], error)
	// モデレーター情報を更新
	UpdateModerator(context.Context, *connect.Request[v1.UpdateModeratorRequest]) (*connect.Response[v1.UpdateModeratorResponse], error)
	// モデレーターを一覧取得
	ListModerators(context.Context, *connect.Request[v1.ListModeratorsRequest]) (*connect.Response[v1.ListModeratorsResponse], error)
	// モデレーターを無効化
	DeactivateModerator(context.Context, *connect.Request[v1.DeactivateModeratorRequest]) (*connect.Response[v1.DeactivateModeratorResponse], error)
}

// NewModerationServiceClient constructs a client for the avion.moderation.v1.ModerationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModerationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModerationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	moderationServiceMethods := v1.File_avion_moderation_v1_moderation_service_proto.Services().ByName("ModerationService").Methods()
	return &moderationServiceClient{
		createUserReport: connect.NewClient[v1.CreateUserReportRequest, v1.CreateUserReportResponse](
			httpClient,
			baseURL+ModerationServiceCreateUserReportProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("CreateUserReport")),
			connect.WithClientOptions(opts...),
		),
		getUserReport: connect.NewClient[v1.GetUserReportRequest, v1.GetUserReportResponse](
			httpClient,
			baseURL+ModerationServiceGetUserReportProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetUserReport")),
			connect.WithClientOptions(opts...),
		),
		listUserReports: connect.NewClient[v1.ListUserReportsRequest, v1.ListUserReportsResponse](
			httpClient,
			baseURL+ModerationServiceListUserReportsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListUserReports")),
			connect.WithClientOptions(opts...),
		),
		updateUserReport: connect.NewClient[v1.UpdateUserReportRequest, v1.UpdateUserReportResponse](
			httpClient,
			baseURL+ModerationServiceUpdateUserReportProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("UpdateUserReport")),
			connect.WithClientOptions(opts...),
		),
		processUserReport: connect.NewClient[v1.ProcessUserReportRequest, v1.ProcessUserReportResponse](
			httpClient,
			baseURL+ModerationServiceProcessUserReportProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ProcessUserReport")),
			connect.WithClientOptions(opts...),
		),
		moderateContent: connect.NewClient[v1.ModerateContentRequest, v1.ModerateContentResponse](
			httpClient,
			baseURL+ModerationServiceModerateContentProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ModerateContent")),
			connect.WithClientOptions(opts...),
		),
		batchModerateContent: connect.NewClient[v1.BatchModerateContentRequest, v1.BatchModerateContentResponse](
			httpClient,
			baseURL+ModerationServiceBatchModerateContentProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("BatchModerateContent")),
			connect.WithClientOptions(opts...),
		),
		getContentModerationStatus: connect.NewClient[v1.GetContentModerationStatusRequest, v1.GetContentModerationStatusResponse](
			httpClient,
			baseURL+ModerationServiceGetContentModerationStatusProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetContentModerationStatus")),
			connect.WithClientOptions(opts...),
		),
		executeModerationAction: connect.NewClient[v1.ExecuteModerationActionRequest, v1.ExecuteModerationActionResponse](
			httpClient,
			baseURL+ModerationServiceExecuteModerationActionProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ExecuteModerationAction")),
			connect.WithClientOptions(opts...),
		),
		getModerationAction: connect.NewClient[v1.GetModerationActionRequest, v1.GetModerationActionResponse](
			httpClient,
			baseURL+ModerationServiceGetModerationActionProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetModerationAction")),
			connect.WithClientOptions(opts...),
		),
		listModerationActions: connect.NewClient[v1.ListModerationActionsRequest, v1.ListModerationActionsResponse](
			httpClient,
			baseURL+ModerationServiceListModerationActionsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListModerationActions")),
			connect.WithClientOptions(opts...),
		),
		revokeModerationAction: connect.NewClient[v1.RevokeModerationActionRequest, v1.RevokeModerationActionResponse](
			httpClient,
			baseURL+ModerationServiceRevokeModerationActionProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("RevokeModerationAction")),
			connect.WithClientOptions(opts...),
		),
		createAppeal: connect.NewClient[v1.CreateAppealRequest, v1.CreateAppealResponse](
			httpClient,
			baseURL+ModerationServiceCreateAppealProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("CreateAppeal")),
			connect.WithClientOptions(opts...),
		),
		getAppeal: connect.NewClient[v1.GetAppealRequest, v1.GetAppealResponse](
			httpClient,
			baseURL+ModerationServiceGetAppealProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetAppeal")),
			connect.WithClientOptions(opts...),
		),
		listAppeals: connect.NewClient[v1.ListAppealsRequest, v1.ListAppealsResponse](
			httpClient,
			baseURL+ModerationServiceListAppealsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListAppeals")),
			connect.WithClientOptions(opts...),
		),
		reviewAppeal: connect.NewClient[v1.ReviewAppealRequest, v1.ReviewAppealResponse](
			httpClient,
			baseURL+ModerationServiceReviewAppealProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ReviewAppeal")),
			connect.WithClientOptions(opts...),
		),
		createFilterRule: connect.NewClient[v1.CreateFilterRuleRequest, v1.CreateFilterRuleResponse](
			httpClient,
			baseURL+ModerationServiceCreateFilterRuleProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("CreateFilterRule")),
			connect.WithClientOptions(opts...),
		),
		getFilterRule: connect.NewClient[v1.GetFilterRuleRequest, v1.GetFilterRuleResponse](
			httpClient,
			baseURL+ModerationServiceGetFilterRuleProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetFilterRule")),
			connect.WithClientOptions(opts...),
		),
		listFilterRules: connect.NewClient[v1.ListFilterRulesRequest, v1.ListFilterRulesResponse](
			httpClient,
			baseURL+ModerationServiceListFilterRulesProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListFilterRules")),
			connect.WithClientOptions(opts...),
		),
		updateFilterRule: connect.NewClient[v1.UpdateFilterRuleRequest, v1.UpdateFilterRuleResponse](
			httpClient,
			baseURL+ModerationServiceUpdateFilterRuleProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("UpdateFilterRule")),
			connect.WithClientOptions(opts...),
		),
		deleteFilterRule: connect.NewClient[v1.DeleteFilterRuleRequest, v1.DeleteFilterRuleResponse](
			httpClient,
			baseURL+ModerationServiceDeleteFilterRuleProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("DeleteFilterRule")),
			connect.WithClientOptions(opts...),
		),
		applyContentFilter: connect.NewClient[v1.ApplyContentFilterRequest, v1.ApplyContentFilterResponse](
			httpClient,
			baseURL+ModerationServiceApplyContentFilterProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ApplyContentFilter")),
			connect.WithClientOptions(opts...),
		),
		createModerationLog: connect.NewClient[v1.CreateModerationLogRequest, v1.CreateModerationLogResponse](
			httpClient,
			baseURL+ModerationServiceCreateModerationLogProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("CreateModerationLog")),
			connect.WithClientOptions(opts...),
		),
		listModerationLogs: connect.NewClient[v1.ListModerationLogsRequest, v1.ListModerationLogsResponse](
			httpClient,
			baseURL+ModerationServiceListModerationLogsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListModerationLogs")),
			connect.WithClientOptions(opts...),
		),
		exportModerationLogs: connect.NewClient[v1.ExportModerationLogsRequest, v1.ExportModerationLogsResponse](
			httpClient,
			baseURL+ModerationServiceExportModerationLogsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ExportModerationLogs")),
			connect.WithClientOptions(opts...),
		),
		getModerationStats: connect.NewClient[v1.GetModerationStatsRequest, v1.GetModerationStatsResponse](
			httpClient,
			baseURL+ModerationServiceGetModerationStatsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetModerationStats")),
			connect.WithClientOptions(opts...),
		),
		getModeratorPerformance: connect.NewClient[v1.GetModeratorPerformanceRequest, v1.GetModeratorPerformanceResponse](
			httpClient,
			baseURL+ModerationServiceGetModeratorPerformanceProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("GetModeratorPerformance")),
			connect.WithClientOptions(opts...),
		),
		registerModerator: connect.NewClient[v1.RegisterModeratorRequest, v1.RegisterModeratorResponse](
			httpClient,
			baseURL+ModerationServiceRegisterModeratorProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("RegisterModerator")),
			connect.WithClientOptions(opts...),
		),
		updateModerator: connect.NewClient[v1.UpdateModeratorRequest, v1.UpdateModeratorResponse](
			httpClient,
			baseURL+ModerationServiceUpdateModeratorProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("UpdateModerator")),
			connect.WithClientOptions(opts...),
		),
		listModerators: connect.NewClient[v1.ListModeratorsRequest, v1.ListModeratorsResponse](
			httpClient,
			baseURL+ModerationServiceListModeratorsProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("ListModerators")),
			connect.WithClientOptions(opts...),
		),
		deactivateModerator: connect.NewClient[v1.DeactivateModeratorRequest, v1.DeactivateModeratorResponse](
			httpClient,
			baseURL+ModerationServiceDeactivateModeratorProcedure,
			connect.WithSchema(moderationServiceMethods.ByName("DeactivateModerator")),
			connect.WithClientOptions(opts...),
		),
	}
}

// moderationServiceClient implements ModerationServiceClient.
type moderationServiceClient struct {
	createUserReport           *connect.Client[v1.CreateUserReportRequest, v1.CreateUserReportResponse]
	getUserReport              *connect.Client[v1.GetUserReportRequest, v1.GetUserReportResponse]
	listUserReports            *connect.Client[v1.ListUserReportsRequest, v1.ListUserReportsResponse]
	updateUserReport           *connect.Client[v1.UpdateUserReportRequest, v1.UpdateUserReportResponse]
	processUserReport          *connect.Client[v1.ProcessUserReportRequest, v1.ProcessUserReportResponse]
	moderateContent            *connect.Client[v1.ModerateContentRequest, v1.ModerateContentResponse]
	batchModerateContent       *connect.Client[v1.BatchModerateContentRequest, v1.BatchModerateContentResponse]
	getContentModerationStatus *connect.Client[v1.GetContentModerationStatusRequest, v1.GetContentModerationStatusResponse]
	executeModerationAction    *connect.Client[v1.ExecuteModerationActionRequest, v1.ExecuteModerationActionResponse]
	getModerationAction        *connect.Client[v1.GetModerationActionRequest, v1.GetModerationActionResponse]
	listModerationActions      *connect.Client[v1.ListModerationActionsRequest, v1.ListModerationActionsResponse]
	revokeModerationAction     *connect.Client[v1.RevokeModerationActionRequest, v1.RevokeModerationActionResponse]
	createAppeal               *connect.Client[v1.CreateAppealRequest, v1.CreateAppealResponse]
	getAppeal                  *connect.Client[v1.GetAppealRequest, v1.GetAppealResponse]
	listAppeals                *connect.Client[v1.ListAppealsRequest, v1.ListAppealsResponse]
	reviewAppeal               *connect.Client[v1.ReviewAppealRequest, v1.ReviewAppealResponse]
	createFilterRule           *connect.Client[v1.CreateFilterRuleRequest, v1.CreateFilterRuleResponse]
	getFilterRule              *connect.Client[v1.GetFilterRuleRequest, v1.GetFilterRuleResponse]
	listFilterRules            *connect.Client[v1.ListFilterRulesRequest, v1.ListFilterRulesResponse]
	updateFilterRule           *connect.Client[v1.UpdateFilterRuleRequest, v1.UpdateFilterRuleResponse]
	deleteFilterRule           *connect.Client[v1.DeleteFilterRuleRequest, v1.DeleteFilterRuleResponse]
	applyContentFilter         *connect.Client[v1.ApplyContentFilterRequest, v1.ApplyContentFilterResponse]
	createModerationLog        *connect.Client[v1.CreateModerationLogRequest, v1.CreateModerationLogResponse]
	listModerationLogs         *connect.Client[v1.ListModerationLogsRequest, v1.ListModerationLogsResponse]
	exportModerationLogs       *connect.Client[v1.ExportModerationLogsRequest, v1.ExportModerationLogsResponse]
	getModerationStats         *connect.Client[v1.GetModerationStatsRequest, v1.GetModerationStatsResponse]
	getModeratorPerformance    *connect.Client[v1.GetModeratorPerformanceRequest, v1.GetModeratorPerformanceResponse]
	registerModerator          *connect.Client[v1.RegisterModeratorRequest, v1.RegisterModeratorResponse]
	updateModerator            *connect.Client[v1.UpdateModeratorRequest, v1.UpdateModeratorResponse]
	listModerators             *connect.Client[v1.ListModeratorsRequest, v1.ListModeratorsResponse]
	deactivateModerator        *connect.Client[v1.DeactivateModeratorRequest, v1.DeactivateModeratorResponse]
}

// CreateUserReport calls avion.moderation.v1.ModerationService.CreateUserReport.
func (c *moderationServiceClient) CreateUserReport(ctx context.Context, req *connect.Request[v1.CreateUserReportRequest]) (*connect.Response[v1.CreateUserReportResponse], error) {
	return c.createUserReport.CallUnary(ctx, req)
}

// GetUserReport calls avion.moderation.v1.ModerationService.GetUserReport.
func (c *moderationServiceClient) GetUserReport(ctx context.Context, req *connect.Request[v1.GetUserReportRequest]) (*connect.Response[v1.GetUserReportResponse], error) {
	return c.getUserReport.CallUnary(ctx, req)
}

// ListUserReports calls avion.moderation.v1.ModerationService.ListUserReports.
func (c *moderationServiceClient) ListUserReports(ctx context.Context, req *connect.Request[v1.ListUserReportsRequest]) (*connect.Response[v1.ListUserReportsResponse], error) {
	return c.listUserReports.CallUnary(ctx, req)
}

// UpdateUserReport calls avion.moderation.v1.ModerationService.UpdateUserReport.
func (c *moderationServiceClient) UpdateUserReport(ctx context.Context, req *connect.Request[v1.UpdateUserReportRequest]) (*connect.Response[v1.UpdateUserReportResponse], error) {
	return c.updateUserReport.CallUnary(ctx, req)
}

// ProcessUserReport calls avion.moderation.v1.ModerationService.ProcessUserReport.
func (c *moderationServiceClient) ProcessUserReport(ctx context.Context, req *connect.Request[v1.ProcessUserReportRequest]) (*connect.Response[v1.ProcessUserReportResponse], error) {
	return c.processUserReport.CallUnary(ctx, req)
}

// ModerateContent calls avion.moderation.v1.ModerationService.ModerateContent.
func (c *moderationServiceClient) ModerateContent(ctx context.Context, req *connect.Request[v1.ModerateContentRequest]) (*connect.Response[v1.ModerateContentResponse], error) {
	return c.moderateContent.CallUnary(ctx, req)
}

// BatchModerateContent calls avion.moderation.v1.ModerationService.BatchModerateContent.
func (c *moderationServiceClient) BatchModerateContent(ctx context.Context, req *connect.Request[v1.BatchModerateContentRequest]) (*connect.Response[v1.BatchModerateContentResponse], error) {
	return c.batchModerateContent.CallUnary(ctx, req)
}

// GetContentModerationStatus calls
// avion.moderation.v1.ModerationService.GetContentModerationStatus.
func (c *moderationServiceClient) GetContentModerationStatus(ctx context.Context, req *connect.Request[v1.GetContentModerationStatusRequest]) (*connect.Response[v1.GetContentModerationStatusResponse], error) {
	return c.getContentModerationStatus.CallUnary(ctx, req)
}

// ExecuteModerationAction calls avion.moderation.v1.ModerationService.ExecuteModerationAction.
func (c *moderationServiceClient) ExecuteModerationAction(ctx context.Context, req *connect.Request[v1.ExecuteModerationActionRequest]) (*connect.Response[v1.ExecuteModerationActionResponse], error) {
	return c.executeModerationAction.CallUnary(ctx, req)
}

// GetModerationAction calls avion.moderation.v1.ModerationService.GetModerationAction.
func (c *moderationServiceClient) GetModerationAction(ctx context.Context, req *connect.Request[v1.GetModerationActionRequest]) (*connect.Response[v1.GetModerationActionResponse], error) {
	return c.getModerationAction.CallUnary(ctx, req)
}

// ListModerationActions calls avion.moderation.v1.ModerationService.ListModerationActions.
func (c *moderationServiceClient) ListModerationActions(ctx context.Context, req *connect.Request[v1.ListModerationActionsRequest]) (*connect.Response[v1.ListModerationActionsResponse], error) {
	return c.listModerationActions.CallUnary(ctx, req)
}

// RevokeModerationAction calls avion.moderation.v1.ModerationService.RevokeModerationAction.
func (c *moderationServiceClient) RevokeModerationAction(ctx context.Context, req *connect.Request[v1.RevokeModerationActionRequest]) (*connect.Response[v1.RevokeModerationActionResponse], error) {
	return c.revokeModerationAction.CallUnary(ctx, req)
}

// CreateAppeal calls avion.moderation.v1.ModerationService.CreateAppeal.
func (c *moderationServiceClient) CreateAppeal(ctx context.Context, req *connect.Request[v1.CreateAppealRequest]) (*connect.Response[v1.CreateAppealResponse], error) {
	return c.createAppeal.CallUnary(ctx, req)
}

// GetAppeal calls avion.moderation.v1.ModerationService.GetAppeal.
func (c *moderationServiceClient) GetAppeal(ctx context.Context, req *connect.Request[v1.GetAppealRequest]) (*connect.Response[v1.GetAppealResponse], error) {
	return c.getAppeal.CallUnary(ctx, req)
}

// ListAppeals calls avion.moderation.v1.ModerationService.ListAppeals.
func (c *moderationServiceClient) ListAppeals(ctx context.Context, req *connect.Request[v1.ListAppealsRequest]) (*connect.Response[v1.ListAppealsResponse], error) {
	return c.listAppeals.CallUnary(ctx, req)
}

// ReviewAppeal calls avion.moderation.v1.ModerationService.ReviewAppeal.
func (c *moderationServiceClient) ReviewAppeal(ctx context.Context, req *connect.Request[v1.ReviewAppealRequest]) (*connect.Response[v1.ReviewAppealResponse], error) {
	return c.reviewAppeal.CallUnary(ctx, req)
}

// CreateFilterRule calls avion.moderation.v1.ModerationService.CreateFilterRule.
func (c *moderationServiceClient) CreateFilterRule(ctx context.Context, req *connect.Request[v1.CreateFilterRuleRequest]) (*connect.Response[v1.CreateFilterRuleResponse], error) {
	return c.createFilterRule.CallUnary(ctx, req)
}

// GetFilterRule calls avion.moderation.v1.ModerationService.GetFilterRule.
func (c *moderationServiceClient) GetFilterRule(ctx context.Context, req *connect.Request[v1.GetFilterRuleRequest]) (*connect.Response[v1.GetFilterRuleResponse], error) {
	return c.getFilterRule.CallUnary(ctx, req)
}

// ListFilterRules calls avion.moderation.v1.ModerationService.ListFilterRules.
func (c *moderationServiceClient) ListFilterRules(ctx context.Context, req *connect.Request[v1.ListFilterRulesRequest]) (*connect.Response[v1.ListFilterRulesResponse], error) {
	return c.listFilterRules.CallUnary(ctx, req)
}

// UpdateFilterRule calls avion.moderation.v1.ModerationService.UpdateFilterRule.
func (c *moderationServiceClient) UpdateFilterRule(ctx context.Context, req *connect.Request[v1.UpdateFilterRuleRequest]) (*connect.Response[v1.UpdateFilterRuleResponse], error) {
	return c.updateFilterRule.CallUnary(ctx, req)
}

// DeleteFilterRule calls avion.moderation.v1.ModerationService.DeleteFilterRule.
func (c *moderationServiceClient) DeleteFilterRule(ctx context.Context, req *connect.Request[v1.DeleteFilterRuleRequest]) (*connect.Response[v1.DeleteFilterRuleResponse], error) {
	return c.deleteFilterRule.CallUnary(ctx, req)
}

// ApplyContentFilter calls avion.moderation.v1.ModerationService.ApplyContentFilter.
func (c *moderationServiceClient) ApplyContentFilter(ctx context.Context, req *connect.Request[v1.ApplyContentFilterRequest]) (*connect.Response[v1.ApplyContentFilterResponse], error) {
	return c.applyContentFilter.CallUnary(ctx, req)
}

// CreateModerationLog calls avion.moderation.v1.ModerationService.CreateModerationLog.
func (c *moderationServiceClient) CreateModerationLog(ctx context.Context, req *connect.Request[v1.CreateModerationLogRequest]) (*connect.Response[v1.CreateModerationLogResponse], error) {
	return c.createModerationLog.CallUnary(ctx, req)
}

// ListModerationLogs calls avion.moderation.v1.ModerationService.ListModerationLogs.
func (c *moderationServiceClient) ListModerationLogs(ctx context.Context, req *connect.Request[v1.ListModerationLogsRequest]) (*connect.Response[v1.ListModerationLogsResponse], error) {
	return c.listModerationLogs.CallUnary(ctx, req)
}

// ExportModerationLogs calls avion.moderation.v1.ModerationService.ExportModerationLogs.
func (c *moderationServiceClient) ExportModerationLogs(ctx context.Context, req *connect.Request[v1.ExportModerationLogsRequest]) (*connect.Response[v1.ExportModerationLogsResponse], error) {
	return c.exportModerationLogs.CallUnary(ctx, req)
}

// GetModerationStats calls avion.moderation.v1.ModerationService.GetModerationStats.
func (c *moderationServiceClient) GetModerationStats(ctx context.Context, req *connect.Request[v1.GetModerationStatsRequest]) (*connect.Response[v1.GetModerationStatsResponse], error) {
	return c.getModerationStats.CallUnary(ctx, req)
}

// GetModeratorPerformance calls avion.moderation.v1.ModerationService.GetModeratorPerformance.
func (c *moderationServiceClient) GetModeratorPerformance(ctx context.Context, req *connect.Request[v1.GetModeratorPerformanceRequest]) (*connect.Response[v1.GetModeratorPerformanceResponse], error) {
	return c.getModeratorPerformance.CallUnary(ctx, req)
}

// RegisterModerator calls avion.moderation.v1.ModerationService.RegisterModerator.
func (c *moderationServiceClient) RegisterModerator(ctx context.Context, req *connect.Request[v1.RegisterModeratorRequest]) (*connect.Response[v1.RegisterModeratorResponse], error) {
	return c.registerModerator.CallUnary(ctx, req)
}

// UpdateModerator calls avion.moderation.v1.ModerationService.UpdateModerator.
func (c *moderationServiceClient) UpdateModerator(ctx context.Context, req *connect.Request[v1.UpdateModeratorRequest]) (*connect.Response[v1.UpdateModeratorResponse], error) {
	return c.updateModerator.CallUnary(ctx, req)
}

// ListModerators calls avion.moderation.v1.ModerationService.ListModerators.
func (c *moderationServiceClient) ListModerators(ctx context.Context, req *connect.Request[v1.ListModeratorsRequest]) (*connect.Response[v1.ListModeratorsResponse], error) {
	return c.listModerators.CallUnary(ctx, req)
}

// DeactivateModerator calls avion.moderation.v1.ModerationService.DeactivateModerator.
func (c *moderationServiceClient) DeactivateModerator(ctx context.Context, req *connect.Request[v1.DeactivateModeratorRequest]) (*connect.Response[v1.DeactivateModeratorResponse], error) {
	return c.deactivateModerator.CallUnary(ctx, req)
}

// ModerationServiceHandler is an implementation of the avion.moderation.v1.ModerationService
// service.
type ModerationServiceHandler interface {
	// ユーザー報告関連
	// ユーザー報告を作成
	CreateUserReport(context.Context, *connect.Request[v1.CreateUserReportRequest]) (*connect.Response[v1.CreateUserReportResponse], error)
	// ユーザー報告を取得
	GetUserReport(context.Context, *connect.Request[v1.GetUserReportRequest]) (*connect.Response[v1.GetUserReportResponse], error)
	// ユーザー報告を一覧取得
	ListUserReports(context.Context, *connect.Request[v1.ListUserReportsRequest]) (*connect.Response[v1.ListUserReportsResponse], error)
	// ユーザー報告を更新
	UpdateUserReport(context.Context, *connect.Request[v1.UpdateUserReportRequest]) (*connect.Response[v1.UpdateUserReportResponse], error)
	// ユーザー報告を処理
	ProcessUserReport(context.Context, *connect.Request[v1.ProcessUserReportRequest]) (*connect.Response[v1.ProcessUserReportResponse], error)
	// コンテンツモデレーション
	// コンテンツを審査
	ModerateContent(context.Context, *connect.Request[v1.ModerateContentRequest]) (*connect.Response[v1.ModerateContentResponse], error)
	// バッチでコンテンツを審査
	BatchModerateContent(context.Context, *connect.Request[v1.BatchModerateContentRequest]) (*connect.Response[v1.BatchModerateContentResponse], error)
	// コンテンツのモデレーション状態を取得
	GetContentModerationStatus(context.Context, *connect.Request[v1.GetContentModerationStatusRequest]) (*connect.Response[v1.GetContentModerationStatusResponse], error)
	// モデレーションアクション
	// モデレーションアクションを実行
	ExecuteModerationAction(context.Context, *connect.Request[v1.ExecuteModerationActionRequest]) (*connect.Response[v1.ExecuteModerationActionResponse], error)
	// モデレーションアクションを取得
	GetModerationAction(context.Context, *connect.Request[v1.GetModerationActionRequest]) (*connect.Response[v1.GetModerationActionResponse], error)
	// モデレーションアクションを一覧取得
	ListModerationActions(context.Context, *connect.Request[v1.ListModerationActionsRequest]) (*connect.Response[v1.ListModerationActionsResponse], error)
	// モデレーションアクションを取り消し
	RevokeModerationAction(context.Context, *connect.Request[v1.RevokeModerationActionRequest]) (*connect.Response[v1.RevokeModerationActionResponse], error)
	// アピール（異議申し立て）
	// アピールを作成
	CreateAppeal(context.Context, *connect.Request[v1.CreateAppealRequest]) (*connect.Response[v1.CreateAppealResponse], error)
	// アピールを取得
	GetAppeal(context.Context, *connect.Request[v1.GetAppealRequest]) (*connect.Response[v1.GetAppealResponse], error)
	// アピールを一覧取得
	ListAppeals(context.Context, *connect.Request[v1.ListAppealsRequest]) (*connect.Response[v1.ListAppealsResponse], error)
	// アピールを審査
	ReviewAppeal(context.Context, *connect.Request[v1.ReviewAppealRequest]) (*connect.Response[v1.ReviewAppealResponse], error)
	// フィルタ管理
	// フィルタールールを作成
	CreateFilterRule(context.Context, *connect.Request[v1.CreateFilterRuleRequest]) (*connect.Response[v1.CreateFilterRuleResponse], error)
	// フィルタールールを取得
	GetFilterRule(context.Context, *connect.Request[v1.GetFilterRuleRequest]) (*connect.Response[v1.GetFilterRuleResponse], error)
	// フィルタールールを一覧取得
	ListFilterRules(context.Context, *connect.Request[v1.ListFilterRulesRequest]) (*connect.Response[v1.ListFilterRulesResponse], error)
	// フィルタールールを更新
	UpdateFilterRule(context.Context, *connect.Request[v1.UpdateFilterRuleRequest]) (*connect.Response[v1.UpdateFilterRuleResponse], error)
	// フィルタールールを削除
	DeleteFilterRule(context.Context, *connect.Request[v1.DeleteFilterRuleRequest]) (*connect.Response[v1.DeleteFilterRuleResponse], error)
	// コンテンツをフィルタリング
	ApplyContentFilter(context.Context, *connect.Request[v1.ApplyContentFilterRequest]) (*connect.Response[v1.ApplyContentFilterResponse], error)
	// モデレーションログ
	// モデレーションログを作成
	CreateModerationLog(context.Context, *connect.Request[v1.CreateModerationLogRequest]) (*connect.Response[v1.CreateModerationLogResponse], error)
	// モデレーションログを一覧取得
	ListModerationLogs(context.Context, *connect.Request[v1.ListModerationLogsRequest]) (*connect.Response[v1.ListModerationLogsResponse], error)
	// モデレーションログをエクスポート
	ExportModerationLogs(context.Context, *connect.Request[v1.ExportModerationLogsRequest]) (*connect.Response[v1.ExportModerationLogsResponse], error)
	// 統計・レポート
	// モデレーション統計を取得
	GetModerationStats(context.Context, *connect.Request[v1.GetModerationStatsRequest]) (*connect.Response[v1.GetModerationStatsResponse], error)
	// モデレーターのパフォーマンスを取得
	GetModeratorPerformance(context.Context, *connect.Request[v1.GetModeratorPerformanceRequest]) (*connect.Response[v1.GetModeratorPerformanceResponse], error)
	// モデレーター管理
	// モデレーターを登録
	RegisterModerator(context.Context, *connect.Request[v1.RegisterModeratorRequest]) (*connect.Response[v1.RegisterModeratorResponse], error)
	// モデレーター情報を更新
	UpdateModerator(context.Context, *connect.Request[v1.UpdateModeratorRequest]) (*connect.Response[v1.UpdateModeratorResponse], error)
	// モデレーターを一覧取得
	ListModerators(context.Context, *connect.Request[v1.ListModeratorsRequest]) (*connect.Response[v1.ListModeratorsResponse], error)
	// モデレーターを無効化
	DeactivateModerator(context.Context, *connect.Request[v1.DeactivateModeratorRequest]) (*connect.Response[v1.DeactivateModeratorResponse], error)
}

// NewModerationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModerationServiceHandler(svc ModerationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moderationServiceMethods := v1.File_avion_moderation_v1_moderation_service_proto.Services().ByName("ModerationService").Methods()
	moderationServiceCreateUserReportHandler := connect.NewUnaryHandler(
		ModerationServiceCreateUserReportProcedure,
		svc.CreateUserReport,
		connect.WithSchema(moderationServiceMethods.ByName("CreateUserReport")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetUserReportHandler := connect.NewUnaryHandler(
		ModerationServiceGetUserReportProcedure,
		svc.GetUserReport,
		connect.WithSchema(moderationServiceMethods.ByName("GetUserReport")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListUserReportsHandler := connect.NewUnaryHandler(
		ModerationServiceListUserReportsProcedure,
		svc.ListUserReports,
		connect.WithSchema(moderationServiceMethods.ByName("ListUserReports")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceUpdateUserReportHandler := connect.NewUnaryHandler(
		ModerationServiceUpdateUserReportProcedure,
		svc.UpdateUserReport,
		connect.WithSchema(moderationServiceMethods.ByName("UpdateUserReport")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceProcessUserReportHandler := connect.NewUnaryHandler(
		ModerationServiceProcessUserReportProcedure,
		svc.ProcessUserReport,
		connect.WithSchema(moderationServiceMethods.ByName("ProcessUserReport")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceModerateContentHandler := connect.NewUnaryHandler(
		ModerationServiceModerateContentProcedure,
		svc.ModerateContent,
		connect.WithSchema(moderationServiceMethods.ByName("ModerateContent")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceBatchModerateContentHandler := connect.NewUnaryHandler(
		ModerationServiceBatchModerateContentProcedure,
		svc.BatchModerateContent,
		connect.WithSchema(moderationServiceMethods.ByName("BatchModerateContent")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetContentModerationStatusHandler := connect.NewUnaryHandler(
		ModerationServiceGetContentModerationStatusProcedure,
		svc.GetContentModerationStatus,
		connect.WithSchema(moderationServiceMethods.ByName("GetContentModerationStatus")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceExecuteModerationActionHandler := connect.NewUnaryHandler(
		ModerationServiceExecuteModerationActionProcedure,
		svc.ExecuteModerationAction,
		connect.WithSchema(moderationServiceMethods.ByName("ExecuteModerationAction")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetModerationActionHandler := connect.NewUnaryHandler(
		ModerationServiceGetModerationActionProcedure,
		svc.GetModerationAction,
		connect.WithSchema(moderationServiceMethods.ByName("GetModerationAction")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListModerationActionsHandler := connect.NewUnaryHandler(
		ModerationServiceListModerationActionsProcedure,
		svc.ListModerationActions,
		connect.WithSchema(moderationServiceMethods.ByName("ListModerationActions")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceRevokeModerationActionHandler := connect.NewUnaryHandler(
		ModerationServiceRevokeModerationActionProcedure,
		svc.RevokeModerationAction,
		connect.WithSchema(moderationServiceMethods.ByName("RevokeModerationAction")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceCreateAppealHandler := connect.NewUnaryHandler(
		ModerationServiceCreateAppealProcedure,
		svc.CreateAppeal,
		connect.WithSchema(moderationServiceMethods.ByName("CreateAppeal")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetAppealHandler := connect.NewUnaryHandler(
		ModerationServiceGetAppealProcedure,
		svc.GetAppeal,
		connect.WithSchema(moderationServiceMethods.ByName("GetAppeal")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListAppealsHandler := connect.NewUnaryHandler(
		ModerationServiceListAppealsProcedure,
		svc.ListAppeals,
		connect.WithSchema(moderationServiceMethods.ByName("ListAppeals")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceReviewAppealHandler := connect.NewUnaryHandler(
		ModerationServiceReviewAppealProcedure,
		svc.ReviewAppeal,
		connect.WithSchema(moderationServiceMethods.ByName("ReviewAppeal")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceCreateFilterRuleHandler := connect.NewUnaryHandler(
		ModerationServiceCreateFilterRuleProcedure,
		svc.CreateFilterRule,
		connect.WithSchema(moderationServiceMethods.ByName("CreateFilterRule")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetFilterRuleHandler := connect.NewUnaryHandler(
		ModerationServiceGetFilterRuleProcedure,
		svc.GetFilterRule,
		connect.WithSchema(moderationServiceMethods.ByName("GetFilterRule")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListFilterRulesHandler := connect.NewUnaryHandler(
		ModerationServiceListFilterRulesProcedure,
		svc.ListFilterRules,
		connect.WithSchema(moderationServiceMethods.ByName("ListFilterRules")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceUpdateFilterRuleHandler := connect.NewUnaryHandler(
		ModerationServiceUpdateFilterRuleProcedure,
		svc.UpdateFilterRule,
		connect.WithSchema(moderationServiceMethods.ByName("UpdateFilterRule")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceDeleteFilterRuleHandler := connect.NewUnaryHandler(
		ModerationServiceDeleteFilterRuleProcedure,
		svc.DeleteFilterRule,
		connect.WithSchema(moderationServiceMethods.ByName("DeleteFilterRule")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceApplyContentFilterHandler := connect.NewUnaryHandler(
		ModerationServiceApplyContentFilterProcedure,
		svc.ApplyContentFilter,
		connect.WithSchema(moderationServiceMethods.ByName("ApplyContentFilter")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceCreateModerationLogHandler := connect.NewUnaryHandler(
		ModerationServiceCreateModerationLogProcedure,
		svc.CreateModerationLog,
		connect.WithSchema(moderationServiceMethods.ByName("CreateModerationLog")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListModerationLogsHandler := connect.NewUnaryHandler(
		ModerationServiceListModerationLogsProcedure,
		svc.ListModerationLogs,
		connect.WithSchema(moderationServiceMethods.ByName("ListModerationLogs")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceExportModerationLogsHandler := connect.NewUnaryHandler(
		ModerationServiceExportModerationLogsProcedure,
		svc.ExportModerationLogs,
		connect.WithSchema(moderationServiceMethods.ByName("ExportModerationLogs")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetModerationStatsHandler := connect.NewUnaryHandler(
		ModerationServiceGetModerationStatsProcedure,
		svc.GetModerationStats,
		connect.WithSchema(moderationServiceMethods.ByName("GetModerationStats")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceGetModeratorPerformanceHandler := connect.NewUnaryHandler(
		ModerationServiceGetModeratorPerformanceProcedure,
		svc.GetModeratorPerformance,
		connect.WithSchema(moderationServiceMethods.ByName("GetModeratorPerformance")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceRegisterModeratorHandler := connect.NewUnaryHandler(
		ModerationServiceRegisterModeratorProcedure,
		svc.RegisterModerator,
		connect.WithSchema(moderationServiceMethods.ByName("RegisterModerator")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceUpdateModeratorHandler := connect.NewUnaryHandler(
		ModerationServiceUpdateModeratorProcedure,
		svc.UpdateModerator,
		connect.WithSchema(moderationServiceMethods.ByName("UpdateModerator")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceListModeratorsHandler := connect.NewUnaryHandler(
		ModerationServiceListModeratorsProcedure,
		svc.ListModerators,
		connect.WithSchema(moderationServiceMethods.ByName("ListModerators")),
		connect.WithHandlerOptions(opts...),
	)
	moderationServiceDeactivateModeratorHandler := connect.NewUnaryHandler(
		ModerationServiceDeactivateModeratorProcedure,
		svc.DeactivateModerator,
		connect.WithSchema(moderationServiceMethods.ByName("DeactivateModerator")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.moderation.v1.ModerationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModerationServiceCreateUserReportProcedure:
			moderationServiceCreateUserReportHandler.ServeHTTP(w, r)
		case ModerationServiceGetUserReportProcedure:
			moderationServiceGetUserReportHandler.ServeHTTP(w, r)
		case ModerationServiceListUserReportsProcedure:
			moderationServiceListUserReportsHandler.ServeHTTP(w, r)
		case ModerationServiceUpdateUserReportProcedure:
			moderationServiceUpdateUserReportHandler.ServeHTTP(w, r)
		case ModerationServiceProcessUserReportProcedure:
			moderationServiceProcessUserReportHandler.ServeHTTP(w, r)
		case ModerationServiceModerateContentProcedure:
			moderationServiceModerateContentHandler.ServeHTTP(w, r)
		case ModerationServiceBatchModerateContentProcedure:
			moderationServiceBatchModerateContentHandler.ServeHTTP(w, r)
		case ModerationServiceGetContentModerationStatusProcedure:
			moderationServiceGetContentModerationStatusHandler.ServeHTTP(w, r)
		case ModerationServiceExecuteModerationActionProcedure:
			moderationServiceExecuteModerationActionHandler.ServeHTTP(w, r)
		case ModerationServiceGetModerationActionProcedure:
			moderationServiceGetModerationActionHandler.ServeHTTP(w, r)
		case ModerationServiceListModerationActionsProcedure:
			moderationServiceListModerationActionsHandler.ServeHTTP(w, r)
		case ModerationServiceRevokeModerationActionProcedure:
			moderationServiceRevokeModerationActionHandler.ServeHTTP(w, r)
		case ModerationServiceCreateAppealProcedure:
			moderationServiceCreateAppealHandler.ServeHTTP(w, r)
		case ModerationServiceGetAppealProcedure:
			moderationServiceGetAppealHandler.ServeHTTP(w, r)
		case ModerationServiceListAppealsProcedure:
			moderationServiceListAppealsHandler.ServeHTTP(w, r)
		case ModerationServiceReviewAppealProcedure:
			moderationServiceReviewAppealHandler.ServeHTTP(w, r)
		case ModerationServiceCreateFilterRuleProcedure:
			moderationServiceCreateFilterRuleHandler.ServeHTTP(w, r)
		case ModerationServiceGetFilterRuleProcedure:
			moderationServiceGetFilterRuleHandler.ServeHTTP(w, r)
		case ModerationServiceListFilterRulesProcedure:
			moderationServiceListFilterRulesHandler.ServeHTTP(w, r)
		case ModerationServiceUpdateFilterRuleProcedure:
			moderationServiceUpdateFilterRuleHandler.ServeHTTP(w, r)
		case ModerationServiceDeleteFilterRuleProcedure:
			moderationServiceDeleteFilterRuleHandler.ServeHTTP(w, r)
		case ModerationServiceApplyContentFilterProcedure:
			moderationServiceApplyContentFilterHandler.ServeHTTP(w, r)
		case ModerationServiceCreateModerationLogProcedure:
			moderationServiceCreateModerationLogHandler.ServeHTTP(w, r)
		case ModerationServiceListModerationLogsProcedure:
			moderationServiceListModerationLogsHandler.ServeHTTP(w, r)
		case ModerationServiceExportModerationLogsProcedure:
			moderationServiceExportModerationLogsHandler.ServeHTTP(w, r)
		case ModerationServiceGetModerationStatsProcedure:
			moderationServiceGetModerationStatsHandler.ServeHTTP(w, r)
		case ModerationServiceGetModeratorPerformanceProcedure:
			moderationServiceGetModeratorPerformanceHandler.ServeHTTP(w, r)
		case ModerationServiceRegisterModeratorProcedure:
			moderationServiceRegisterModeratorHandler.ServeHTTP(w, r)
		case ModerationServiceUpdateModeratorProcedure:
			moderationServiceUpdateModeratorHandler.ServeHTTP(w, r)
		case ModerationServiceListModeratorsProcedure:
			moderationServiceListModeratorsHandler.ServeHTTP(w, r)
		case ModerationServiceDeactivateModeratorProcedure:
			moderationServiceDeactivateModeratorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModerationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModerationServiceHandler struct{}

func (UnimplementedModerationServiceHandler) CreateUserReport(context.Context, *connect.Request[v1.CreateUserReportRequest]) (*connect.Response[v1.CreateUserReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.CreateUserReport is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetUserReport(context.Context, *connect.Request[v1.GetUserReportRequest]) (*connect.Response[v1.GetUserReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetUserReport is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListUserReports(context.Context, *connect.Request[v1.ListUserReportsRequest]) (*connect.Response[v1.ListUserReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListUserReports is not implemented"))
}

func (UnimplementedModerationServiceHandler) UpdateUserReport(context.Context, *connect.Request[v1.UpdateUserReportRequest]) (*connect.Response[v1.UpdateUserReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.UpdateUserReport is not implemented"))
}

func (UnimplementedModerationServiceHandler) ProcessUserReport(context.Context, *connect.Request[v1.ProcessUserReportRequest]) (*connect.Response[v1.ProcessUserReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ProcessUserReport is not implemented"))
}

func (UnimplementedModerationServiceHandler) ModerateContent(context.Context, *connect.Request[v1.ModerateContentRequest]) (*connect.Response[v1.ModerateContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ModerateContent is not implemented"))
}

func (UnimplementedModerationServiceHandler) BatchModerateContent(context.Context, *connect.Request[v1.BatchModerateContentRequest]) (*connect.Response[v1.BatchModerateContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.BatchModerateContent is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetContentModerationStatus(context.Context, *connect.Request[v1.GetContentModerationStatusRequest]) (*connect.Response[v1.GetContentModerationStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetContentModerationStatus is not implemented"))
}

func (UnimplementedModerationServiceHandler) ExecuteModerationAction(context.Context, *connect.Request[v1.ExecuteModerationActionRequest]) (*connect.Response[v1.ExecuteModerationActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ExecuteModerationAction is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetModerationAction(context.Context, *connect.Request[v1.GetModerationActionRequest]) (*connect.Response[v1.GetModerationActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetModerationAction is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListModerationActions(context.Context, *connect.Request[v1.ListModerationActionsRequest]) (*connect.Response[v1.ListModerationActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListModerationActions is not implemented"))
}

func (UnimplementedModerationServiceHandler) RevokeModerationAction(context.Context, *connect.Request[v1.RevokeModerationActionRequest]) (*connect.Response[v1.RevokeModerationActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.RevokeModerationAction is not implemented"))
}

func (UnimplementedModerationServiceHandler) CreateAppeal(context.Context, *connect.Request[v1.CreateAppealRequest]) (*connect.Response[v1.CreateAppealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.CreateAppeal is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetAppeal(context.Context, *connect.Request[v1.GetAppealRequest]) (*connect.Response[v1.GetAppealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetAppeal is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListAppeals(context.Context, *connect.Request[v1.ListAppealsRequest]) (*connect.Response[v1.ListAppealsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListAppeals is not implemented"))
}

func (UnimplementedModerationServiceHandler) ReviewAppeal(context.Context, *connect.Request[v1.ReviewAppealRequest]) (*connect.Response[v1.ReviewAppealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ReviewAppeal is not implemented"))
}

func (UnimplementedModerationServiceHandler) CreateFilterRule(context.Context, *connect.Request[v1.CreateFilterRuleRequest]) (*connect.Response[v1.CreateFilterRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.CreateFilterRule is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetFilterRule(context.Context, *connect.Request[v1.GetFilterRuleRequest]) (*connect.Response[v1.GetFilterRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetFilterRule is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListFilterRules(context.Context, *connect.Request[v1.ListFilterRulesRequest]) (*connect.Response[v1.ListFilterRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListFilterRules is not implemented"))
}

func (UnimplementedModerationServiceHandler) UpdateFilterRule(context.Context, *connect.Request[v1.UpdateFilterRuleRequest]) (*connect.Response[v1.UpdateFilterRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.UpdateFilterRule is not implemented"))
}

func (UnimplementedModerationServiceHandler) DeleteFilterRule(context.Context, *connect.Request[v1.DeleteFilterRuleRequest]) (*connect.Response[v1.DeleteFilterRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.DeleteFilterRule is not implemented"))
}

func (UnimplementedModerationServiceHandler) ApplyContentFilter(context.Context, *connect.Request[v1.ApplyContentFilterRequest]) (*connect.Response[v1.ApplyContentFilterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ApplyContentFilter is not implemented"))
}

func (UnimplementedModerationServiceHandler) CreateModerationLog(context.Context, *connect.Request[v1.CreateModerationLogRequest]) (*connect.Response[v1.CreateModerationLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.CreateModerationLog is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListModerationLogs(context.Context, *connect.Request[v1.ListModerationLogsRequest]) (*connect.Response[v1.ListModerationLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListModerationLogs is not implemented"))
}

func (UnimplementedModerationServiceHandler) ExportModerationLogs(context.Context, *connect.Request[v1.ExportModerationLogsRequest]) (*connect.Response[v1.ExportModerationLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ExportModerationLogs is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetModerationStats(context.Context, *connect.Request[v1.GetModerationStatsRequest]) (*connect.Response[v1.GetModerationStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetModerationStats is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetModeratorPerformance(context.Context, *connect.Request[v1.GetModeratorPerformanceRequest]) (*connect.Response[v1.GetModeratorPerformanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.GetModeratorPerformance is not implemented"))
}

func (UnimplementedModerationServiceHandler) RegisterModerator(context.Context, *connect.Request[v1.RegisterModeratorRequest]) (*connect.Response[v1.RegisterModeratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.RegisterModerator is not implemented"))
}

func (UnimplementedModerationServiceHandler) UpdateModerator(context.Context, *connect.Request[v1.UpdateModeratorRequest]) (*connect.Response[v1.UpdateModeratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.UpdateModerator is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListModerators(context.Context, *connect.Request[v1.ListModeratorsRequest]) (*connect.Response[v1.ListModeratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.ListModerators is not implemented"))
}

func (UnimplementedModerationServiceHandler) DeactivateModerator(context.Context, *connect.Request[v1.DeactivateModeratorRequest]) (*connect.Response[v1.DeactivateModeratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.moderation.v1.ModerationService.DeactivateModerator is not implemented"))
}
