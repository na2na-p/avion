// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/message/v1/message_service.proto

package messagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageService_SendMessage_FullMethodName                = "/avion.message.v1.MessageService/SendMessage"
	MessageService_GetMessage_FullMethodName                 = "/avion.message.v1.MessageService/GetMessage"
	MessageService_UpdateMessage_FullMethodName              = "/avion.message.v1.MessageService/UpdateMessage"
	MessageService_DeleteMessage_FullMethodName              = "/avion.message.v1.MessageService/DeleteMessage"
	MessageService_ListMessages_FullMethodName               = "/avion.message.v1.MessageService/ListMessages"
	MessageService_SearchMessages_FullMethodName             = "/avion.message.v1.MessageService/SearchMessages"
	MessageService_CreateConversation_FullMethodName         = "/avion.message.v1.MessageService/CreateConversation"
	MessageService_GetConversation_FullMethodName            = "/avion.message.v1.MessageService/GetConversation"
	MessageService_UpdateConversation_FullMethodName         = "/avion.message.v1.MessageService/UpdateConversation"
	MessageService_DeleteConversation_FullMethodName         = "/avion.message.v1.MessageService/DeleteConversation"
	MessageService_ListConversations_FullMethodName          = "/avion.message.v1.MessageService/ListConversations"
	MessageService_AddParticipants_FullMethodName            = "/avion.message.v1.MessageService/AddParticipants"
	MessageService_RemoveParticipants_FullMethodName         = "/avion.message.v1.MessageService/RemoveParticipants"
	MessageService_LeaveConversation_FullMethodName          = "/avion.message.v1.MessageService/LeaveConversation"
	MessageService_MarkAsRead_FullMethodName                 = "/avion.message.v1.MessageService/MarkAsRead"
	MessageService_GetReadReceipts_FullMethodName            = "/avion.message.v1.MessageService/GetReadReceipts"
	MessageService_SendTypingIndicator_FullMethodName        = "/avion.message.v1.MessageService/SendTypingIndicator"
	MessageService_StreamTypingIndicators_FullMethodName     = "/avion.message.v1.MessageService/StreamTypingIndicators"
	MessageService_AddReaction_FullMethodName                = "/avion.message.v1.MessageService/AddReaction"
	MessageService_RemoveReaction_FullMethodName             = "/avion.message.v1.MessageService/RemoveReaction"
	MessageService_ListReactions_FullMethodName              = "/avion.message.v1.MessageService/ListReactions"
	MessageService_UploadAttachment_FullMethodName           = "/avion.message.v1.MessageService/UploadAttachment"
	MessageService_DownloadAttachment_FullMethodName         = "/avion.message.v1.MessageService/DownloadAttachment"
	MessageService_GetMessageStatistics_FullMethodName       = "/avion.message.v1.MessageService/GetMessageStatistics"
	MessageService_GetNotificationSettings_FullMethodName    = "/avion.message.v1.MessageService/GetNotificationSettings"
	MessageService_UpdateNotificationSettings_FullMethodName = "/avion.message.v1.MessageService/UpdateNotificationSettings"
	MessageService_StreamMessages_FullMethodName             = "/avion.message.v1.MessageService/StreamMessages"
	MessageService_ArchiveConversation_FullMethodName        = "/avion.message.v1.MessageService/ArchiveConversation"
	MessageService_UnarchiveConversation_FullMethodName      = "/avion.message.v1.MessageService/UnarchiveConversation"
	MessageService_MuteConversation_FullMethodName           = "/avion.message.v1.MessageService/MuteConversation"
	MessageService_UnmuteConversation_FullMethodName         = "/avion.message.v1.MessageService/UnmuteConversation"
	MessageService_PinConversation_FullMethodName            = "/avion.message.v1.MessageService/PinConversation"
	MessageService_UnpinConversation_FullMethodName          = "/avion.message.v1.MessageService/UnpinConversation"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// メッセージサービス
type MessageServiceClient interface {
	// メッセージ送信
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// メッセージ取得
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	// メッセージ更新（編集）
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	// メッセージ削除
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// メッセージ一覧取得
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// メッセージ検索
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error)
	// 会話作成
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// 会話取得
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	// 会話更新
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error)
	// 会話削除
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
	// 会話一覧取得
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// 会話参加者追加
	AddParticipants(ctx context.Context, in *AddParticipantsRequest, opts ...grpc.CallOption) (*AddParticipantsResponse, error)
	// 会話参加者削除
	RemoveParticipants(ctx context.Context, in *RemoveParticipantsRequest, opts ...grpc.CallOption) (*RemoveParticipantsResponse, error)
	// 会話から退出
	LeaveConversation(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*LeaveConversationResponse, error)
	// 既読状態更新
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	// 既読レシート取得
	GetReadReceipts(ctx context.Context, in *GetReadReceiptsRequest, opts ...grpc.CallOption) (*GetReadReceiptsResponse, error)
	// タイピング状態送信
	SendTypingIndicator(ctx context.Context, in *SendTypingIndicatorRequest, opts ...grpc.CallOption) (*SendTypingIndicatorResponse, error)
	// タイピング状態受信（ストリーミング）
	StreamTypingIndicators(ctx context.Context, in *StreamTypingIndicatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTypingIndicatorsResponse], error)
	// リアクション追加
	AddReaction(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*AddReactionResponse, error)
	// リアクション削除
	RemoveReaction(ctx context.Context, in *RemoveReactionRequest, opts ...grpc.CallOption) (*RemoveReactionResponse, error)
	// リアクション一覧取得
	ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error)
	// 添付ファイルアップロード
	UploadAttachment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadAttachmentRequest, UploadAttachmentResponse], error)
	// 添付ファイルダウンロード
	DownloadAttachment(ctx context.Context, in *DownloadAttachmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadAttachmentResponse], error)
	// メッセージ統計取得
	GetMessageStatistics(ctx context.Context, in *GetMessageStatisticsRequest, opts ...grpc.CallOption) (*GetMessageStatisticsResponse, error)
	// 通知設定取得
	GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error)
	// 通知設定更新
	UpdateNotificationSettings(ctx context.Context, in *UpdateNotificationSettingsRequest, opts ...grpc.CallOption) (*UpdateNotificationSettingsResponse, error)
	// リアルタイムメッセージストリーム
	StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMessagesResponse], error)
	// 会話のアーカイブ
	ArchiveConversation(ctx context.Context, in *ArchiveConversationRequest, opts ...grpc.CallOption) (*ArchiveConversationResponse, error)
	// 会話のアーカイブ解除
	UnarchiveConversation(ctx context.Context, in *UnarchiveConversationRequest, opts ...grpc.CallOption) (*UnarchiveConversationResponse, error)
	// 会話のミュート
	MuteConversation(ctx context.Context, in *MuteConversationRequest, opts ...grpc.CallOption) (*MuteConversationResponse, error)
	// 会話のミュート解除
	UnmuteConversation(ctx context.Context, in *UnmuteConversationRequest, opts ...grpc.CallOption) (*UnmuteConversationResponse, error)
	// 会話のピン留め
	PinConversation(ctx context.Context, in *PinConversationRequest, opts ...grpc.CallOption) (*PinConversationResponse, error)
	// 会話のピン留め解除
	UnpinConversation(ctx context.Context, in *UnpinConversationRequest, opts ...grpc.CallOption) (*UnpinConversationResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_SearchMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_CreateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_GetConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_DeleteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, MessageService_ListConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AddParticipants(ctx context.Context, in *AddParticipantsRequest, opts ...grpc.CallOption) (*AddParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddParticipantsResponse)
	err := c.cc.Invoke(ctx, MessageService_AddParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RemoveParticipants(ctx context.Context, in *RemoveParticipantsRequest, opts ...grpc.CallOption) (*RemoveParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveParticipantsResponse)
	err := c.cc.Invoke(ctx, MessageService_RemoveParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) LeaveConversation(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*LeaveConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_LeaveConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, MessageService_MarkAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetReadReceipts(ctx context.Context, in *GetReadReceiptsRequest, opts ...grpc.CallOption) (*GetReadReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadReceiptsResponse)
	err := c.cc.Invoke(ctx, MessageService_GetReadReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendTypingIndicator(ctx context.Context, in *SendTypingIndicatorRequest, opts ...grpc.CallOption) (*SendTypingIndicatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTypingIndicatorResponse)
	err := c.cc.Invoke(ctx, MessageService_SendTypingIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) StreamTypingIndicators(ctx context.Context, in *StreamTypingIndicatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTypingIndicatorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_StreamTypingIndicators_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTypingIndicatorsRequest, StreamTypingIndicatorsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_StreamTypingIndicatorsClient = grpc.ServerStreamingClient[StreamTypingIndicatorsResponse]

func (c *messageServiceClient) AddReaction(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*AddReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReactionResponse)
	err := c.cc.Invoke(ctx, MessageService_AddReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RemoveReaction(ctx context.Context, in *RemoveReactionRequest, opts ...grpc.CallOption) (*RemoveReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveReactionResponse)
	err := c.cc.Invoke(ctx, MessageService_RemoveReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReactionsResponse)
	err := c.cc.Invoke(ctx, MessageService_ListReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UploadAttachment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadAttachmentRequest, UploadAttachmentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], MessageService_UploadAttachment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadAttachmentRequest, UploadAttachmentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_UploadAttachmentClient = grpc.ClientStreamingClient[UploadAttachmentRequest, UploadAttachmentResponse]

func (c *messageServiceClient) DownloadAttachment(ctx context.Context, in *DownloadAttachmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadAttachmentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[2], MessageService_DownloadAttachment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadAttachmentRequest, DownloadAttachmentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_DownloadAttachmentClient = grpc.ServerStreamingClient[DownloadAttachmentResponse]

func (c *messageServiceClient) GetMessageStatistics(ctx context.Context, in *GetMessageStatisticsRequest, opts ...grpc.CallOption) (*GetMessageStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageStatisticsResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessageStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, MessageService_GetNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateNotificationSettings(ctx context.Context, in *UpdateNotificationSettingsRequest, opts ...grpc.CallOption) (*UpdateNotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[3], MessageService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessagesRequest, StreamMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_StreamMessagesClient = grpc.ServerStreamingClient[StreamMessagesResponse]

func (c *messageServiceClient) ArchiveConversation(ctx context.Context, in *ArchiveConversationRequest, opts ...grpc.CallOption) (*ArchiveConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_ArchiveConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UnarchiveConversation(ctx context.Context, in *UnarchiveConversationRequest, opts ...grpc.CallOption) (*UnarchiveConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnarchiveConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_UnarchiveConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MuteConversation(ctx context.Context, in *MuteConversationRequest, opts ...grpc.CallOption) (*MuteConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_MuteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UnmuteConversation(ctx context.Context, in *UnmuteConversationRequest, opts ...grpc.CallOption) (*UnmuteConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmuteConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_UnmuteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) PinConversation(ctx context.Context, in *PinConversationRequest, opts ...grpc.CallOption) (*PinConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_PinConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UnpinConversation(ctx context.Context, in *UnpinConversationRequest, opts ...grpc.CallOption) (*UnpinConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinConversationResponse)
	err := c.cc.Invoke(ctx, MessageService_UnpinConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility.
//
// メッセージサービス
type MessageServiceServer interface {
	// メッセージ送信
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// メッセージ取得
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	// メッセージ更新（編集）
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	// メッセージ削除
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// メッセージ一覧取得
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// メッセージ検索
	SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error)
	// 会話作成
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// 会話取得
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// 会話更新
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error)
	// 会話削除
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error)
	// 会話一覧取得
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// 会話参加者追加
	AddParticipants(context.Context, *AddParticipantsRequest) (*AddParticipantsResponse, error)
	// 会話参加者削除
	RemoveParticipants(context.Context, *RemoveParticipantsRequest) (*RemoveParticipantsResponse, error)
	// 会話から退出
	LeaveConversation(context.Context, *LeaveConversationRequest) (*LeaveConversationResponse, error)
	// 既読状態更新
	MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error)
	// 既読レシート取得
	GetReadReceipts(context.Context, *GetReadReceiptsRequest) (*GetReadReceiptsResponse, error)
	// タイピング状態送信
	SendTypingIndicator(context.Context, *SendTypingIndicatorRequest) (*SendTypingIndicatorResponse, error)
	// タイピング状態受信（ストリーミング）
	StreamTypingIndicators(*StreamTypingIndicatorsRequest, grpc.ServerStreamingServer[StreamTypingIndicatorsResponse]) error
	// リアクション追加
	AddReaction(context.Context, *AddReactionRequest) (*AddReactionResponse, error)
	// リアクション削除
	RemoveReaction(context.Context, *RemoveReactionRequest) (*RemoveReactionResponse, error)
	// リアクション一覧取得
	ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error)
	// 添付ファイルアップロード
	UploadAttachment(grpc.ClientStreamingServer[UploadAttachmentRequest, UploadAttachmentResponse]) error
	// 添付ファイルダウンロード
	DownloadAttachment(*DownloadAttachmentRequest, grpc.ServerStreamingServer[DownloadAttachmentResponse]) error
	// メッセージ統計取得
	GetMessageStatistics(context.Context, *GetMessageStatisticsRequest) (*GetMessageStatisticsResponse, error)
	// 通知設定取得
	GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*GetNotificationSettingsResponse, error)
	// 通知設定更新
	UpdateNotificationSettings(context.Context, *UpdateNotificationSettingsRequest) (*UpdateNotificationSettingsResponse, error)
	// リアルタイムメッセージストリーム
	StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[StreamMessagesResponse]) error
	// 会話のアーカイブ
	ArchiveConversation(context.Context, *ArchiveConversationRequest) (*ArchiveConversationResponse, error)
	// 会話のアーカイブ解除
	UnarchiveConversation(context.Context, *UnarchiveConversationRequest) (*UnarchiveConversationResponse, error)
	// 会話のミュート
	MuteConversation(context.Context, *MuteConversationRequest) (*MuteConversationResponse, error)
	// 会話のミュート解除
	UnmuteConversation(context.Context, *UnmuteConversationRequest) (*UnmuteConversationResponse, error)
	// 会話のピン留め
	PinConversation(context.Context, *PinConversationRequest) (*PinConversationResponse, error)
	// 会話のピン留め解除
	UnpinConversation(context.Context, *UnpinConversationRequest) (*UnpinConversationResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageServiceServer struct{}

func (UnimplementedMessageServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessageServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedMessageServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessageServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMessageServiceServer) SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedMessageServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedMessageServiceServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedMessageServiceServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedMessageServiceServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedMessageServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedMessageServiceServer) AddParticipants(context.Context, *AddParticipantsRequest) (*AddParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParticipants not implemented")
}
func (UnimplementedMessageServiceServer) RemoveParticipants(context.Context, *RemoveParticipantsRequest) (*RemoveParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveParticipants not implemented")
}
func (UnimplementedMessageServiceServer) LeaveConversation(context.Context, *LeaveConversationRequest) (*LeaveConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveConversation not implemented")
}
func (UnimplementedMessageServiceServer) MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedMessageServiceServer) GetReadReceipts(context.Context, *GetReadReceiptsRequest) (*GetReadReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadReceipts not implemented")
}
func (UnimplementedMessageServiceServer) SendTypingIndicator(context.Context, *SendTypingIndicatorRequest) (*SendTypingIndicatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTypingIndicator not implemented")
}
func (UnimplementedMessageServiceServer) StreamTypingIndicators(*StreamTypingIndicatorsRequest, grpc.ServerStreamingServer[StreamTypingIndicatorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTypingIndicators not implemented")
}
func (UnimplementedMessageServiceServer) AddReaction(context.Context, *AddReactionRequest) (*AddReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReaction not implemented")
}
func (UnimplementedMessageServiceServer) RemoveReaction(context.Context, *RemoveReactionRequest) (*RemoveReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReaction not implemented")
}
func (UnimplementedMessageServiceServer) ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReactions not implemented")
}
func (UnimplementedMessageServiceServer) UploadAttachment(grpc.ClientStreamingServer[UploadAttachmentRequest, UploadAttachmentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}
func (UnimplementedMessageServiceServer) DownloadAttachment(*DownloadAttachmentRequest, grpc.ServerStreamingServer[DownloadAttachmentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadAttachment not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageStatistics(context.Context, *GetMessageStatisticsRequest) (*GetMessageStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageStatistics not implemented")
}
func (UnimplementedMessageServiceServer) GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*GetNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationSettings not implemented")
}
func (UnimplementedMessageServiceServer) UpdateNotificationSettings(context.Context, *UpdateNotificationSettingsRequest) (*UpdateNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSettings not implemented")
}
func (UnimplementedMessageServiceServer) StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[StreamMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessageServiceServer) ArchiveConversation(context.Context, *ArchiveConversationRequest) (*ArchiveConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveConversation not implemented")
}
func (UnimplementedMessageServiceServer) UnarchiveConversation(context.Context, *UnarchiveConversationRequest) (*UnarchiveConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveConversation not implemented")
}
func (UnimplementedMessageServiceServer) MuteConversation(context.Context, *MuteConversationRequest) (*MuteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteConversation not implemented")
}
func (UnimplementedMessageServiceServer) UnmuteConversation(context.Context, *UnmuteConversationRequest) (*UnmuteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteConversation not implemented")
}
func (UnimplementedMessageServiceServer) PinConversation(context.Context, *PinConversationRequest) (*PinConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinConversation not implemented")
}
func (UnimplementedMessageServiceServer) UnpinConversation(context.Context, *UnpinConversationRequest) (*UnpinConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinConversation not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}
func (UnimplementedMessageServiceServer) testEmbeddedByValue()                        {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SearchMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AddParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AddParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AddParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AddParticipants(ctx, req.(*AddParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RemoveParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RemoveParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RemoveParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RemoveParticipants(ctx, req.(*RemoveParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_LeaveConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).LeaveConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_LeaveConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).LeaveConversation(ctx, req.(*LeaveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MarkAsRead(ctx, req.(*MarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetReadReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetReadReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetReadReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetReadReceipts(ctx, req.(*GetReadReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendTypingIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTypingIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendTypingIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendTypingIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendTypingIndicator(ctx, req.(*SendTypingIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_StreamTypingIndicators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTypingIndicatorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).StreamTypingIndicators(m, &grpc.GenericServerStream[StreamTypingIndicatorsRequest, StreamTypingIndicatorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_StreamTypingIndicatorsServer = grpc.ServerStreamingServer[StreamTypingIndicatorsResponse]

func _MessageService_AddReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AddReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AddReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AddReaction(ctx, req.(*AddReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RemoveReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RemoveReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RemoveReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RemoveReaction(ctx, req.(*RemoveReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListReactions(ctx, req.(*ListReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UploadAttachment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).UploadAttachment(&grpc.GenericServerStream[UploadAttachmentRequest, UploadAttachmentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_UploadAttachmentServer = grpc.ClientStreamingServer[UploadAttachmentRequest, UploadAttachmentResponse]

func _MessageService_DownloadAttachment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadAttachmentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).DownloadAttachment(m, &grpc.GenericServerStream[DownloadAttachmentRequest, DownloadAttachmentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_DownloadAttachmentServer = grpc.ServerStreamingServer[DownloadAttachmentResponse]

func _MessageService_GetMessageStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessageStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageStatistics(ctx, req.(*GetMessageStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetNotificationSettings(ctx, req.(*GetNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateNotificationSettings(ctx, req.(*UpdateNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).StreamMessages(m, &grpc.GenericServerStream[StreamMessagesRequest, StreamMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_StreamMessagesServer = grpc.ServerStreamingServer[StreamMessagesResponse]

func _MessageService_ArchiveConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ArchiveConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ArchiveConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ArchiveConversation(ctx, req.(*ArchiveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UnarchiveConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UnarchiveConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UnarchiveConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UnarchiveConversation(ctx, req.(*UnarchiveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MuteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MuteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_MuteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MuteConversation(ctx, req.(*MuteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UnmuteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UnmuteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UnmuteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UnmuteConversation(ctx, req.(*UnmuteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_PinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).PinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_PinConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).PinConversation(ctx, req.(*PinConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UnpinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UnpinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UnpinConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UnpinConversation(ctx, req.(*UnpinConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.message.v1.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MessageService_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _MessageService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _MessageService_DeleteMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _MessageService_ListMessages_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _MessageService_SearchMessages_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _MessageService_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _MessageService_GetConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _MessageService_UpdateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _MessageService_DeleteConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _MessageService_ListConversations_Handler,
		},
		{
			MethodName: "AddParticipants",
			Handler:    _MessageService_AddParticipants_Handler,
		},
		{
			MethodName: "RemoveParticipants",
			Handler:    _MessageService_RemoveParticipants_Handler,
		},
		{
			MethodName: "LeaveConversation",
			Handler:    _MessageService_LeaveConversation_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _MessageService_MarkAsRead_Handler,
		},
		{
			MethodName: "GetReadReceipts",
			Handler:    _MessageService_GetReadReceipts_Handler,
		},
		{
			MethodName: "SendTypingIndicator",
			Handler:    _MessageService_SendTypingIndicator_Handler,
		},
		{
			MethodName: "AddReaction",
			Handler:    _MessageService_AddReaction_Handler,
		},
		{
			MethodName: "RemoveReaction",
			Handler:    _MessageService_RemoveReaction_Handler,
		},
		{
			MethodName: "ListReactions",
			Handler:    _MessageService_ListReactions_Handler,
		},
		{
			MethodName: "GetMessageStatistics",
			Handler:    _MessageService_GetMessageStatistics_Handler,
		},
		{
			MethodName: "GetNotificationSettings",
			Handler:    _MessageService_GetNotificationSettings_Handler,
		},
		{
			MethodName: "UpdateNotificationSettings",
			Handler:    _MessageService_UpdateNotificationSettings_Handler,
		},
		{
			MethodName: "ArchiveConversation",
			Handler:    _MessageService_ArchiveConversation_Handler,
		},
		{
			MethodName: "UnarchiveConversation",
			Handler:    _MessageService_UnarchiveConversation_Handler,
		},
		{
			MethodName: "MuteConversation",
			Handler:    _MessageService_MuteConversation_Handler,
		},
		{
			MethodName: "UnmuteConversation",
			Handler:    _MessageService_UnmuteConversation_Handler,
		},
		{
			MethodName: "PinConversation",
			Handler:    _MessageService_PinConversation_Handler,
		},
		{
			MethodName: "UnpinConversation",
			Handler:    _MessageService_UnpinConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTypingIndicators",
			Handler:       _MessageService_StreamTypingIndicators_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadAttachment",
			Handler:       _MessageService_UploadAttachment_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadAttachment",
			Handler:       _MessageService_DownloadAttachment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMessages",
			Handler:       _MessageService_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "avion/message/v1/message_service.proto",
}
