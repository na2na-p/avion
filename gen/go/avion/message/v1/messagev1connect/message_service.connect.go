// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/message/v1/message_service.proto

package messagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/message/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "avion.message.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceSendMessageProcedure is the fully-qualified name of the MessageService's
	// SendMessage RPC.
	MessageServiceSendMessageProcedure = "/avion.message.v1.MessageService/SendMessage"
	// MessageServiceGetMessageProcedure is the fully-qualified name of the MessageService's GetMessage
	// RPC.
	MessageServiceGetMessageProcedure = "/avion.message.v1.MessageService/GetMessage"
	// MessageServiceUpdateMessageProcedure is the fully-qualified name of the MessageService's
	// UpdateMessage RPC.
	MessageServiceUpdateMessageProcedure = "/avion.message.v1.MessageService/UpdateMessage"
	// MessageServiceDeleteMessageProcedure is the fully-qualified name of the MessageService's
	// DeleteMessage RPC.
	MessageServiceDeleteMessageProcedure = "/avion.message.v1.MessageService/DeleteMessage"
	// MessageServiceListMessagesProcedure is the fully-qualified name of the MessageService's
	// ListMessages RPC.
	MessageServiceListMessagesProcedure = "/avion.message.v1.MessageService/ListMessages"
	// MessageServiceSearchMessagesProcedure is the fully-qualified name of the MessageService's
	// SearchMessages RPC.
	MessageServiceSearchMessagesProcedure = "/avion.message.v1.MessageService/SearchMessages"
	// MessageServiceCreateConversationProcedure is the fully-qualified name of the MessageService's
	// CreateConversation RPC.
	MessageServiceCreateConversationProcedure = "/avion.message.v1.MessageService/CreateConversation"
	// MessageServiceGetConversationProcedure is the fully-qualified name of the MessageService's
	// GetConversation RPC.
	MessageServiceGetConversationProcedure = "/avion.message.v1.MessageService/GetConversation"
	// MessageServiceUpdateConversationProcedure is the fully-qualified name of the MessageService's
	// UpdateConversation RPC.
	MessageServiceUpdateConversationProcedure = "/avion.message.v1.MessageService/UpdateConversation"
	// MessageServiceDeleteConversationProcedure is the fully-qualified name of the MessageService's
	// DeleteConversation RPC.
	MessageServiceDeleteConversationProcedure = "/avion.message.v1.MessageService/DeleteConversation"
	// MessageServiceListConversationsProcedure is the fully-qualified name of the MessageService's
	// ListConversations RPC.
	MessageServiceListConversationsProcedure = "/avion.message.v1.MessageService/ListConversations"
	// MessageServiceAddParticipantsProcedure is the fully-qualified name of the MessageService's
	// AddParticipants RPC.
	MessageServiceAddParticipantsProcedure = "/avion.message.v1.MessageService/AddParticipants"
	// MessageServiceRemoveParticipantsProcedure is the fully-qualified name of the MessageService's
	// RemoveParticipants RPC.
	MessageServiceRemoveParticipantsProcedure = "/avion.message.v1.MessageService/RemoveParticipants"
	// MessageServiceLeaveConversationProcedure is the fully-qualified name of the MessageService's
	// LeaveConversation RPC.
	MessageServiceLeaveConversationProcedure = "/avion.message.v1.MessageService/LeaveConversation"
	// MessageServiceMarkAsReadProcedure is the fully-qualified name of the MessageService's MarkAsRead
	// RPC.
	MessageServiceMarkAsReadProcedure = "/avion.message.v1.MessageService/MarkAsRead"
	// MessageServiceGetReadReceiptsProcedure is the fully-qualified name of the MessageService's
	// GetReadReceipts RPC.
	MessageServiceGetReadReceiptsProcedure = "/avion.message.v1.MessageService/GetReadReceipts"
	// MessageServiceSendTypingIndicatorProcedure is the fully-qualified name of the MessageService's
	// SendTypingIndicator RPC.
	MessageServiceSendTypingIndicatorProcedure = "/avion.message.v1.MessageService/SendTypingIndicator"
	// MessageServiceStreamTypingIndicatorsProcedure is the fully-qualified name of the MessageService's
	// StreamTypingIndicators RPC.
	MessageServiceStreamTypingIndicatorsProcedure = "/avion.message.v1.MessageService/StreamTypingIndicators"
	// MessageServiceAddReactionProcedure is the fully-qualified name of the MessageService's
	// AddReaction RPC.
	MessageServiceAddReactionProcedure = "/avion.message.v1.MessageService/AddReaction"
	// MessageServiceRemoveReactionProcedure is the fully-qualified name of the MessageService's
	// RemoveReaction RPC.
	MessageServiceRemoveReactionProcedure = "/avion.message.v1.MessageService/RemoveReaction"
	// MessageServiceListReactionsProcedure is the fully-qualified name of the MessageService's
	// ListReactions RPC.
	MessageServiceListReactionsProcedure = "/avion.message.v1.MessageService/ListReactions"
	// MessageServiceUploadAttachmentProcedure is the fully-qualified name of the MessageService's
	// UploadAttachment RPC.
	MessageServiceUploadAttachmentProcedure = "/avion.message.v1.MessageService/UploadAttachment"
	// MessageServiceDownloadAttachmentProcedure is the fully-qualified name of the MessageService's
	// DownloadAttachment RPC.
	MessageServiceDownloadAttachmentProcedure = "/avion.message.v1.MessageService/DownloadAttachment"
	// MessageServiceGetMessageStatisticsProcedure is the fully-qualified name of the MessageService's
	// GetMessageStatistics RPC.
	MessageServiceGetMessageStatisticsProcedure = "/avion.message.v1.MessageService/GetMessageStatistics"
	// MessageServiceGetNotificationSettingsProcedure is the fully-qualified name of the
	// MessageService's GetNotificationSettings RPC.
	MessageServiceGetNotificationSettingsProcedure = "/avion.message.v1.MessageService/GetNotificationSettings"
	// MessageServiceUpdateNotificationSettingsProcedure is the fully-qualified name of the
	// MessageService's UpdateNotificationSettings RPC.
	MessageServiceUpdateNotificationSettingsProcedure = "/avion.message.v1.MessageService/UpdateNotificationSettings"
	// MessageServiceStreamMessagesProcedure is the fully-qualified name of the MessageService's
	// StreamMessages RPC.
	MessageServiceStreamMessagesProcedure = "/avion.message.v1.MessageService/StreamMessages"
	// MessageServiceArchiveConversationProcedure is the fully-qualified name of the MessageService's
	// ArchiveConversation RPC.
	MessageServiceArchiveConversationProcedure = "/avion.message.v1.MessageService/ArchiveConversation"
	// MessageServiceUnarchiveConversationProcedure is the fully-qualified name of the MessageService's
	// UnarchiveConversation RPC.
	MessageServiceUnarchiveConversationProcedure = "/avion.message.v1.MessageService/UnarchiveConversation"
	// MessageServiceMuteConversationProcedure is the fully-qualified name of the MessageService's
	// MuteConversation RPC.
	MessageServiceMuteConversationProcedure = "/avion.message.v1.MessageService/MuteConversation"
	// MessageServiceUnmuteConversationProcedure is the fully-qualified name of the MessageService's
	// UnmuteConversation RPC.
	MessageServiceUnmuteConversationProcedure = "/avion.message.v1.MessageService/UnmuteConversation"
	// MessageServicePinConversationProcedure is the fully-qualified name of the MessageService's
	// PinConversation RPC.
	MessageServicePinConversationProcedure = "/avion.message.v1.MessageService/PinConversation"
	// MessageServiceUnpinConversationProcedure is the fully-qualified name of the MessageService's
	// UnpinConversation RPC.
	MessageServiceUnpinConversationProcedure = "/avion.message.v1.MessageService/UnpinConversation"
)

// MessageServiceClient is a client for the avion.message.v1.MessageService service.
type MessageServiceClient interface {
	// メッセージ送信
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// メッセージ取得
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	// メッセージ更新（編集）
	UpdateMessage(context.Context, *connect.Request[v1.UpdateMessageRequest]) (*connect.Response[v1.UpdateMessageResponse], error)
	// メッセージ削除
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	// メッセージ一覧取得
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	// メッセージ検索
	SearchMessages(context.Context, *connect.Request[v1.SearchMessagesRequest]) (*connect.Response[v1.SearchMessagesResponse], error)
	// 会話作成
	CreateConversation(context.Context, *connect.Request[v1.CreateConversationRequest]) (*connect.Response[v1.CreateConversationResponse], error)
	// 会話取得
	GetConversation(context.Context, *connect.Request[v1.GetConversationRequest]) (*connect.Response[v1.GetConversationResponse], error)
	// 会話更新
	UpdateConversation(context.Context, *connect.Request[v1.UpdateConversationRequest]) (*connect.Response[v1.UpdateConversationResponse], error)
	// 会話削除
	DeleteConversation(context.Context, *connect.Request[v1.DeleteConversationRequest]) (*connect.Response[v1.DeleteConversationResponse], error)
	// 会話一覧取得
	ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error)
	// 会話参加者追加
	AddParticipants(context.Context, *connect.Request[v1.AddParticipantsRequest]) (*connect.Response[v1.AddParticipantsResponse], error)
	// 会話参加者削除
	RemoveParticipants(context.Context, *connect.Request[v1.RemoveParticipantsRequest]) (*connect.Response[v1.RemoveParticipantsResponse], error)
	// 会話から退出
	LeaveConversation(context.Context, *connect.Request[v1.LeaveConversationRequest]) (*connect.Response[v1.LeaveConversationResponse], error)
	// 既読状態更新
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// 既読レシート取得
	GetReadReceipts(context.Context, *connect.Request[v1.GetReadReceiptsRequest]) (*connect.Response[v1.GetReadReceiptsResponse], error)
	// タイピング状態送信
	SendTypingIndicator(context.Context, *connect.Request[v1.SendTypingIndicatorRequest]) (*connect.Response[v1.SendTypingIndicatorResponse], error)
	// タイピング状態受信（ストリーミング）
	StreamTypingIndicators(context.Context, *connect.Request[v1.StreamTypingIndicatorsRequest]) (*connect.ServerStreamForClient[v1.StreamTypingIndicatorsResponse], error)
	// リアクション追加
	AddReaction(context.Context, *connect.Request[v1.AddReactionRequest]) (*connect.Response[v1.AddReactionResponse], error)
	// リアクション削除
	RemoveReaction(context.Context, *connect.Request[v1.RemoveReactionRequest]) (*connect.Response[v1.RemoveReactionResponse], error)
	// リアクション一覧取得
	ListReactions(context.Context, *connect.Request[v1.ListReactionsRequest]) (*connect.Response[v1.ListReactionsResponse], error)
	// 添付ファイルアップロード
	UploadAttachment(context.Context) *connect.ClientStreamForClient[v1.UploadAttachmentRequest, v1.UploadAttachmentResponse]
	// 添付ファイルダウンロード
	DownloadAttachment(context.Context, *connect.Request[v1.DownloadAttachmentRequest]) (*connect.ServerStreamForClient[v1.DownloadAttachmentResponse], error)
	// メッセージ統計取得
	GetMessageStatistics(context.Context, *connect.Request[v1.GetMessageStatisticsRequest]) (*connect.Response[v1.GetMessageStatisticsResponse], error)
	// 通知設定取得
	GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error)
	// 通知設定更新
	UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error)
	// リアルタイムメッセージストリーム
	StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest]) (*connect.ServerStreamForClient[v1.StreamMessagesResponse], error)
	// 会話のアーカイブ
	ArchiveConversation(context.Context, *connect.Request[v1.ArchiveConversationRequest]) (*connect.Response[v1.ArchiveConversationResponse], error)
	// 会話のアーカイブ解除
	UnarchiveConversation(context.Context, *connect.Request[v1.UnarchiveConversationRequest]) (*connect.Response[v1.UnarchiveConversationResponse], error)
	// 会話のミュート
	MuteConversation(context.Context, *connect.Request[v1.MuteConversationRequest]) (*connect.Response[v1.MuteConversationResponse], error)
	// 会話のミュート解除
	UnmuteConversation(context.Context, *connect.Request[v1.UnmuteConversationRequest]) (*connect.Response[v1.UnmuteConversationResponse], error)
	// 会話のピン留め
	PinConversation(context.Context, *connect.Request[v1.PinConversationRequest]) (*connect.Response[v1.PinConversationResponse], error)
	// 会話のピン留め解除
	UnpinConversation(context.Context, *connect.Request[v1.UnpinConversationRequest]) (*connect.Response[v1.UnpinConversationResponse], error)
}

// NewMessageServiceClient constructs a client for the avion.message.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageServiceMethods := v1.File_avion_message_v1_message_service_proto.Services().ByName("MessageService").Methods()
	return &messageServiceClient{
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+MessageServiceSendMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		getMessage: connect.NewClient[v1.GetMessageRequest, v1.GetMessageResponse](
			httpClient,
			baseURL+MessageServiceGetMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetMessage")),
			connect.WithClientOptions(opts...),
		),
		updateMessage: connect.NewClient[v1.UpdateMessageRequest, v1.UpdateMessageResponse](
			httpClient,
			baseURL+MessageServiceUpdateMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UpdateMessage")),
			connect.WithClientOptions(opts...),
		),
		deleteMessage: connect.NewClient[v1.DeleteMessageRequest, v1.DeleteMessageResponse](
			httpClient,
			baseURL+MessageServiceDeleteMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
			connect.WithClientOptions(opts...),
		),
		listMessages: connect.NewClient[v1.ListMessagesRequest, v1.ListMessagesResponse](
			httpClient,
			baseURL+MessageServiceListMessagesProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ListMessages")),
			connect.WithClientOptions(opts...),
		),
		searchMessages: connect.NewClient[v1.SearchMessagesRequest, v1.SearchMessagesResponse](
			httpClient,
			baseURL+MessageServiceSearchMessagesProcedure,
			connect.WithSchema(messageServiceMethods.ByName("SearchMessages")),
			connect.WithClientOptions(opts...),
		),
		createConversation: connect.NewClient[v1.CreateConversationRequest, v1.CreateConversationResponse](
			httpClient,
			baseURL+MessageServiceCreateConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("CreateConversation")),
			connect.WithClientOptions(opts...),
		),
		getConversation: connect.NewClient[v1.GetConversationRequest, v1.GetConversationResponse](
			httpClient,
			baseURL+MessageServiceGetConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetConversation")),
			connect.WithClientOptions(opts...),
		),
		updateConversation: connect.NewClient[v1.UpdateConversationRequest, v1.UpdateConversationResponse](
			httpClient,
			baseURL+MessageServiceUpdateConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UpdateConversation")),
			connect.WithClientOptions(opts...),
		),
		deleteConversation: connect.NewClient[v1.DeleteConversationRequest, v1.DeleteConversationResponse](
			httpClient,
			baseURL+MessageServiceDeleteConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("DeleteConversation")),
			connect.WithClientOptions(opts...),
		),
		listConversations: connect.NewClient[v1.ListConversationsRequest, v1.ListConversationsResponse](
			httpClient,
			baseURL+MessageServiceListConversationsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ListConversations")),
			connect.WithClientOptions(opts...),
		),
		addParticipants: connect.NewClient[v1.AddParticipantsRequest, v1.AddParticipantsResponse](
			httpClient,
			baseURL+MessageServiceAddParticipantsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("AddParticipants")),
			connect.WithClientOptions(opts...),
		),
		removeParticipants: connect.NewClient[v1.RemoveParticipantsRequest, v1.RemoveParticipantsResponse](
			httpClient,
			baseURL+MessageServiceRemoveParticipantsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("RemoveParticipants")),
			connect.WithClientOptions(opts...),
		),
		leaveConversation: connect.NewClient[v1.LeaveConversationRequest, v1.LeaveConversationResponse](
			httpClient,
			baseURL+MessageServiceLeaveConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("LeaveConversation")),
			connect.WithClientOptions(opts...),
		),
		markAsRead: connect.NewClient[v1.MarkAsReadRequest, v1.MarkAsReadResponse](
			httpClient,
			baseURL+MessageServiceMarkAsReadProcedure,
			connect.WithSchema(messageServiceMethods.ByName("MarkAsRead")),
			connect.WithClientOptions(opts...),
		),
		getReadReceipts: connect.NewClient[v1.GetReadReceiptsRequest, v1.GetReadReceiptsResponse](
			httpClient,
			baseURL+MessageServiceGetReadReceiptsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetReadReceipts")),
			connect.WithClientOptions(opts...),
		),
		sendTypingIndicator: connect.NewClient[v1.SendTypingIndicatorRequest, v1.SendTypingIndicatorResponse](
			httpClient,
			baseURL+MessageServiceSendTypingIndicatorProcedure,
			connect.WithSchema(messageServiceMethods.ByName("SendTypingIndicator")),
			connect.WithClientOptions(opts...),
		),
		streamTypingIndicators: connect.NewClient[v1.StreamTypingIndicatorsRequest, v1.StreamTypingIndicatorsResponse](
			httpClient,
			baseURL+MessageServiceStreamTypingIndicatorsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("StreamTypingIndicators")),
			connect.WithClientOptions(opts...),
		),
		addReaction: connect.NewClient[v1.AddReactionRequest, v1.AddReactionResponse](
			httpClient,
			baseURL+MessageServiceAddReactionProcedure,
			connect.WithSchema(messageServiceMethods.ByName("AddReaction")),
			connect.WithClientOptions(opts...),
		),
		removeReaction: connect.NewClient[v1.RemoveReactionRequest, v1.RemoveReactionResponse](
			httpClient,
			baseURL+MessageServiceRemoveReactionProcedure,
			connect.WithSchema(messageServiceMethods.ByName("RemoveReaction")),
			connect.WithClientOptions(opts...),
		),
		listReactions: connect.NewClient[v1.ListReactionsRequest, v1.ListReactionsResponse](
			httpClient,
			baseURL+MessageServiceListReactionsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ListReactions")),
			connect.WithClientOptions(opts...),
		),
		uploadAttachment: connect.NewClient[v1.UploadAttachmentRequest, v1.UploadAttachmentResponse](
			httpClient,
			baseURL+MessageServiceUploadAttachmentProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UploadAttachment")),
			connect.WithClientOptions(opts...),
		),
		downloadAttachment: connect.NewClient[v1.DownloadAttachmentRequest, v1.DownloadAttachmentResponse](
			httpClient,
			baseURL+MessageServiceDownloadAttachmentProcedure,
			connect.WithSchema(messageServiceMethods.ByName("DownloadAttachment")),
			connect.WithClientOptions(opts...),
		),
		getMessageStatistics: connect.NewClient[v1.GetMessageStatisticsRequest, v1.GetMessageStatisticsResponse](
			httpClient,
			baseURL+MessageServiceGetMessageStatisticsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetMessageStatistics")),
			connect.WithClientOptions(opts...),
		),
		getNotificationSettings: connect.NewClient[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse](
			httpClient,
			baseURL+MessageServiceGetNotificationSettingsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetNotificationSettings")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationSettings: connect.NewClient[v1.UpdateNotificationSettingsRequest, v1.UpdateNotificationSettingsResponse](
			httpClient,
			baseURL+MessageServiceUpdateNotificationSettingsProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UpdateNotificationSettings")),
			connect.WithClientOptions(opts...),
		),
		streamMessages: connect.NewClient[v1.StreamMessagesRequest, v1.StreamMessagesResponse](
			httpClient,
			baseURL+MessageServiceStreamMessagesProcedure,
			connect.WithSchema(messageServiceMethods.ByName("StreamMessages")),
			connect.WithClientOptions(opts...),
		),
		archiveConversation: connect.NewClient[v1.ArchiveConversationRequest, v1.ArchiveConversationResponse](
			httpClient,
			baseURL+MessageServiceArchiveConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ArchiveConversation")),
			connect.WithClientOptions(opts...),
		),
		unarchiveConversation: connect.NewClient[v1.UnarchiveConversationRequest, v1.UnarchiveConversationResponse](
			httpClient,
			baseURL+MessageServiceUnarchiveConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UnarchiveConversation")),
			connect.WithClientOptions(opts...),
		),
		muteConversation: connect.NewClient[v1.MuteConversationRequest, v1.MuteConversationResponse](
			httpClient,
			baseURL+MessageServiceMuteConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("MuteConversation")),
			connect.WithClientOptions(opts...),
		),
		unmuteConversation: connect.NewClient[v1.UnmuteConversationRequest, v1.UnmuteConversationResponse](
			httpClient,
			baseURL+MessageServiceUnmuteConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UnmuteConversation")),
			connect.WithClientOptions(opts...),
		),
		pinConversation: connect.NewClient[v1.PinConversationRequest, v1.PinConversationResponse](
			httpClient,
			baseURL+MessageServicePinConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("PinConversation")),
			connect.WithClientOptions(opts...),
		),
		unpinConversation: connect.NewClient[v1.UnpinConversationRequest, v1.UnpinConversationResponse](
			httpClient,
			baseURL+MessageServiceUnpinConversationProcedure,
			connect.WithSchema(messageServiceMethods.ByName("UnpinConversation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	sendMessage                *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	getMessage                 *connect.Client[v1.GetMessageRequest, v1.GetMessageResponse]
	updateMessage              *connect.Client[v1.UpdateMessageRequest, v1.UpdateMessageResponse]
	deleteMessage              *connect.Client[v1.DeleteMessageRequest, v1.DeleteMessageResponse]
	listMessages               *connect.Client[v1.ListMessagesRequest, v1.ListMessagesResponse]
	searchMessages             *connect.Client[v1.SearchMessagesRequest, v1.SearchMessagesResponse]
	createConversation         *connect.Client[v1.CreateConversationRequest, v1.CreateConversationResponse]
	getConversation            *connect.Client[v1.GetConversationRequest, v1.GetConversationResponse]
	updateConversation         *connect.Client[v1.UpdateConversationRequest, v1.UpdateConversationResponse]
	deleteConversation         *connect.Client[v1.DeleteConversationRequest, v1.DeleteConversationResponse]
	listConversations          *connect.Client[v1.ListConversationsRequest, v1.ListConversationsResponse]
	addParticipants            *connect.Client[v1.AddParticipantsRequest, v1.AddParticipantsResponse]
	removeParticipants         *connect.Client[v1.RemoveParticipantsRequest, v1.RemoveParticipantsResponse]
	leaveConversation          *connect.Client[v1.LeaveConversationRequest, v1.LeaveConversationResponse]
	markAsRead                 *connect.Client[v1.MarkAsReadRequest, v1.MarkAsReadResponse]
	getReadReceipts            *connect.Client[v1.GetReadReceiptsRequest, v1.GetReadReceiptsResponse]
	sendTypingIndicator        *connect.Client[v1.SendTypingIndicatorRequest, v1.SendTypingIndicatorResponse]
	streamTypingIndicators     *connect.Client[v1.StreamTypingIndicatorsRequest, v1.StreamTypingIndicatorsResponse]
	addReaction                *connect.Client[v1.AddReactionRequest, v1.AddReactionResponse]
	removeReaction             *connect.Client[v1.RemoveReactionRequest, v1.RemoveReactionResponse]
	listReactions              *connect.Client[v1.ListReactionsRequest, v1.ListReactionsResponse]
	uploadAttachment           *connect.Client[v1.UploadAttachmentRequest, v1.UploadAttachmentResponse]
	downloadAttachment         *connect.Client[v1.DownloadAttachmentRequest, v1.DownloadAttachmentResponse]
	getMessageStatistics       *connect.Client[v1.GetMessageStatisticsRequest, v1.GetMessageStatisticsResponse]
	getNotificationSettings    *connect.Client[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse]
	updateNotificationSettings *connect.Client[v1.UpdateNotificationSettingsRequest, v1.UpdateNotificationSettingsResponse]
	streamMessages             *connect.Client[v1.StreamMessagesRequest, v1.StreamMessagesResponse]
	archiveConversation        *connect.Client[v1.ArchiveConversationRequest, v1.ArchiveConversationResponse]
	unarchiveConversation      *connect.Client[v1.UnarchiveConversationRequest, v1.UnarchiveConversationResponse]
	muteConversation           *connect.Client[v1.MuteConversationRequest, v1.MuteConversationResponse]
	unmuteConversation         *connect.Client[v1.UnmuteConversationRequest, v1.UnmuteConversationResponse]
	pinConversation            *connect.Client[v1.PinConversationRequest, v1.PinConversationResponse]
	unpinConversation          *connect.Client[v1.UnpinConversationRequest, v1.UnpinConversationResponse]
}

// SendMessage calls avion.message.v1.MessageService.SendMessage.
func (c *messageServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// GetMessage calls avion.message.v1.MessageService.GetMessage.
func (c *messageServiceClient) GetMessage(ctx context.Context, req *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// UpdateMessage calls avion.message.v1.MessageService.UpdateMessage.
func (c *messageServiceClient) UpdateMessage(ctx context.Context, req *connect.Request[v1.UpdateMessageRequest]) (*connect.Response[v1.UpdateMessageResponse], error) {
	return c.updateMessage.CallUnary(ctx, req)
}

// DeleteMessage calls avion.message.v1.MessageService.DeleteMessage.
func (c *messageServiceClient) DeleteMessage(ctx context.Context, req *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// ListMessages calls avion.message.v1.MessageService.ListMessages.
func (c *messageServiceClient) ListMessages(ctx context.Context, req *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return c.listMessages.CallUnary(ctx, req)
}

// SearchMessages calls avion.message.v1.MessageService.SearchMessages.
func (c *messageServiceClient) SearchMessages(ctx context.Context, req *connect.Request[v1.SearchMessagesRequest]) (*connect.Response[v1.SearchMessagesResponse], error) {
	return c.searchMessages.CallUnary(ctx, req)
}

// CreateConversation calls avion.message.v1.MessageService.CreateConversation.
func (c *messageServiceClient) CreateConversation(ctx context.Context, req *connect.Request[v1.CreateConversationRequest]) (*connect.Response[v1.CreateConversationResponse], error) {
	return c.createConversation.CallUnary(ctx, req)
}

// GetConversation calls avion.message.v1.MessageService.GetConversation.
func (c *messageServiceClient) GetConversation(ctx context.Context, req *connect.Request[v1.GetConversationRequest]) (*connect.Response[v1.GetConversationResponse], error) {
	return c.getConversation.CallUnary(ctx, req)
}

// UpdateConversation calls avion.message.v1.MessageService.UpdateConversation.
func (c *messageServiceClient) UpdateConversation(ctx context.Context, req *connect.Request[v1.UpdateConversationRequest]) (*connect.Response[v1.UpdateConversationResponse], error) {
	return c.updateConversation.CallUnary(ctx, req)
}

// DeleteConversation calls avion.message.v1.MessageService.DeleteConversation.
func (c *messageServiceClient) DeleteConversation(ctx context.Context, req *connect.Request[v1.DeleteConversationRequest]) (*connect.Response[v1.DeleteConversationResponse], error) {
	return c.deleteConversation.CallUnary(ctx, req)
}

// ListConversations calls avion.message.v1.MessageService.ListConversations.
func (c *messageServiceClient) ListConversations(ctx context.Context, req *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error) {
	return c.listConversations.CallUnary(ctx, req)
}

// AddParticipants calls avion.message.v1.MessageService.AddParticipants.
func (c *messageServiceClient) AddParticipants(ctx context.Context, req *connect.Request[v1.AddParticipantsRequest]) (*connect.Response[v1.AddParticipantsResponse], error) {
	return c.addParticipants.CallUnary(ctx, req)
}

// RemoveParticipants calls avion.message.v1.MessageService.RemoveParticipants.
func (c *messageServiceClient) RemoveParticipants(ctx context.Context, req *connect.Request[v1.RemoveParticipantsRequest]) (*connect.Response[v1.RemoveParticipantsResponse], error) {
	return c.removeParticipants.CallUnary(ctx, req)
}

// LeaveConversation calls avion.message.v1.MessageService.LeaveConversation.
func (c *messageServiceClient) LeaveConversation(ctx context.Context, req *connect.Request[v1.LeaveConversationRequest]) (*connect.Response[v1.LeaveConversationResponse], error) {
	return c.leaveConversation.CallUnary(ctx, req)
}

// MarkAsRead calls avion.message.v1.MessageService.MarkAsRead.
func (c *messageServiceClient) MarkAsRead(ctx context.Context, req *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return c.markAsRead.CallUnary(ctx, req)
}

// GetReadReceipts calls avion.message.v1.MessageService.GetReadReceipts.
func (c *messageServiceClient) GetReadReceipts(ctx context.Context, req *connect.Request[v1.GetReadReceiptsRequest]) (*connect.Response[v1.GetReadReceiptsResponse], error) {
	return c.getReadReceipts.CallUnary(ctx, req)
}

// SendTypingIndicator calls avion.message.v1.MessageService.SendTypingIndicator.
func (c *messageServiceClient) SendTypingIndicator(ctx context.Context, req *connect.Request[v1.SendTypingIndicatorRequest]) (*connect.Response[v1.SendTypingIndicatorResponse], error) {
	return c.sendTypingIndicator.CallUnary(ctx, req)
}

// StreamTypingIndicators calls avion.message.v1.MessageService.StreamTypingIndicators.
func (c *messageServiceClient) StreamTypingIndicators(ctx context.Context, req *connect.Request[v1.StreamTypingIndicatorsRequest]) (*connect.ServerStreamForClient[v1.StreamTypingIndicatorsResponse], error) {
	return c.streamTypingIndicators.CallServerStream(ctx, req)
}

// AddReaction calls avion.message.v1.MessageService.AddReaction.
func (c *messageServiceClient) AddReaction(ctx context.Context, req *connect.Request[v1.AddReactionRequest]) (*connect.Response[v1.AddReactionResponse], error) {
	return c.addReaction.CallUnary(ctx, req)
}

// RemoveReaction calls avion.message.v1.MessageService.RemoveReaction.
func (c *messageServiceClient) RemoveReaction(ctx context.Context, req *connect.Request[v1.RemoveReactionRequest]) (*connect.Response[v1.RemoveReactionResponse], error) {
	return c.removeReaction.CallUnary(ctx, req)
}

// ListReactions calls avion.message.v1.MessageService.ListReactions.
func (c *messageServiceClient) ListReactions(ctx context.Context, req *connect.Request[v1.ListReactionsRequest]) (*connect.Response[v1.ListReactionsResponse], error) {
	return c.listReactions.CallUnary(ctx, req)
}

// UploadAttachment calls avion.message.v1.MessageService.UploadAttachment.
func (c *messageServiceClient) UploadAttachment(ctx context.Context) *connect.ClientStreamForClient[v1.UploadAttachmentRequest, v1.UploadAttachmentResponse] {
	return c.uploadAttachment.CallClientStream(ctx)
}

// DownloadAttachment calls avion.message.v1.MessageService.DownloadAttachment.
func (c *messageServiceClient) DownloadAttachment(ctx context.Context, req *connect.Request[v1.DownloadAttachmentRequest]) (*connect.ServerStreamForClient[v1.DownloadAttachmentResponse], error) {
	return c.downloadAttachment.CallServerStream(ctx, req)
}

// GetMessageStatistics calls avion.message.v1.MessageService.GetMessageStatistics.
func (c *messageServiceClient) GetMessageStatistics(ctx context.Context, req *connect.Request[v1.GetMessageStatisticsRequest]) (*connect.Response[v1.GetMessageStatisticsResponse], error) {
	return c.getMessageStatistics.CallUnary(ctx, req)
}

// GetNotificationSettings calls avion.message.v1.MessageService.GetNotificationSettings.
func (c *messageServiceClient) GetNotificationSettings(ctx context.Context, req *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error) {
	return c.getNotificationSettings.CallUnary(ctx, req)
}

// UpdateNotificationSettings calls avion.message.v1.MessageService.UpdateNotificationSettings.
func (c *messageServiceClient) UpdateNotificationSettings(ctx context.Context, req *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error) {
	return c.updateNotificationSettings.CallUnary(ctx, req)
}

// StreamMessages calls avion.message.v1.MessageService.StreamMessages.
func (c *messageServiceClient) StreamMessages(ctx context.Context, req *connect.Request[v1.StreamMessagesRequest]) (*connect.ServerStreamForClient[v1.StreamMessagesResponse], error) {
	return c.streamMessages.CallServerStream(ctx, req)
}

// ArchiveConversation calls avion.message.v1.MessageService.ArchiveConversation.
func (c *messageServiceClient) ArchiveConversation(ctx context.Context, req *connect.Request[v1.ArchiveConversationRequest]) (*connect.Response[v1.ArchiveConversationResponse], error) {
	return c.archiveConversation.CallUnary(ctx, req)
}

// UnarchiveConversation calls avion.message.v1.MessageService.UnarchiveConversation.
func (c *messageServiceClient) UnarchiveConversation(ctx context.Context, req *connect.Request[v1.UnarchiveConversationRequest]) (*connect.Response[v1.UnarchiveConversationResponse], error) {
	return c.unarchiveConversation.CallUnary(ctx, req)
}

// MuteConversation calls avion.message.v1.MessageService.MuteConversation.
func (c *messageServiceClient) MuteConversation(ctx context.Context, req *connect.Request[v1.MuteConversationRequest]) (*connect.Response[v1.MuteConversationResponse], error) {
	return c.muteConversation.CallUnary(ctx, req)
}

// UnmuteConversation calls avion.message.v1.MessageService.UnmuteConversation.
func (c *messageServiceClient) UnmuteConversation(ctx context.Context, req *connect.Request[v1.UnmuteConversationRequest]) (*connect.Response[v1.UnmuteConversationResponse], error) {
	return c.unmuteConversation.CallUnary(ctx, req)
}

// PinConversation calls avion.message.v1.MessageService.PinConversation.
func (c *messageServiceClient) PinConversation(ctx context.Context, req *connect.Request[v1.PinConversationRequest]) (*connect.Response[v1.PinConversationResponse], error) {
	return c.pinConversation.CallUnary(ctx, req)
}

// UnpinConversation calls avion.message.v1.MessageService.UnpinConversation.
func (c *messageServiceClient) UnpinConversation(ctx context.Context, req *connect.Request[v1.UnpinConversationRequest]) (*connect.Response[v1.UnpinConversationResponse], error) {
	return c.unpinConversation.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the avion.message.v1.MessageService service.
type MessageServiceHandler interface {
	// メッセージ送信
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// メッセージ取得
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	// メッセージ更新（編集）
	UpdateMessage(context.Context, *connect.Request[v1.UpdateMessageRequest]) (*connect.Response[v1.UpdateMessageResponse], error)
	// メッセージ削除
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	// メッセージ一覧取得
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	// メッセージ検索
	SearchMessages(context.Context, *connect.Request[v1.SearchMessagesRequest]) (*connect.Response[v1.SearchMessagesResponse], error)
	// 会話作成
	CreateConversation(context.Context, *connect.Request[v1.CreateConversationRequest]) (*connect.Response[v1.CreateConversationResponse], error)
	// 会話取得
	GetConversation(context.Context, *connect.Request[v1.GetConversationRequest]) (*connect.Response[v1.GetConversationResponse], error)
	// 会話更新
	UpdateConversation(context.Context, *connect.Request[v1.UpdateConversationRequest]) (*connect.Response[v1.UpdateConversationResponse], error)
	// 会話削除
	DeleteConversation(context.Context, *connect.Request[v1.DeleteConversationRequest]) (*connect.Response[v1.DeleteConversationResponse], error)
	// 会話一覧取得
	ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error)
	// 会話参加者追加
	AddParticipants(context.Context, *connect.Request[v1.AddParticipantsRequest]) (*connect.Response[v1.AddParticipantsResponse], error)
	// 会話参加者削除
	RemoveParticipants(context.Context, *connect.Request[v1.RemoveParticipantsRequest]) (*connect.Response[v1.RemoveParticipantsResponse], error)
	// 会話から退出
	LeaveConversation(context.Context, *connect.Request[v1.LeaveConversationRequest]) (*connect.Response[v1.LeaveConversationResponse], error)
	// 既読状態更新
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// 既読レシート取得
	GetReadReceipts(context.Context, *connect.Request[v1.GetReadReceiptsRequest]) (*connect.Response[v1.GetReadReceiptsResponse], error)
	// タイピング状態送信
	SendTypingIndicator(context.Context, *connect.Request[v1.SendTypingIndicatorRequest]) (*connect.Response[v1.SendTypingIndicatorResponse], error)
	// タイピング状態受信（ストリーミング）
	StreamTypingIndicators(context.Context, *connect.Request[v1.StreamTypingIndicatorsRequest], *connect.ServerStream[v1.StreamTypingIndicatorsResponse]) error
	// リアクション追加
	AddReaction(context.Context, *connect.Request[v1.AddReactionRequest]) (*connect.Response[v1.AddReactionResponse], error)
	// リアクション削除
	RemoveReaction(context.Context, *connect.Request[v1.RemoveReactionRequest]) (*connect.Response[v1.RemoveReactionResponse], error)
	// リアクション一覧取得
	ListReactions(context.Context, *connect.Request[v1.ListReactionsRequest]) (*connect.Response[v1.ListReactionsResponse], error)
	// 添付ファイルアップロード
	UploadAttachment(context.Context, *connect.ClientStream[v1.UploadAttachmentRequest]) (*connect.Response[v1.UploadAttachmentResponse], error)
	// 添付ファイルダウンロード
	DownloadAttachment(context.Context, *connect.Request[v1.DownloadAttachmentRequest], *connect.ServerStream[v1.DownloadAttachmentResponse]) error
	// メッセージ統計取得
	GetMessageStatistics(context.Context, *connect.Request[v1.GetMessageStatisticsRequest]) (*connect.Response[v1.GetMessageStatisticsResponse], error)
	// 通知設定取得
	GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error)
	// 通知設定更新
	UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error)
	// リアルタイムメッセージストリーム
	StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest], *connect.ServerStream[v1.StreamMessagesResponse]) error
	// 会話のアーカイブ
	ArchiveConversation(context.Context, *connect.Request[v1.ArchiveConversationRequest]) (*connect.Response[v1.ArchiveConversationResponse], error)
	// 会話のアーカイブ解除
	UnarchiveConversation(context.Context, *connect.Request[v1.UnarchiveConversationRequest]) (*connect.Response[v1.UnarchiveConversationResponse], error)
	// 会話のミュート
	MuteConversation(context.Context, *connect.Request[v1.MuteConversationRequest]) (*connect.Response[v1.MuteConversationResponse], error)
	// 会話のミュート解除
	UnmuteConversation(context.Context, *connect.Request[v1.UnmuteConversationRequest]) (*connect.Response[v1.UnmuteConversationResponse], error)
	// 会話のピン留め
	PinConversation(context.Context, *connect.Request[v1.PinConversationRequest]) (*connect.Response[v1.PinConversationResponse], error)
	// 会話のピン留め解除
	UnpinConversation(context.Context, *connect.Request[v1.UnpinConversationRequest]) (*connect.Response[v1.UnpinConversationResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceMethods := v1.File_avion_message_v1_message_service_proto.Services().ByName("MessageService").Methods()
	messageServiceSendMessageHandler := connect.NewUnaryHandler(
		MessageServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(messageServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetMessageHandler := connect.NewUnaryHandler(
		MessageServiceGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(messageServiceMethods.ByName("GetMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUpdateMessageHandler := connect.NewUnaryHandler(
		MessageServiceUpdateMessageProcedure,
		svc.UpdateMessage,
		connect.WithSchema(messageServiceMethods.ByName("UpdateMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceDeleteMessageHandler := connect.NewUnaryHandler(
		MessageServiceDeleteMessageProcedure,
		svc.DeleteMessage,
		connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceListMessagesHandler := connect.NewUnaryHandler(
		MessageServiceListMessagesProcedure,
		svc.ListMessages,
		connect.WithSchema(messageServiceMethods.ByName("ListMessages")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceSearchMessagesHandler := connect.NewUnaryHandler(
		MessageServiceSearchMessagesProcedure,
		svc.SearchMessages,
		connect.WithSchema(messageServiceMethods.ByName("SearchMessages")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceCreateConversationHandler := connect.NewUnaryHandler(
		MessageServiceCreateConversationProcedure,
		svc.CreateConversation,
		connect.WithSchema(messageServiceMethods.ByName("CreateConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetConversationHandler := connect.NewUnaryHandler(
		MessageServiceGetConversationProcedure,
		svc.GetConversation,
		connect.WithSchema(messageServiceMethods.ByName("GetConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUpdateConversationHandler := connect.NewUnaryHandler(
		MessageServiceUpdateConversationProcedure,
		svc.UpdateConversation,
		connect.WithSchema(messageServiceMethods.ByName("UpdateConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceDeleteConversationHandler := connect.NewUnaryHandler(
		MessageServiceDeleteConversationProcedure,
		svc.DeleteConversation,
		connect.WithSchema(messageServiceMethods.ByName("DeleteConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceListConversationsHandler := connect.NewUnaryHandler(
		MessageServiceListConversationsProcedure,
		svc.ListConversations,
		connect.WithSchema(messageServiceMethods.ByName("ListConversations")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceAddParticipantsHandler := connect.NewUnaryHandler(
		MessageServiceAddParticipantsProcedure,
		svc.AddParticipants,
		connect.WithSchema(messageServiceMethods.ByName("AddParticipants")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceRemoveParticipantsHandler := connect.NewUnaryHandler(
		MessageServiceRemoveParticipantsProcedure,
		svc.RemoveParticipants,
		connect.WithSchema(messageServiceMethods.ByName("RemoveParticipants")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceLeaveConversationHandler := connect.NewUnaryHandler(
		MessageServiceLeaveConversationProcedure,
		svc.LeaveConversation,
		connect.WithSchema(messageServiceMethods.ByName("LeaveConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceMarkAsReadHandler := connect.NewUnaryHandler(
		MessageServiceMarkAsReadProcedure,
		svc.MarkAsRead,
		connect.WithSchema(messageServiceMethods.ByName("MarkAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetReadReceiptsHandler := connect.NewUnaryHandler(
		MessageServiceGetReadReceiptsProcedure,
		svc.GetReadReceipts,
		connect.WithSchema(messageServiceMethods.ByName("GetReadReceipts")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceSendTypingIndicatorHandler := connect.NewUnaryHandler(
		MessageServiceSendTypingIndicatorProcedure,
		svc.SendTypingIndicator,
		connect.WithSchema(messageServiceMethods.ByName("SendTypingIndicator")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceStreamTypingIndicatorsHandler := connect.NewServerStreamHandler(
		MessageServiceStreamTypingIndicatorsProcedure,
		svc.StreamTypingIndicators,
		connect.WithSchema(messageServiceMethods.ByName("StreamTypingIndicators")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceAddReactionHandler := connect.NewUnaryHandler(
		MessageServiceAddReactionProcedure,
		svc.AddReaction,
		connect.WithSchema(messageServiceMethods.ByName("AddReaction")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceRemoveReactionHandler := connect.NewUnaryHandler(
		MessageServiceRemoveReactionProcedure,
		svc.RemoveReaction,
		connect.WithSchema(messageServiceMethods.ByName("RemoveReaction")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceListReactionsHandler := connect.NewUnaryHandler(
		MessageServiceListReactionsProcedure,
		svc.ListReactions,
		connect.WithSchema(messageServiceMethods.ByName("ListReactions")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUploadAttachmentHandler := connect.NewClientStreamHandler(
		MessageServiceUploadAttachmentProcedure,
		svc.UploadAttachment,
		connect.WithSchema(messageServiceMethods.ByName("UploadAttachment")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceDownloadAttachmentHandler := connect.NewServerStreamHandler(
		MessageServiceDownloadAttachmentProcedure,
		svc.DownloadAttachment,
		connect.WithSchema(messageServiceMethods.ByName("DownloadAttachment")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetMessageStatisticsHandler := connect.NewUnaryHandler(
		MessageServiceGetMessageStatisticsProcedure,
		svc.GetMessageStatistics,
		connect.WithSchema(messageServiceMethods.ByName("GetMessageStatistics")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetNotificationSettingsHandler := connect.NewUnaryHandler(
		MessageServiceGetNotificationSettingsProcedure,
		svc.GetNotificationSettings,
		connect.WithSchema(messageServiceMethods.ByName("GetNotificationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUpdateNotificationSettingsHandler := connect.NewUnaryHandler(
		MessageServiceUpdateNotificationSettingsProcedure,
		svc.UpdateNotificationSettings,
		connect.WithSchema(messageServiceMethods.ByName("UpdateNotificationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceStreamMessagesHandler := connect.NewServerStreamHandler(
		MessageServiceStreamMessagesProcedure,
		svc.StreamMessages,
		connect.WithSchema(messageServiceMethods.ByName("StreamMessages")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceArchiveConversationHandler := connect.NewUnaryHandler(
		MessageServiceArchiveConversationProcedure,
		svc.ArchiveConversation,
		connect.WithSchema(messageServiceMethods.ByName("ArchiveConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUnarchiveConversationHandler := connect.NewUnaryHandler(
		MessageServiceUnarchiveConversationProcedure,
		svc.UnarchiveConversation,
		connect.WithSchema(messageServiceMethods.ByName("UnarchiveConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceMuteConversationHandler := connect.NewUnaryHandler(
		MessageServiceMuteConversationProcedure,
		svc.MuteConversation,
		connect.WithSchema(messageServiceMethods.ByName("MuteConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUnmuteConversationHandler := connect.NewUnaryHandler(
		MessageServiceUnmuteConversationProcedure,
		svc.UnmuteConversation,
		connect.WithSchema(messageServiceMethods.ByName("UnmuteConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServicePinConversationHandler := connect.NewUnaryHandler(
		MessageServicePinConversationProcedure,
		svc.PinConversation,
		connect.WithSchema(messageServiceMethods.ByName("PinConversation")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceUnpinConversationHandler := connect.NewUnaryHandler(
		MessageServiceUnpinConversationProcedure,
		svc.UnpinConversation,
		connect.WithSchema(messageServiceMethods.ByName("UnpinConversation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.message.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceSendMessageProcedure:
			messageServiceSendMessageHandler.ServeHTTP(w, r)
		case MessageServiceGetMessageProcedure:
			messageServiceGetMessageHandler.ServeHTTP(w, r)
		case MessageServiceUpdateMessageProcedure:
			messageServiceUpdateMessageHandler.ServeHTTP(w, r)
		case MessageServiceDeleteMessageProcedure:
			messageServiceDeleteMessageHandler.ServeHTTP(w, r)
		case MessageServiceListMessagesProcedure:
			messageServiceListMessagesHandler.ServeHTTP(w, r)
		case MessageServiceSearchMessagesProcedure:
			messageServiceSearchMessagesHandler.ServeHTTP(w, r)
		case MessageServiceCreateConversationProcedure:
			messageServiceCreateConversationHandler.ServeHTTP(w, r)
		case MessageServiceGetConversationProcedure:
			messageServiceGetConversationHandler.ServeHTTP(w, r)
		case MessageServiceUpdateConversationProcedure:
			messageServiceUpdateConversationHandler.ServeHTTP(w, r)
		case MessageServiceDeleteConversationProcedure:
			messageServiceDeleteConversationHandler.ServeHTTP(w, r)
		case MessageServiceListConversationsProcedure:
			messageServiceListConversationsHandler.ServeHTTP(w, r)
		case MessageServiceAddParticipantsProcedure:
			messageServiceAddParticipantsHandler.ServeHTTP(w, r)
		case MessageServiceRemoveParticipantsProcedure:
			messageServiceRemoveParticipantsHandler.ServeHTTP(w, r)
		case MessageServiceLeaveConversationProcedure:
			messageServiceLeaveConversationHandler.ServeHTTP(w, r)
		case MessageServiceMarkAsReadProcedure:
			messageServiceMarkAsReadHandler.ServeHTTP(w, r)
		case MessageServiceGetReadReceiptsProcedure:
			messageServiceGetReadReceiptsHandler.ServeHTTP(w, r)
		case MessageServiceSendTypingIndicatorProcedure:
			messageServiceSendTypingIndicatorHandler.ServeHTTP(w, r)
		case MessageServiceStreamTypingIndicatorsProcedure:
			messageServiceStreamTypingIndicatorsHandler.ServeHTTP(w, r)
		case MessageServiceAddReactionProcedure:
			messageServiceAddReactionHandler.ServeHTTP(w, r)
		case MessageServiceRemoveReactionProcedure:
			messageServiceRemoveReactionHandler.ServeHTTP(w, r)
		case MessageServiceListReactionsProcedure:
			messageServiceListReactionsHandler.ServeHTTP(w, r)
		case MessageServiceUploadAttachmentProcedure:
			messageServiceUploadAttachmentHandler.ServeHTTP(w, r)
		case MessageServiceDownloadAttachmentProcedure:
			messageServiceDownloadAttachmentHandler.ServeHTTP(w, r)
		case MessageServiceGetMessageStatisticsProcedure:
			messageServiceGetMessageStatisticsHandler.ServeHTTP(w, r)
		case MessageServiceGetNotificationSettingsProcedure:
			messageServiceGetNotificationSettingsHandler.ServeHTTP(w, r)
		case MessageServiceUpdateNotificationSettingsProcedure:
			messageServiceUpdateNotificationSettingsHandler.ServeHTTP(w, r)
		case MessageServiceStreamMessagesProcedure:
			messageServiceStreamMessagesHandler.ServeHTTP(w, r)
		case MessageServiceArchiveConversationProcedure:
			messageServiceArchiveConversationHandler.ServeHTTP(w, r)
		case MessageServiceUnarchiveConversationProcedure:
			messageServiceUnarchiveConversationHandler.ServeHTTP(w, r)
		case MessageServiceMuteConversationProcedure:
			messageServiceMuteConversationHandler.ServeHTTP(w, r)
		case MessageServiceUnmuteConversationProcedure:
			messageServiceUnmuteConversationHandler.ServeHTTP(w, r)
		case MessageServicePinConversationProcedure:
			messageServicePinConversationHandler.ServeHTTP(w, r)
		case MessageServiceUnpinConversationProcedure:
			messageServiceUnpinConversationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.SendMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.GetMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) UpdateMessage(context.Context, *connect.Request[v1.UpdateMessageRequest]) (*connect.Response[v1.UpdateMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UpdateMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.DeleteMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.ListMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) SearchMessages(context.Context, *connect.Request[v1.SearchMessagesRequest]) (*connect.Response[v1.SearchMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.SearchMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) CreateConversation(context.Context, *connect.Request[v1.CreateConversationRequest]) (*connect.Response[v1.CreateConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.CreateConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetConversation(context.Context, *connect.Request[v1.GetConversationRequest]) (*connect.Response[v1.GetConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.GetConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) UpdateConversation(context.Context, *connect.Request[v1.UpdateConversationRequest]) (*connect.Response[v1.UpdateConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UpdateConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteConversation(context.Context, *connect.Request[v1.DeleteConversationRequest]) (*connect.Response[v1.DeleteConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.DeleteConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.ListConversations is not implemented"))
}

func (UnimplementedMessageServiceHandler) AddParticipants(context.Context, *connect.Request[v1.AddParticipantsRequest]) (*connect.Response[v1.AddParticipantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.AddParticipants is not implemented"))
}

func (UnimplementedMessageServiceHandler) RemoveParticipants(context.Context, *connect.Request[v1.RemoveParticipantsRequest]) (*connect.Response[v1.RemoveParticipantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.RemoveParticipants is not implemented"))
}

func (UnimplementedMessageServiceHandler) LeaveConversation(context.Context, *connect.Request[v1.LeaveConversationRequest]) (*connect.Response[v1.LeaveConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.LeaveConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.MarkAsRead is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetReadReceipts(context.Context, *connect.Request[v1.GetReadReceiptsRequest]) (*connect.Response[v1.GetReadReceiptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.GetReadReceipts is not implemented"))
}

func (UnimplementedMessageServiceHandler) SendTypingIndicator(context.Context, *connect.Request[v1.SendTypingIndicatorRequest]) (*connect.Response[v1.SendTypingIndicatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.SendTypingIndicator is not implemented"))
}

func (UnimplementedMessageServiceHandler) StreamTypingIndicators(context.Context, *connect.Request[v1.StreamTypingIndicatorsRequest], *connect.ServerStream[v1.StreamTypingIndicatorsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.StreamTypingIndicators is not implemented"))
}

func (UnimplementedMessageServiceHandler) AddReaction(context.Context, *connect.Request[v1.AddReactionRequest]) (*connect.Response[v1.AddReactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.AddReaction is not implemented"))
}

func (UnimplementedMessageServiceHandler) RemoveReaction(context.Context, *connect.Request[v1.RemoveReactionRequest]) (*connect.Response[v1.RemoveReactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.RemoveReaction is not implemented"))
}

func (UnimplementedMessageServiceHandler) ListReactions(context.Context, *connect.Request[v1.ListReactionsRequest]) (*connect.Response[v1.ListReactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.ListReactions is not implemented"))
}

func (UnimplementedMessageServiceHandler) UploadAttachment(context.Context, *connect.ClientStream[v1.UploadAttachmentRequest]) (*connect.Response[v1.UploadAttachmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UploadAttachment is not implemented"))
}

func (UnimplementedMessageServiceHandler) DownloadAttachment(context.Context, *connect.Request[v1.DownloadAttachmentRequest], *connect.ServerStream[v1.DownloadAttachmentResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.DownloadAttachment is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetMessageStatistics(context.Context, *connect.Request[v1.GetMessageStatisticsRequest]) (*connect.Response[v1.GetMessageStatisticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.GetMessageStatistics is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.GetNotificationSettings is not implemented"))
}

func (UnimplementedMessageServiceHandler) UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UpdateNotificationSettings is not implemented"))
}

func (UnimplementedMessageServiceHandler) StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest], *connect.ServerStream[v1.StreamMessagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.StreamMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) ArchiveConversation(context.Context, *connect.Request[v1.ArchiveConversationRequest]) (*connect.Response[v1.ArchiveConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.ArchiveConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) UnarchiveConversation(context.Context, *connect.Request[v1.UnarchiveConversationRequest]) (*connect.Response[v1.UnarchiveConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UnarchiveConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) MuteConversation(context.Context, *connect.Request[v1.MuteConversationRequest]) (*connect.Response[v1.MuteConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.MuteConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) UnmuteConversation(context.Context, *connect.Request[v1.UnmuteConversationRequest]) (*connect.Response[v1.UnmuteConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UnmuteConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) PinConversation(context.Context, *connect.Request[v1.PinConversationRequest]) (*connect.Response[v1.PinConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.PinConversation is not implemented"))
}

func (UnimplementedMessageServiceHandler) UnpinConversation(context.Context, *connect.Request[v1.UnpinConversationRequest]) (*connect.Response[v1.UnpinConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.message.v1.MessageService.UnpinConversation is not implemented"))
}
