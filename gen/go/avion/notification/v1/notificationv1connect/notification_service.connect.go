// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/notification/v1/notification_service.proto

package notificationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "avion.notification.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceCreateNotificationProcedure is the fully-qualified name of the
	// NotificationService's CreateNotification RPC.
	NotificationServiceCreateNotificationProcedure = "/avion.notification.v1.NotificationService/CreateNotification"
	// NotificationServiceGetNotificationProcedure is the fully-qualified name of the
	// NotificationService's GetNotification RPC.
	NotificationServiceGetNotificationProcedure = "/avion.notification.v1.NotificationService/GetNotification"
	// NotificationServiceListNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListNotifications RPC.
	NotificationServiceListNotificationsProcedure = "/avion.notification.v1.NotificationService/ListNotifications"
	// NotificationServiceMarkAsReadProcedure is the fully-qualified name of the NotificationService's
	// MarkAsRead RPC.
	NotificationServiceMarkAsReadProcedure = "/avion.notification.v1.NotificationService/MarkAsRead"
	// NotificationServiceMarkAllAsReadProcedure is the fully-qualified name of the
	// NotificationService's MarkAllAsRead RPC.
	NotificationServiceMarkAllAsReadProcedure = "/avion.notification.v1.NotificationService/MarkAllAsRead"
	// NotificationServiceBatchMarkAsReadProcedure is the fully-qualified name of the
	// NotificationService's BatchMarkAsRead RPC.
	NotificationServiceBatchMarkAsReadProcedure = "/avion.notification.v1.NotificationService/BatchMarkAsRead"
	// NotificationServiceDeleteNotificationProcedure is the fully-qualified name of the
	// NotificationService's DeleteNotification RPC.
	NotificationServiceDeleteNotificationProcedure = "/avion.notification.v1.NotificationService/DeleteNotification"
	// NotificationServiceBatchDeleteNotificationsProcedure is the fully-qualified name of the
	// NotificationService's BatchDeleteNotifications RPC.
	NotificationServiceBatchDeleteNotificationsProcedure = "/avion.notification.v1.NotificationService/BatchDeleteNotifications"
	// NotificationServiceGetNotificationPreferencesProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationPreferences RPC.
	NotificationServiceGetNotificationPreferencesProcedure = "/avion.notification.v1.NotificationService/GetNotificationPreferences"
	// NotificationServiceUpdateNotificationPreferencesProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotificationPreferences RPC.
	NotificationServiceUpdateNotificationPreferencesProcedure = "/avion.notification.v1.NotificationService/UpdateNotificationPreferences"
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/avion.notification.v1.NotificationService/SendNotification"
	// NotificationServiceStreamNotificationsProcedure is the fully-qualified name of the
	// NotificationService's StreamNotifications RPC.
	NotificationServiceStreamNotificationsProcedure = "/avion.notification.v1.NotificationService/StreamNotifications"
	// NotificationServiceGetUnreadCountProcedure is the fully-qualified name of the
	// NotificationService's GetUnreadCount RPC.
	NotificationServiceGetUnreadCountProcedure = "/avion.notification.v1.NotificationService/GetUnreadCount"
	// NotificationServiceBatchCreateNotificationsProcedure is the fully-qualified name of the
	// NotificationService's BatchCreateNotifications RPC.
	NotificationServiceBatchCreateNotificationsProcedure = "/avion.notification.v1.NotificationService/BatchCreateNotifications"
	// NotificationServiceWebSocketStreamProcedure is the fully-qualified name of the
	// NotificationService's WebSocketStream RPC.
	NotificationServiceWebSocketStreamProcedure = "/avion.notification.v1.NotificationService/WebSocketStream"
	// NotificationServiceManageWebSocketConnectionProcedure is the fully-qualified name of the
	// NotificationService's ManageWebSocketConnection RPC.
	NotificationServiceManageWebSocketConnectionProcedure = "/avion.notification.v1.NotificationService/ManageWebSocketConnection"
	// NotificationServiceListActiveConnectionsProcedure is the fully-qualified name of the
	// NotificationService's ListActiveConnections RPC.
	NotificationServiceListActiveConnectionsProcedure = "/avion.notification.v1.NotificationService/ListActiveConnections"
	// NotificationServiceSendWebSocketMessageProcedure is the fully-qualified name of the
	// NotificationService's SendWebSocketMessage RPC.
	NotificationServiceSendWebSocketMessageProcedure = "/avion.notification.v1.NotificationService/SendWebSocketMessage"
	// NotificationServiceBroadcastWebSocketMessageProcedure is the fully-qualified name of the
	// NotificationService's BroadcastWebSocketMessage RPC.
	NotificationServiceBroadcastWebSocketMessageProcedure = "/avion.notification.v1.NotificationService/BroadcastWebSocketMessage"
	// NotificationServiceRegisterPushDeviceProcedure is the fully-qualified name of the
	// NotificationService's RegisterPushDevice RPC.
	NotificationServiceRegisterPushDeviceProcedure = "/avion.notification.v1.NotificationService/RegisterPushDevice"
	// NotificationServiceUpdatePushDeviceProcedure is the fully-qualified name of the
	// NotificationService's UpdatePushDevice RPC.
	NotificationServiceUpdatePushDeviceProcedure = "/avion.notification.v1.NotificationService/UpdatePushDevice"
	// NotificationServiceDeletePushDeviceProcedure is the fully-qualified name of the
	// NotificationService's DeletePushDevice RPC.
	NotificationServiceDeletePushDeviceProcedure = "/avion.notification.v1.NotificationService/DeletePushDevice"
	// NotificationServiceListPushDevicesProcedure is the fully-qualified name of the
	// NotificationService's ListPushDevices RPC.
	NotificationServiceListPushDevicesProcedure = "/avion.notification.v1.NotificationService/ListPushDevices"
	// NotificationServiceGetPushDeviceProcedure is the fully-qualified name of the
	// NotificationService's GetPushDevice RPC.
	NotificationServiceGetPushDeviceProcedure = "/avion.notification.v1.NotificationService/GetPushDevice"
	// NotificationServiceCreateNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's CreateNotificationTemplate RPC.
	NotificationServiceCreateNotificationTemplateProcedure = "/avion.notification.v1.NotificationService/CreateNotificationTemplate"
	// NotificationServiceGetNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationTemplate RPC.
	NotificationServiceGetNotificationTemplateProcedure = "/avion.notification.v1.NotificationService/GetNotificationTemplate"
	// NotificationServiceUpdateNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotificationTemplate RPC.
	NotificationServiceUpdateNotificationTemplateProcedure = "/avion.notification.v1.NotificationService/UpdateNotificationTemplate"
	// NotificationServiceDeleteNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's DeleteNotificationTemplate RPC.
	NotificationServiceDeleteNotificationTemplateProcedure = "/avion.notification.v1.NotificationService/DeleteNotificationTemplate"
	// NotificationServiceListNotificationTemplatesProcedure is the fully-qualified name of the
	// NotificationService's ListNotificationTemplates RPC.
	NotificationServiceListNotificationTemplatesProcedure = "/avion.notification.v1.NotificationService/ListNotificationTemplates"
)

// NotificationServiceClient is a client for the avion.notification.v1.NotificationService service.
type NotificationServiceClient interface {
	// 通知作成
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// 通知取得
	GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)
	// 通知一覧取得
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	// 既読マーク
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// 全て既読マーク
	MarkAllAsRead(context.Context, *connect.Request[v1.MarkAllAsReadRequest]) (*connect.Response[v1.MarkAllAsReadResponse], error)
	// バッチ既読マーク
	BatchMarkAsRead(context.Context, *connect.Request[v1.BatchMarkAsReadRequest]) (*connect.Response[v1.BatchMarkAsReadResponse], error)
	// 通知削除
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
	// バッチ通知削除
	BatchDeleteNotifications(context.Context, *connect.Request[v1.BatchDeleteNotificationsRequest]) (*connect.Response[v1.BatchDeleteNotificationsResponse], error)
	// 通知設定取得
	GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error)
	// 通知設定更新
	UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error)
	// 通知送信（内部用）
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
	// 通知ストリーム（SSE/WebSocket用）
	StreamNotifications(context.Context, *connect.Request[v1.StreamNotificationsRequest]) (*connect.ServerStreamForClient[v1.StreamNotificationsResponse], error)
	// 未読数取得
	GetUnreadCount(context.Context, *connect.Request[v1.GetUnreadCountRequest]) (*connect.Response[v1.GetUnreadCountResponse], error)
	// バッチ通知作成
	BatchCreateNotifications(context.Context, *connect.Request[v1.BatchCreateNotificationsRequest]) (*connect.Response[v1.BatchCreateNotificationsResponse], error)
	// WebSocket関連のRPC
	// WebSocketストリーム（双方向ストリーミング）
	WebSocketStream(context.Context) *connect.BidiStreamForClient[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse]
	// WebSocket接続管理
	ManageWebSocketConnection(context.Context, *connect.Request[v1.ManageWebSocketConnectionRequest]) (*connect.Response[v1.ManageWebSocketConnectionResponse], error)
	// アクティブ接続一覧取得
	ListActiveConnections(context.Context, *connect.Request[v1.ListActiveConnectionsRequest]) (*connect.Response[v1.ListActiveConnectionsResponse], error)
	// 特定ユーザーへのメッセージ送信
	SendWebSocketMessage(context.Context, *connect.Request[v1.SendWebSocketMessageRequest]) (*connect.Response[v1.SendWebSocketMessageResponse], error)
	// ブロードキャストメッセージ送信
	BroadcastWebSocketMessage(context.Context, *connect.Request[v1.BroadcastWebSocketMessageRequest]) (*connect.Response[v1.BroadcastWebSocketMessageResponse], error)
	// プッシュデバイス管理
	// プッシュデバイス登録
	RegisterPushDevice(context.Context, *connect.Request[v1.RegisterPushDeviceRequest]) (*connect.Response[v1.RegisterPushDeviceResponse], error)
	// プッシュデバイス更新
	UpdatePushDevice(context.Context, *connect.Request[v1.UpdatePushDeviceRequest]) (*connect.Response[v1.UpdatePushDeviceResponse], error)
	// プッシュデバイス削除
	DeletePushDevice(context.Context, *connect.Request[v1.DeletePushDeviceRequest]) (*connect.Response[v1.DeletePushDeviceResponse], error)
	// プッシュデバイス一覧取得
	ListPushDevices(context.Context, *connect.Request[v1.ListPushDevicesRequest]) (*connect.Response[v1.ListPushDevicesResponse], error)
	// プッシュデバイス取得
	GetPushDevice(context.Context, *connect.Request[v1.GetPushDeviceRequest]) (*connect.Response[v1.GetPushDeviceResponse], error)
	// 通知テンプレート管理
	// テンプレート作成
	CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error)
	// テンプレート取得
	GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error)
	// テンプレート更新
	UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error)
	// テンプレート削除
	DeleteNotificationTemplate(context.Context, *connect.Request[v1.DeleteNotificationTemplateRequest]) (*connect.Response[v1.DeleteNotificationTemplateResponse], error)
	// テンプレート一覧取得
	ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// avion.notification.v1.NotificationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_avion_notification_v1_notification_service_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		createNotification: connect.NewClient[v1.CreateNotificationRequest, v1.CreateNotificationResponse](
			httpClient,
			baseURL+NotificationServiceCreateNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("CreateNotification")),
			connect.WithClientOptions(opts...),
		),
		getNotification: connect.NewClient[v1.GetNotificationRequest, v1.GetNotificationResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotification")),
			connect.WithClientOptions(opts...),
		),
		listNotifications: connect.NewClient[v1.ListNotificationsRequest, v1.ListNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
			connect.WithClientOptions(opts...),
		),
		markAsRead: connect.NewClient[v1.MarkAsReadRequest, v1.MarkAsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkAsRead")),
			connect.WithClientOptions(opts...),
		),
		markAllAsRead: connect.NewClient[v1.MarkAllAsReadRequest, v1.MarkAllAsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkAllAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkAllAsRead")),
			connect.WithClientOptions(opts...),
		),
		batchMarkAsRead: connect.NewClient[v1.BatchMarkAsReadRequest, v1.BatchMarkAsReadResponse](
			httpClient,
			baseURL+NotificationServiceBatchMarkAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("BatchMarkAsRead")),
			connect.WithClientOptions(opts...),
		),
		deleteNotification: connect.NewClient[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse](
			httpClient,
			baseURL+NotificationServiceDeleteNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("DeleteNotification")),
			connect.WithClientOptions(opts...),
		),
		batchDeleteNotifications: connect.NewClient[v1.BatchDeleteNotificationsRequest, v1.BatchDeleteNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceBatchDeleteNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("BatchDeleteNotifications")),
			connect.WithClientOptions(opts...),
		),
		getNotificationPreferences: connect.NewClient[v1.GetNotificationPreferencesRequest, v1.GetNotificationPreferencesResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationPreferencesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotificationPreferences")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationPreferences: connect.NewClient[v1.UpdateNotificationPreferencesRequest, v1.UpdateNotificationPreferencesResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationPreferencesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationPreferences")),
			connect.WithClientOptions(opts...),
		),
		sendNotification: connect.NewClient[v1.SendNotificationRequest, v1.SendNotificationResponse](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
			connect.WithClientOptions(opts...),
		),
		streamNotifications: connect.NewClient[v1.StreamNotificationsRequest, v1.StreamNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceStreamNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("StreamNotifications")),
			connect.WithClientOptions(opts...),
		),
		getUnreadCount: connect.NewClient[v1.GetUnreadCountRequest, v1.GetUnreadCountResponse](
			httpClient,
			baseURL+NotificationServiceGetUnreadCountProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetUnreadCount")),
			connect.WithClientOptions(opts...),
		),
		batchCreateNotifications: connect.NewClient[v1.BatchCreateNotificationsRequest, v1.BatchCreateNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceBatchCreateNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("BatchCreateNotifications")),
			connect.WithClientOptions(opts...),
		),
		webSocketStream: connect.NewClient[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse](
			httpClient,
			baseURL+NotificationServiceWebSocketStreamProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("WebSocketStream")),
			connect.WithClientOptions(opts...),
		),
		manageWebSocketConnection: connect.NewClient[v1.ManageWebSocketConnectionRequest, v1.ManageWebSocketConnectionResponse](
			httpClient,
			baseURL+NotificationServiceManageWebSocketConnectionProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ManageWebSocketConnection")),
			connect.WithClientOptions(opts...),
		),
		listActiveConnections: connect.NewClient[v1.ListActiveConnectionsRequest, v1.ListActiveConnectionsResponse](
			httpClient,
			baseURL+NotificationServiceListActiveConnectionsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListActiveConnections")),
			connect.WithClientOptions(opts...),
		),
		sendWebSocketMessage: connect.NewClient[v1.SendWebSocketMessageRequest, v1.SendWebSocketMessageResponse](
			httpClient,
			baseURL+NotificationServiceSendWebSocketMessageProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("SendWebSocketMessage")),
			connect.WithClientOptions(opts...),
		),
		broadcastWebSocketMessage: connect.NewClient[v1.BroadcastWebSocketMessageRequest, v1.BroadcastWebSocketMessageResponse](
			httpClient,
			baseURL+NotificationServiceBroadcastWebSocketMessageProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("BroadcastWebSocketMessage")),
			connect.WithClientOptions(opts...),
		),
		registerPushDevice: connect.NewClient[v1.RegisterPushDeviceRequest, v1.RegisterPushDeviceResponse](
			httpClient,
			baseURL+NotificationServiceRegisterPushDeviceProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("RegisterPushDevice")),
			connect.WithClientOptions(opts...),
		),
		updatePushDevice: connect.NewClient[v1.UpdatePushDeviceRequest, v1.UpdatePushDeviceResponse](
			httpClient,
			baseURL+NotificationServiceUpdatePushDeviceProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UpdatePushDevice")),
			connect.WithClientOptions(opts...),
		),
		deletePushDevice: connect.NewClient[v1.DeletePushDeviceRequest, v1.DeletePushDeviceResponse](
			httpClient,
			baseURL+NotificationServiceDeletePushDeviceProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("DeletePushDevice")),
			connect.WithClientOptions(opts...),
		),
		listPushDevices: connect.NewClient[v1.ListPushDevicesRequest, v1.ListPushDevicesResponse](
			httpClient,
			baseURL+NotificationServiceListPushDevicesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListPushDevices")),
			connect.WithClientOptions(opts...),
		),
		getPushDevice: connect.NewClient[v1.GetPushDeviceRequest, v1.GetPushDeviceResponse](
			httpClient,
			baseURL+NotificationServiceGetPushDeviceProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetPushDevice")),
			connect.WithClientOptions(opts...),
		),
		createNotificationTemplate: connect.NewClient[v1.CreateNotificationTemplateRequest, v1.CreateNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceCreateNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("CreateNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		getNotificationTemplate: connect.NewClient[v1.GetNotificationTemplateRequest, v1.GetNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationTemplate: connect.NewClient[v1.UpdateNotificationTemplateRequest, v1.UpdateNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteNotificationTemplate: connect.NewClient[v1.DeleteNotificationTemplateRequest, v1.DeleteNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceDeleteNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("DeleteNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		listNotificationTemplates: connect.NewClient[v1.ListNotificationTemplatesRequest, v1.ListNotificationTemplatesResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationTemplatesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotificationTemplates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	createNotification            *connect.Client[v1.CreateNotificationRequest, v1.CreateNotificationResponse]
	getNotification               *connect.Client[v1.GetNotificationRequest, v1.GetNotificationResponse]
	listNotifications             *connect.Client[v1.ListNotificationsRequest, v1.ListNotificationsResponse]
	markAsRead                    *connect.Client[v1.MarkAsReadRequest, v1.MarkAsReadResponse]
	markAllAsRead                 *connect.Client[v1.MarkAllAsReadRequest, v1.MarkAllAsReadResponse]
	batchMarkAsRead               *connect.Client[v1.BatchMarkAsReadRequest, v1.BatchMarkAsReadResponse]
	deleteNotification            *connect.Client[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse]
	batchDeleteNotifications      *connect.Client[v1.BatchDeleteNotificationsRequest, v1.BatchDeleteNotificationsResponse]
	getNotificationPreferences    *connect.Client[v1.GetNotificationPreferencesRequest, v1.GetNotificationPreferencesResponse]
	updateNotificationPreferences *connect.Client[v1.UpdateNotificationPreferencesRequest, v1.UpdateNotificationPreferencesResponse]
	sendNotification              *connect.Client[v1.SendNotificationRequest, v1.SendNotificationResponse]
	streamNotifications           *connect.Client[v1.StreamNotificationsRequest, v1.StreamNotificationsResponse]
	getUnreadCount                *connect.Client[v1.GetUnreadCountRequest, v1.GetUnreadCountResponse]
	batchCreateNotifications      *connect.Client[v1.BatchCreateNotificationsRequest, v1.BatchCreateNotificationsResponse]
	webSocketStream               *connect.Client[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse]
	manageWebSocketConnection     *connect.Client[v1.ManageWebSocketConnectionRequest, v1.ManageWebSocketConnectionResponse]
	listActiveConnections         *connect.Client[v1.ListActiveConnectionsRequest, v1.ListActiveConnectionsResponse]
	sendWebSocketMessage          *connect.Client[v1.SendWebSocketMessageRequest, v1.SendWebSocketMessageResponse]
	broadcastWebSocketMessage     *connect.Client[v1.BroadcastWebSocketMessageRequest, v1.BroadcastWebSocketMessageResponse]
	registerPushDevice            *connect.Client[v1.RegisterPushDeviceRequest, v1.RegisterPushDeviceResponse]
	updatePushDevice              *connect.Client[v1.UpdatePushDeviceRequest, v1.UpdatePushDeviceResponse]
	deletePushDevice              *connect.Client[v1.DeletePushDeviceRequest, v1.DeletePushDeviceResponse]
	listPushDevices               *connect.Client[v1.ListPushDevicesRequest, v1.ListPushDevicesResponse]
	getPushDevice                 *connect.Client[v1.GetPushDeviceRequest, v1.GetPushDeviceResponse]
	createNotificationTemplate    *connect.Client[v1.CreateNotificationTemplateRequest, v1.CreateNotificationTemplateResponse]
	getNotificationTemplate       *connect.Client[v1.GetNotificationTemplateRequest, v1.GetNotificationTemplateResponse]
	updateNotificationTemplate    *connect.Client[v1.UpdateNotificationTemplateRequest, v1.UpdateNotificationTemplateResponse]
	deleteNotificationTemplate    *connect.Client[v1.DeleteNotificationTemplateRequest, v1.DeleteNotificationTemplateResponse]
	listNotificationTemplates     *connect.Client[v1.ListNotificationTemplatesRequest, v1.ListNotificationTemplatesResponse]
}

// CreateNotification calls avion.notification.v1.NotificationService.CreateNotification.
func (c *notificationServiceClient) CreateNotification(ctx context.Context, req *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return c.createNotification.CallUnary(ctx, req)
}

// GetNotification calls avion.notification.v1.NotificationService.GetNotification.
func (c *notificationServiceClient) GetNotification(ctx context.Context, req *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {
	return c.getNotification.CallUnary(ctx, req)
}

// ListNotifications calls avion.notification.v1.NotificationService.ListNotifications.
func (c *notificationServiceClient) ListNotifications(ctx context.Context, req *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return c.listNotifications.CallUnary(ctx, req)
}

// MarkAsRead calls avion.notification.v1.NotificationService.MarkAsRead.
func (c *notificationServiceClient) MarkAsRead(ctx context.Context, req *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return c.markAsRead.CallUnary(ctx, req)
}

// MarkAllAsRead calls avion.notification.v1.NotificationService.MarkAllAsRead.
func (c *notificationServiceClient) MarkAllAsRead(ctx context.Context, req *connect.Request[v1.MarkAllAsReadRequest]) (*connect.Response[v1.MarkAllAsReadResponse], error) {
	return c.markAllAsRead.CallUnary(ctx, req)
}

// BatchMarkAsRead calls avion.notification.v1.NotificationService.BatchMarkAsRead.
func (c *notificationServiceClient) BatchMarkAsRead(ctx context.Context, req *connect.Request[v1.BatchMarkAsReadRequest]) (*connect.Response[v1.BatchMarkAsReadResponse], error) {
	return c.batchMarkAsRead.CallUnary(ctx, req)
}

// DeleteNotification calls avion.notification.v1.NotificationService.DeleteNotification.
func (c *notificationServiceClient) DeleteNotification(ctx context.Context, req *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return c.deleteNotification.CallUnary(ctx, req)
}

// BatchDeleteNotifications calls
// avion.notification.v1.NotificationService.BatchDeleteNotifications.
func (c *notificationServiceClient) BatchDeleteNotifications(ctx context.Context, req *connect.Request[v1.BatchDeleteNotificationsRequest]) (*connect.Response[v1.BatchDeleteNotificationsResponse], error) {
	return c.batchDeleteNotifications.CallUnary(ctx, req)
}

// GetNotificationPreferences calls
// avion.notification.v1.NotificationService.GetNotificationPreferences.
func (c *notificationServiceClient) GetNotificationPreferences(ctx context.Context, req *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error) {
	return c.getNotificationPreferences.CallUnary(ctx, req)
}

// UpdateNotificationPreferences calls
// avion.notification.v1.NotificationService.UpdateNotificationPreferences.
func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, req *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error) {
	return c.updateNotificationPreferences.CallUnary(ctx, req)
}

// SendNotification calls avion.notification.v1.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// StreamNotifications calls avion.notification.v1.NotificationService.StreamNotifications.
func (c *notificationServiceClient) StreamNotifications(ctx context.Context, req *connect.Request[v1.StreamNotificationsRequest]) (*connect.ServerStreamForClient[v1.StreamNotificationsResponse], error) {
	return c.streamNotifications.CallServerStream(ctx, req)
}

// GetUnreadCount calls avion.notification.v1.NotificationService.GetUnreadCount.
func (c *notificationServiceClient) GetUnreadCount(ctx context.Context, req *connect.Request[v1.GetUnreadCountRequest]) (*connect.Response[v1.GetUnreadCountResponse], error) {
	return c.getUnreadCount.CallUnary(ctx, req)
}

// BatchCreateNotifications calls
// avion.notification.v1.NotificationService.BatchCreateNotifications.
func (c *notificationServiceClient) BatchCreateNotifications(ctx context.Context, req *connect.Request[v1.BatchCreateNotificationsRequest]) (*connect.Response[v1.BatchCreateNotificationsResponse], error) {
	return c.batchCreateNotifications.CallUnary(ctx, req)
}

// WebSocketStream calls avion.notification.v1.NotificationService.WebSocketStream.
func (c *notificationServiceClient) WebSocketStream(ctx context.Context) *connect.BidiStreamForClient[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse] {
	return c.webSocketStream.CallBidiStream(ctx)
}

// ManageWebSocketConnection calls
// avion.notification.v1.NotificationService.ManageWebSocketConnection.
func (c *notificationServiceClient) ManageWebSocketConnection(ctx context.Context, req *connect.Request[v1.ManageWebSocketConnectionRequest]) (*connect.Response[v1.ManageWebSocketConnectionResponse], error) {
	return c.manageWebSocketConnection.CallUnary(ctx, req)
}

// ListActiveConnections calls avion.notification.v1.NotificationService.ListActiveConnections.
func (c *notificationServiceClient) ListActiveConnections(ctx context.Context, req *connect.Request[v1.ListActiveConnectionsRequest]) (*connect.Response[v1.ListActiveConnectionsResponse], error) {
	return c.listActiveConnections.CallUnary(ctx, req)
}

// SendWebSocketMessage calls avion.notification.v1.NotificationService.SendWebSocketMessage.
func (c *notificationServiceClient) SendWebSocketMessage(ctx context.Context, req *connect.Request[v1.SendWebSocketMessageRequest]) (*connect.Response[v1.SendWebSocketMessageResponse], error) {
	return c.sendWebSocketMessage.CallUnary(ctx, req)
}

// BroadcastWebSocketMessage calls
// avion.notification.v1.NotificationService.BroadcastWebSocketMessage.
func (c *notificationServiceClient) BroadcastWebSocketMessage(ctx context.Context, req *connect.Request[v1.BroadcastWebSocketMessageRequest]) (*connect.Response[v1.BroadcastWebSocketMessageResponse], error) {
	return c.broadcastWebSocketMessage.CallUnary(ctx, req)
}

// RegisterPushDevice calls avion.notification.v1.NotificationService.RegisterPushDevice.
func (c *notificationServiceClient) RegisterPushDevice(ctx context.Context, req *connect.Request[v1.RegisterPushDeviceRequest]) (*connect.Response[v1.RegisterPushDeviceResponse], error) {
	return c.registerPushDevice.CallUnary(ctx, req)
}

// UpdatePushDevice calls avion.notification.v1.NotificationService.UpdatePushDevice.
func (c *notificationServiceClient) UpdatePushDevice(ctx context.Context, req *connect.Request[v1.UpdatePushDeviceRequest]) (*connect.Response[v1.UpdatePushDeviceResponse], error) {
	return c.updatePushDevice.CallUnary(ctx, req)
}

// DeletePushDevice calls avion.notification.v1.NotificationService.DeletePushDevice.
func (c *notificationServiceClient) DeletePushDevice(ctx context.Context, req *connect.Request[v1.DeletePushDeviceRequest]) (*connect.Response[v1.DeletePushDeviceResponse], error) {
	return c.deletePushDevice.CallUnary(ctx, req)
}

// ListPushDevices calls avion.notification.v1.NotificationService.ListPushDevices.
func (c *notificationServiceClient) ListPushDevices(ctx context.Context, req *connect.Request[v1.ListPushDevicesRequest]) (*connect.Response[v1.ListPushDevicesResponse], error) {
	return c.listPushDevices.CallUnary(ctx, req)
}

// GetPushDevice calls avion.notification.v1.NotificationService.GetPushDevice.
func (c *notificationServiceClient) GetPushDevice(ctx context.Context, req *connect.Request[v1.GetPushDeviceRequest]) (*connect.Response[v1.GetPushDeviceResponse], error) {
	return c.getPushDevice.CallUnary(ctx, req)
}

// CreateNotificationTemplate calls
// avion.notification.v1.NotificationService.CreateNotificationTemplate.
func (c *notificationServiceClient) CreateNotificationTemplate(ctx context.Context, req *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error) {
	return c.createNotificationTemplate.CallUnary(ctx, req)
}

// GetNotificationTemplate calls avion.notification.v1.NotificationService.GetNotificationTemplate.
func (c *notificationServiceClient) GetNotificationTemplate(ctx context.Context, req *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error) {
	return c.getNotificationTemplate.CallUnary(ctx, req)
}

// UpdateNotificationTemplate calls
// avion.notification.v1.NotificationService.UpdateNotificationTemplate.
func (c *notificationServiceClient) UpdateNotificationTemplate(ctx context.Context, req *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error) {
	return c.updateNotificationTemplate.CallUnary(ctx, req)
}

// DeleteNotificationTemplate calls
// avion.notification.v1.NotificationService.DeleteNotificationTemplate.
func (c *notificationServiceClient) DeleteNotificationTemplate(ctx context.Context, req *connect.Request[v1.DeleteNotificationTemplateRequest]) (*connect.Response[v1.DeleteNotificationTemplateResponse], error) {
	return c.deleteNotificationTemplate.CallUnary(ctx, req)
}

// ListNotificationTemplates calls
// avion.notification.v1.NotificationService.ListNotificationTemplates.
func (c *notificationServiceClient) ListNotificationTemplates(ctx context.Context, req *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error) {
	return c.listNotificationTemplates.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the avion.notification.v1.NotificationService
// service.
type NotificationServiceHandler interface {
	// 通知作成
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// 通知取得
	GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)
	// 通知一覧取得
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	// 既読マーク
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// 全て既読マーク
	MarkAllAsRead(context.Context, *connect.Request[v1.MarkAllAsReadRequest]) (*connect.Response[v1.MarkAllAsReadResponse], error)
	// バッチ既読マーク
	BatchMarkAsRead(context.Context, *connect.Request[v1.BatchMarkAsReadRequest]) (*connect.Response[v1.BatchMarkAsReadResponse], error)
	// 通知削除
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
	// バッチ通知削除
	BatchDeleteNotifications(context.Context, *connect.Request[v1.BatchDeleteNotificationsRequest]) (*connect.Response[v1.BatchDeleteNotificationsResponse], error)
	// 通知設定取得
	GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error)
	// 通知設定更新
	UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error)
	// 通知送信（内部用）
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
	// 通知ストリーム（SSE/WebSocket用）
	StreamNotifications(context.Context, *connect.Request[v1.StreamNotificationsRequest], *connect.ServerStream[v1.StreamNotificationsResponse]) error
	// 未読数取得
	GetUnreadCount(context.Context, *connect.Request[v1.GetUnreadCountRequest]) (*connect.Response[v1.GetUnreadCountResponse], error)
	// バッチ通知作成
	BatchCreateNotifications(context.Context, *connect.Request[v1.BatchCreateNotificationsRequest]) (*connect.Response[v1.BatchCreateNotificationsResponse], error)
	// WebSocket関連のRPC
	// WebSocketストリーム（双方向ストリーミング）
	WebSocketStream(context.Context, *connect.BidiStream[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse]) error
	// WebSocket接続管理
	ManageWebSocketConnection(context.Context, *connect.Request[v1.ManageWebSocketConnectionRequest]) (*connect.Response[v1.ManageWebSocketConnectionResponse], error)
	// アクティブ接続一覧取得
	ListActiveConnections(context.Context, *connect.Request[v1.ListActiveConnectionsRequest]) (*connect.Response[v1.ListActiveConnectionsResponse], error)
	// 特定ユーザーへのメッセージ送信
	SendWebSocketMessage(context.Context, *connect.Request[v1.SendWebSocketMessageRequest]) (*connect.Response[v1.SendWebSocketMessageResponse], error)
	// ブロードキャストメッセージ送信
	BroadcastWebSocketMessage(context.Context, *connect.Request[v1.BroadcastWebSocketMessageRequest]) (*connect.Response[v1.BroadcastWebSocketMessageResponse], error)
	// プッシュデバイス管理
	// プッシュデバイス登録
	RegisterPushDevice(context.Context, *connect.Request[v1.RegisterPushDeviceRequest]) (*connect.Response[v1.RegisterPushDeviceResponse], error)
	// プッシュデバイス更新
	UpdatePushDevice(context.Context, *connect.Request[v1.UpdatePushDeviceRequest]) (*connect.Response[v1.UpdatePushDeviceResponse], error)
	// プッシュデバイス削除
	DeletePushDevice(context.Context, *connect.Request[v1.DeletePushDeviceRequest]) (*connect.Response[v1.DeletePushDeviceResponse], error)
	// プッシュデバイス一覧取得
	ListPushDevices(context.Context, *connect.Request[v1.ListPushDevicesRequest]) (*connect.Response[v1.ListPushDevicesResponse], error)
	// プッシュデバイス取得
	GetPushDevice(context.Context, *connect.Request[v1.GetPushDeviceRequest]) (*connect.Response[v1.GetPushDeviceResponse], error)
	// 通知テンプレート管理
	// テンプレート作成
	CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error)
	// テンプレート取得
	GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error)
	// テンプレート更新
	UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error)
	// テンプレート削除
	DeleteNotificationTemplate(context.Context, *connect.Request[v1.DeleteNotificationTemplateRequest]) (*connect.Response[v1.DeleteNotificationTemplateResponse], error)
	// テンプレート一覧取得
	ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_avion_notification_v1_notification_service_proto.Services().ByName("NotificationService").Methods()
	notificationServiceCreateNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceCreateNotificationProcedure,
		svc.CreateNotification,
		connect.WithSchema(notificationServiceMethods.ByName("CreateNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationProcedure,
		svc.GetNotification,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationsProcedure,
		svc.ListNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkAsReadProcedure,
		svc.MarkAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkAllAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkAllAsReadProcedure,
		svc.MarkAllAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkAllAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceBatchMarkAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceBatchMarkAsReadProcedure,
		svc.BatchMarkAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("BatchMarkAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeleteNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceDeleteNotificationProcedure,
		svc.DeleteNotification,
		connect.WithSchema(notificationServiceMethods.ByName("DeleteNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceBatchDeleteNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceBatchDeleteNotificationsProcedure,
		svc.BatchDeleteNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("BatchDeleteNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationPreferencesHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationPreferencesProcedure,
		svc.GetNotificationPreferences,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotificationPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdateNotificationPreferencesHandler := connect.NewUnaryHandler(
		NotificationServiceUpdateNotificationPreferencesProcedure,
		svc.UpdateNotificationPreferences,
		connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceStreamNotificationsHandler := connect.NewServerStreamHandler(
		NotificationServiceStreamNotificationsProcedure,
		svc.StreamNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("StreamNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetUnreadCountHandler := connect.NewUnaryHandler(
		NotificationServiceGetUnreadCountProcedure,
		svc.GetUnreadCount,
		connect.WithSchema(notificationServiceMethods.ByName("GetUnreadCount")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceBatchCreateNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceBatchCreateNotificationsProcedure,
		svc.BatchCreateNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("BatchCreateNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceWebSocketStreamHandler := connect.NewBidiStreamHandler(
		NotificationServiceWebSocketStreamProcedure,
		svc.WebSocketStream,
		connect.WithSchema(notificationServiceMethods.ByName("WebSocketStream")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceManageWebSocketConnectionHandler := connect.NewUnaryHandler(
		NotificationServiceManageWebSocketConnectionProcedure,
		svc.ManageWebSocketConnection,
		connect.WithSchema(notificationServiceMethods.ByName("ManageWebSocketConnection")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListActiveConnectionsHandler := connect.NewUnaryHandler(
		NotificationServiceListActiveConnectionsProcedure,
		svc.ListActiveConnections,
		connect.WithSchema(notificationServiceMethods.ByName("ListActiveConnections")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendWebSocketMessageHandler := connect.NewUnaryHandler(
		NotificationServiceSendWebSocketMessageProcedure,
		svc.SendWebSocketMessage,
		connect.WithSchema(notificationServiceMethods.ByName("SendWebSocketMessage")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceBroadcastWebSocketMessageHandler := connect.NewUnaryHandler(
		NotificationServiceBroadcastWebSocketMessageProcedure,
		svc.BroadcastWebSocketMessage,
		connect.WithSchema(notificationServiceMethods.ByName("BroadcastWebSocketMessage")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceRegisterPushDeviceHandler := connect.NewUnaryHandler(
		NotificationServiceRegisterPushDeviceProcedure,
		svc.RegisterPushDevice,
		connect.WithSchema(notificationServiceMethods.ByName("RegisterPushDevice")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdatePushDeviceHandler := connect.NewUnaryHandler(
		NotificationServiceUpdatePushDeviceProcedure,
		svc.UpdatePushDevice,
		connect.WithSchema(notificationServiceMethods.ByName("UpdatePushDevice")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeletePushDeviceHandler := connect.NewUnaryHandler(
		NotificationServiceDeletePushDeviceProcedure,
		svc.DeletePushDevice,
		connect.WithSchema(notificationServiceMethods.ByName("DeletePushDevice")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListPushDevicesHandler := connect.NewUnaryHandler(
		NotificationServiceListPushDevicesProcedure,
		svc.ListPushDevices,
		connect.WithSchema(notificationServiceMethods.ByName("ListPushDevices")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetPushDeviceHandler := connect.NewUnaryHandler(
		NotificationServiceGetPushDeviceProcedure,
		svc.GetPushDevice,
		connect.WithSchema(notificationServiceMethods.ByName("GetPushDevice")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceCreateNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceCreateNotificationTemplateProcedure,
		svc.CreateNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("CreateNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationTemplateProcedure,
		svc.GetNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdateNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceUpdateNotificationTemplateProcedure,
		svc.UpdateNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeleteNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceDeleteNotificationTemplateProcedure,
		svc.DeleteNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("DeleteNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListNotificationTemplatesHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationTemplatesProcedure,
		svc.ListNotificationTemplates,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotificationTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.notification.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceCreateNotificationProcedure:
			notificationServiceCreateNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationProcedure:
			notificationServiceGetNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceListNotificationsProcedure:
			notificationServiceListNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceMarkAsReadProcedure:
			notificationServiceMarkAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceMarkAllAsReadProcedure:
			notificationServiceMarkAllAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceBatchMarkAsReadProcedure:
			notificationServiceBatchMarkAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceDeleteNotificationProcedure:
			notificationServiceDeleteNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceBatchDeleteNotificationsProcedure:
			notificationServiceBatchDeleteNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationPreferencesProcedure:
			notificationServiceGetNotificationPreferencesHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationPreferencesProcedure:
			notificationServiceUpdateNotificationPreferencesHandler.ServeHTTP(w, r)
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceStreamNotificationsProcedure:
			notificationServiceStreamNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceGetUnreadCountProcedure:
			notificationServiceGetUnreadCountHandler.ServeHTTP(w, r)
		case NotificationServiceBatchCreateNotificationsProcedure:
			notificationServiceBatchCreateNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceWebSocketStreamProcedure:
			notificationServiceWebSocketStreamHandler.ServeHTTP(w, r)
		case NotificationServiceManageWebSocketConnectionProcedure:
			notificationServiceManageWebSocketConnectionHandler.ServeHTTP(w, r)
		case NotificationServiceListActiveConnectionsProcedure:
			notificationServiceListActiveConnectionsHandler.ServeHTTP(w, r)
		case NotificationServiceSendWebSocketMessageProcedure:
			notificationServiceSendWebSocketMessageHandler.ServeHTTP(w, r)
		case NotificationServiceBroadcastWebSocketMessageProcedure:
			notificationServiceBroadcastWebSocketMessageHandler.ServeHTTP(w, r)
		case NotificationServiceRegisterPushDeviceProcedure:
			notificationServiceRegisterPushDeviceHandler.ServeHTTP(w, r)
		case NotificationServiceUpdatePushDeviceProcedure:
			notificationServiceUpdatePushDeviceHandler.ServeHTTP(w, r)
		case NotificationServiceDeletePushDeviceProcedure:
			notificationServiceDeletePushDeviceHandler.ServeHTTP(w, r)
		case NotificationServiceListPushDevicesProcedure:
			notificationServiceListPushDevicesHandler.ServeHTTP(w, r)
		case NotificationServiceGetPushDeviceProcedure:
			notificationServiceGetPushDeviceHandler.ServeHTTP(w, r)
		case NotificationServiceCreateNotificationTemplateProcedure:
			notificationServiceCreateNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationTemplateProcedure:
			notificationServiceGetNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationTemplateProcedure:
			notificationServiceUpdateNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceDeleteNotificationTemplateProcedure:
			notificationServiceDeleteNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceListNotificationTemplatesProcedure:
			notificationServiceListNotificationTemplatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.CreateNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.GetNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.ListNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.MarkAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkAllAsRead(context.Context, *connect.Request[v1.MarkAllAsReadRequest]) (*connect.Response[v1.MarkAllAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.MarkAllAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) BatchMarkAsRead(context.Context, *connect.Request[v1.BatchMarkAsReadRequest]) (*connect.Response[v1.BatchMarkAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.BatchMarkAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.DeleteNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) BatchDeleteNotifications(context.Context, *connect.Request[v1.BatchDeleteNotificationsRequest]) (*connect.Response[v1.BatchDeleteNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.BatchDeleteNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.GetNotificationPreferences is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.UpdateNotificationPreferences is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.SendNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) StreamNotifications(context.Context, *connect.Request[v1.StreamNotificationsRequest], *connect.ServerStream[v1.StreamNotificationsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.StreamNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetUnreadCount(context.Context, *connect.Request[v1.GetUnreadCountRequest]) (*connect.Response[v1.GetUnreadCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.GetUnreadCount is not implemented"))
}

func (UnimplementedNotificationServiceHandler) BatchCreateNotifications(context.Context, *connect.Request[v1.BatchCreateNotificationsRequest]) (*connect.Response[v1.BatchCreateNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.BatchCreateNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) WebSocketStream(context.Context, *connect.BidiStream[v1.WebSocketStreamRequest, v1.WebSocketStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.WebSocketStream is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ManageWebSocketConnection(context.Context, *connect.Request[v1.ManageWebSocketConnectionRequest]) (*connect.Response[v1.ManageWebSocketConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.ManageWebSocketConnection is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListActiveConnections(context.Context, *connect.Request[v1.ListActiveConnectionsRequest]) (*connect.Response[v1.ListActiveConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.ListActiveConnections is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendWebSocketMessage(context.Context, *connect.Request[v1.SendWebSocketMessageRequest]) (*connect.Response[v1.SendWebSocketMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.SendWebSocketMessage is not implemented"))
}

func (UnimplementedNotificationServiceHandler) BroadcastWebSocketMessage(context.Context, *connect.Request[v1.BroadcastWebSocketMessageRequest]) (*connect.Response[v1.BroadcastWebSocketMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.BroadcastWebSocketMessage is not implemented"))
}

func (UnimplementedNotificationServiceHandler) RegisterPushDevice(context.Context, *connect.Request[v1.RegisterPushDeviceRequest]) (*connect.Response[v1.RegisterPushDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.RegisterPushDevice is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdatePushDevice(context.Context, *connect.Request[v1.UpdatePushDeviceRequest]) (*connect.Response[v1.UpdatePushDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.UpdatePushDevice is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeletePushDevice(context.Context, *connect.Request[v1.DeletePushDeviceRequest]) (*connect.Response[v1.DeletePushDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.DeletePushDevice is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListPushDevices(context.Context, *connect.Request[v1.ListPushDevicesRequest]) (*connect.Response[v1.ListPushDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.ListPushDevices is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetPushDevice(context.Context, *connect.Request[v1.GetPushDeviceRequest]) (*connect.Response[v1.GetPushDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.GetPushDevice is not implemented"))
}

func (UnimplementedNotificationServiceHandler) CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.CreateNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.GetNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.UpdateNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeleteNotificationTemplate(context.Context, *connect.Request[v1.DeleteNotificationTemplateRequest]) (*connect.Response[v1.DeleteNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.DeleteNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.notification.v1.NotificationService.ListNotificationTemplates is not implemented"))
}
