// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/notification/v1/notification_service.proto

package notificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_CreateNotification_FullMethodName            = "/avion.notification.v1.NotificationService/CreateNotification"
	NotificationService_GetNotification_FullMethodName               = "/avion.notification.v1.NotificationService/GetNotification"
	NotificationService_ListNotifications_FullMethodName             = "/avion.notification.v1.NotificationService/ListNotifications"
	NotificationService_MarkAsRead_FullMethodName                    = "/avion.notification.v1.NotificationService/MarkAsRead"
	NotificationService_MarkAllAsRead_FullMethodName                 = "/avion.notification.v1.NotificationService/MarkAllAsRead"
	NotificationService_BatchMarkAsRead_FullMethodName               = "/avion.notification.v1.NotificationService/BatchMarkAsRead"
	NotificationService_DeleteNotification_FullMethodName            = "/avion.notification.v1.NotificationService/DeleteNotification"
	NotificationService_BatchDeleteNotifications_FullMethodName      = "/avion.notification.v1.NotificationService/BatchDeleteNotifications"
	NotificationService_GetNotificationPreferences_FullMethodName    = "/avion.notification.v1.NotificationService/GetNotificationPreferences"
	NotificationService_UpdateNotificationPreferences_FullMethodName = "/avion.notification.v1.NotificationService/UpdateNotificationPreferences"
	NotificationService_SendNotification_FullMethodName              = "/avion.notification.v1.NotificationService/SendNotification"
	NotificationService_StreamNotifications_FullMethodName           = "/avion.notification.v1.NotificationService/StreamNotifications"
	NotificationService_GetUnreadCount_FullMethodName                = "/avion.notification.v1.NotificationService/GetUnreadCount"
	NotificationService_BatchCreateNotifications_FullMethodName      = "/avion.notification.v1.NotificationService/BatchCreateNotifications"
	NotificationService_WebSocketStream_FullMethodName               = "/avion.notification.v1.NotificationService/WebSocketStream"
	NotificationService_ManageWebSocketConnection_FullMethodName     = "/avion.notification.v1.NotificationService/ManageWebSocketConnection"
	NotificationService_ListActiveConnections_FullMethodName         = "/avion.notification.v1.NotificationService/ListActiveConnections"
	NotificationService_SendWebSocketMessage_FullMethodName          = "/avion.notification.v1.NotificationService/SendWebSocketMessage"
	NotificationService_BroadcastWebSocketMessage_FullMethodName     = "/avion.notification.v1.NotificationService/BroadcastWebSocketMessage"
	NotificationService_RegisterPushDevice_FullMethodName            = "/avion.notification.v1.NotificationService/RegisterPushDevice"
	NotificationService_UpdatePushDevice_FullMethodName              = "/avion.notification.v1.NotificationService/UpdatePushDevice"
	NotificationService_DeletePushDevice_FullMethodName              = "/avion.notification.v1.NotificationService/DeletePushDevice"
	NotificationService_ListPushDevices_FullMethodName               = "/avion.notification.v1.NotificationService/ListPushDevices"
	NotificationService_GetPushDevice_FullMethodName                 = "/avion.notification.v1.NotificationService/GetPushDevice"
	NotificationService_CreateNotificationTemplate_FullMethodName    = "/avion.notification.v1.NotificationService/CreateNotificationTemplate"
	NotificationService_GetNotificationTemplate_FullMethodName       = "/avion.notification.v1.NotificationService/GetNotificationTemplate"
	NotificationService_UpdateNotificationTemplate_FullMethodName    = "/avion.notification.v1.NotificationService/UpdateNotificationTemplate"
	NotificationService_DeleteNotificationTemplate_FullMethodName    = "/avion.notification.v1.NotificationService/DeleteNotificationTemplate"
	NotificationService_ListNotificationTemplates_FullMethodName     = "/avion.notification.v1.NotificationService/ListNotificationTemplates"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通知サービス
type NotificationServiceClient interface {
	// 通知作成
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
	// 通知取得
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error)
	// 通知一覧取得
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	// 既読マーク
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	// 全て既読マーク
	MarkAllAsRead(ctx context.Context, in *MarkAllAsReadRequest, opts ...grpc.CallOption) (*MarkAllAsReadResponse, error)
	// バッチ既読マーク
	BatchMarkAsRead(ctx context.Context, in *BatchMarkAsReadRequest, opts ...grpc.CallOption) (*BatchMarkAsReadResponse, error)
	// 通知削除
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error)
	// バッチ通知削除
	BatchDeleteNotifications(ctx context.Context, in *BatchDeleteNotificationsRequest, opts ...grpc.CallOption) (*BatchDeleteNotificationsResponse, error)
	// 通知設定取得
	GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error)
	// 通知設定更新
	UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error)
	// 通知送信（内部用）
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// 通知ストリーム（SSE/WebSocket用）
	StreamNotifications(ctx context.Context, in *StreamNotificationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamNotificationsResponse], error)
	// 未読数取得
	GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error)
	// バッチ通知作成
	BatchCreateNotifications(ctx context.Context, in *BatchCreateNotificationsRequest, opts ...grpc.CallOption) (*BatchCreateNotificationsResponse, error)
	// WebSocket関連のRPC
	// WebSocketストリーム（双方向ストリーミング）
	WebSocketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebSocketStreamRequest, WebSocketStreamResponse], error)
	// WebSocket接続管理
	ManageWebSocketConnection(ctx context.Context, in *ManageWebSocketConnectionRequest, opts ...grpc.CallOption) (*ManageWebSocketConnectionResponse, error)
	// アクティブ接続一覧取得
	ListActiveConnections(ctx context.Context, in *ListActiveConnectionsRequest, opts ...grpc.CallOption) (*ListActiveConnectionsResponse, error)
	// 特定ユーザーへのメッセージ送信
	SendWebSocketMessage(ctx context.Context, in *SendWebSocketMessageRequest, opts ...grpc.CallOption) (*SendWebSocketMessageResponse, error)
	// ブロードキャストメッセージ送信
	BroadcastWebSocketMessage(ctx context.Context, in *BroadcastWebSocketMessageRequest, opts ...grpc.CallOption) (*BroadcastWebSocketMessageResponse, error)
	// プッシュデバイス管理
	// プッシュデバイス登録
	RegisterPushDevice(ctx context.Context, in *RegisterPushDeviceRequest, opts ...grpc.CallOption) (*RegisterPushDeviceResponse, error)
	// プッシュデバイス更新
	UpdatePushDevice(ctx context.Context, in *UpdatePushDeviceRequest, opts ...grpc.CallOption) (*UpdatePushDeviceResponse, error)
	// プッシュデバイス削除
	DeletePushDevice(ctx context.Context, in *DeletePushDeviceRequest, opts ...grpc.CallOption) (*DeletePushDeviceResponse, error)
	// プッシュデバイス一覧取得
	ListPushDevices(ctx context.Context, in *ListPushDevicesRequest, opts ...grpc.CallOption) (*ListPushDevicesResponse, error)
	// プッシュデバイス取得
	GetPushDevice(ctx context.Context, in *GetPushDeviceRequest, opts ...grpc.CallOption) (*GetPushDeviceResponse, error)
	// 通知テンプレート管理
	// テンプレート作成
	CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error)
	// テンプレート取得
	GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error)
	// テンプレート更新
	UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error)
	// テンプレート削除
	DeleteNotificationTemplate(ctx context.Context, in *DeleteNotificationTemplateRequest, opts ...grpc.CallOption) (*DeleteNotificationTemplateResponse, error)
	// テンプレート一覧取得
	ListNotificationTemplates(ctx context.Context, in *ListNotificationTemplatesRequest, opts ...grpc.CallOption) (*ListNotificationTemplatesResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkAllAsRead(ctx context.Context, in *MarkAllAsReadRequest, opts ...grpc.CallOption) (*MarkAllAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAllAsReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkAllAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchMarkAsRead(ctx context.Context, in *BatchMarkAsReadRequest, opts ...grpc.CallOption) (*BatchMarkAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchMarkAsReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchMarkAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchDeleteNotifications(ctx context.Context, in *BatchDeleteNotificationsRequest, opts ...grpc.CallOption) (*BatchDeleteNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchDeleteNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) StreamNotifications(ctx context.Context, in *StreamNotificationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamNotificationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], NotificationService_StreamNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamNotificationsRequest, StreamNotificationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_StreamNotificationsClient = grpc.ServerStreamingClient[StreamNotificationsResponse]

func (c *notificationServiceClient) GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnreadCountResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetUnreadCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchCreateNotifications(ctx context.Context, in *BatchCreateNotificationsRequest, opts ...grpc.CallOption) (*BatchCreateNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchCreateNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) WebSocketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebSocketStreamRequest, WebSocketStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[1], NotificationService_WebSocketStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WebSocketStreamRequest, WebSocketStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_WebSocketStreamClient = grpc.BidiStreamingClient[WebSocketStreamRequest, WebSocketStreamResponse]

func (c *notificationServiceClient) ManageWebSocketConnection(ctx context.Context, in *ManageWebSocketConnectionRequest, opts ...grpc.CallOption) (*ManageWebSocketConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageWebSocketConnectionResponse)
	err := c.cc.Invoke(ctx, NotificationService_ManageWebSocketConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListActiveConnections(ctx context.Context, in *ListActiveConnectionsRequest, opts ...grpc.CallOption) (*ListActiveConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActiveConnectionsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListActiveConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendWebSocketMessage(ctx context.Context, in *SendWebSocketMessageRequest, opts ...grpc.CallOption) (*SendWebSocketMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWebSocketMessageResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendWebSocketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BroadcastWebSocketMessage(ctx context.Context, in *BroadcastWebSocketMessageRequest, opts ...grpc.CallOption) (*BroadcastWebSocketMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastWebSocketMessageResponse)
	err := c.cc.Invoke(ctx, NotificationService_BroadcastWebSocketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RegisterPushDevice(ctx context.Context, in *RegisterPushDeviceRequest, opts ...grpc.CallOption) (*RegisterPushDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPushDeviceResponse)
	err := c.cc.Invoke(ctx, NotificationService_RegisterPushDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdatePushDevice(ctx context.Context, in *UpdatePushDeviceRequest, opts ...grpc.CallOption) (*UpdatePushDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePushDeviceResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdatePushDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeletePushDevice(ctx context.Context, in *DeletePushDeviceRequest, opts ...grpc.CallOption) (*DeletePushDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePushDeviceResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeletePushDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListPushDevices(ctx context.Context, in *ListPushDevicesRequest, opts ...grpc.CallOption) (*ListPushDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushDevicesResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListPushDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetPushDevice(ctx context.Context, in *GetPushDeviceRequest, opts ...grpc.CallOption) (*GetPushDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPushDeviceResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetPushDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotificationTemplate(ctx context.Context, in *DeleteNotificationTemplateRequest, opts ...grpc.CallOption) (*DeleteNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotificationTemplates(ctx context.Context, in *ListNotificationTemplatesRequest, opts ...grpc.CallOption) (*ListNotificationTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationTemplatesResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListNotificationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// 通知サービス
type NotificationServiceServer interface {
	// 通知作成
	CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	// 通知取得
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error)
	// 通知一覧取得
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	// 既読マーク
	MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error)
	// 全て既読マーク
	MarkAllAsRead(context.Context, *MarkAllAsReadRequest) (*MarkAllAsReadResponse, error)
	// バッチ既読マーク
	BatchMarkAsRead(context.Context, *BatchMarkAsReadRequest) (*BatchMarkAsReadResponse, error)
	// 通知削除
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error)
	// バッチ通知削除
	BatchDeleteNotifications(context.Context, *BatchDeleteNotificationsRequest) (*BatchDeleteNotificationsResponse, error)
	// 通知設定取得
	GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error)
	// 通知設定更新
	UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error)
	// 通知送信（内部用）
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// 通知ストリーム（SSE/WebSocket用）
	StreamNotifications(*StreamNotificationsRequest, grpc.ServerStreamingServer[StreamNotificationsResponse]) error
	// 未読数取得
	GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error)
	// バッチ通知作成
	BatchCreateNotifications(context.Context, *BatchCreateNotificationsRequest) (*BatchCreateNotificationsResponse, error)
	// WebSocket関連のRPC
	// WebSocketストリーム（双方向ストリーミング）
	WebSocketStream(grpc.BidiStreamingServer[WebSocketStreamRequest, WebSocketStreamResponse]) error
	// WebSocket接続管理
	ManageWebSocketConnection(context.Context, *ManageWebSocketConnectionRequest) (*ManageWebSocketConnectionResponse, error)
	// アクティブ接続一覧取得
	ListActiveConnections(context.Context, *ListActiveConnectionsRequest) (*ListActiveConnectionsResponse, error)
	// 特定ユーザーへのメッセージ送信
	SendWebSocketMessage(context.Context, *SendWebSocketMessageRequest) (*SendWebSocketMessageResponse, error)
	// ブロードキャストメッセージ送信
	BroadcastWebSocketMessage(context.Context, *BroadcastWebSocketMessageRequest) (*BroadcastWebSocketMessageResponse, error)
	// プッシュデバイス管理
	// プッシュデバイス登録
	RegisterPushDevice(context.Context, *RegisterPushDeviceRequest) (*RegisterPushDeviceResponse, error)
	// プッシュデバイス更新
	UpdatePushDevice(context.Context, *UpdatePushDeviceRequest) (*UpdatePushDeviceResponse, error)
	// プッシュデバイス削除
	DeletePushDevice(context.Context, *DeletePushDeviceRequest) (*DeletePushDeviceResponse, error)
	// プッシュデバイス一覧取得
	ListPushDevices(context.Context, *ListPushDevicesRequest) (*ListPushDevicesResponse, error)
	// プッシュデバイス取得
	GetPushDevice(context.Context, *GetPushDeviceRequest) (*GetPushDeviceResponse, error)
	// 通知テンプレート管理
	// テンプレート作成
	CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error)
	// テンプレート取得
	GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error)
	// テンプレート更新
	UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error)
	// テンプレート削除
	DeleteNotificationTemplate(context.Context, *DeleteNotificationTemplateRequest) (*DeleteNotificationTemplateResponse, error)
	// テンプレート一覧取得
	ListNotificationTemplates(context.Context, *ListNotificationTemplatesRequest) (*ListNotificationTemplatesResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) MarkAllAsRead(context.Context, *MarkAllAsReadRequest) (*MarkAllAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) BatchMarkAsRead(context.Context, *BatchMarkAsReadRequest) (*BatchMarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMarkAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedNotificationServiceServer) BatchDeleteNotifications(context.Context, *BatchDeleteNotificationsRequest) (*BatchDeleteNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) StreamNotifications(*StreamNotificationsRequest, grpc.ServerStreamingServer[StreamNotificationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadCount not implemented")
}
func (UnimplementedNotificationServiceServer) BatchCreateNotifications(context.Context, *BatchCreateNotificationsRequest) (*BatchCreateNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) WebSocketStream(grpc.BidiStreamingServer[WebSocketStreamRequest, WebSocketStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WebSocketStream not implemented")
}
func (UnimplementedNotificationServiceServer) ManageWebSocketConnection(context.Context, *ManageWebSocketConnectionRequest) (*ManageWebSocketConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageWebSocketConnection not implemented")
}
func (UnimplementedNotificationServiceServer) ListActiveConnections(context.Context, *ListActiveConnectionsRequest) (*ListActiveConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveConnections not implemented")
}
func (UnimplementedNotificationServiceServer) SendWebSocketMessage(context.Context, *SendWebSocketMessageRequest) (*SendWebSocketMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebSocketMessage not implemented")
}
func (UnimplementedNotificationServiceServer) BroadcastWebSocketMessage(context.Context, *BroadcastWebSocketMessageRequest) (*BroadcastWebSocketMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastWebSocketMessage not implemented")
}
func (UnimplementedNotificationServiceServer) RegisterPushDevice(context.Context, *RegisterPushDeviceRequest) (*RegisterPushDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPushDevice not implemented")
}
func (UnimplementedNotificationServiceServer) UpdatePushDevice(context.Context, *UpdatePushDeviceRequest) (*UpdatePushDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushDevice not implemented")
}
func (UnimplementedNotificationServiceServer) DeletePushDevice(context.Context, *DeletePushDeviceRequest) (*DeletePushDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePushDevice not implemented")
}
func (UnimplementedNotificationServiceServer) ListPushDevices(context.Context, *ListPushDevicesRequest) (*ListPushDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushDevices not implemented")
}
func (UnimplementedNotificationServiceServer) GetPushDevice(context.Context, *GetPushDeviceRequest) (*GetPushDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushDevice not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteNotificationTemplate(context.Context, *DeleteNotificationTemplateRequest) (*DeleteNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotificationTemplates(context.Context, *ListNotificationTemplatesRequest) (*ListNotificationTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationTemplates not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkAsRead(ctx, req.(*MarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkAllAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkAllAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkAllAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkAllAsRead(ctx, req.(*MarkAllAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchMarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchMarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchMarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchMarkAsRead(ctx, req.(*BatchMarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchDeleteNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchDeleteNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchDeleteNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchDeleteNotifications(ctx, req.(*BatchDeleteNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, req.(*GetNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, req.(*UpdateNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_StreamNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).StreamNotifications(m, &grpc.GenericServerStream[StreamNotificationsRequest, StreamNotificationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_StreamNotificationsServer = grpc.ServerStreamingServer[StreamNotificationsResponse]

func _NotificationService_GetUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetUnreadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetUnreadCount(ctx, req.(*GetUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchCreateNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchCreateNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchCreateNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchCreateNotifications(ctx, req.(*BatchCreateNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_WebSocketStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServiceServer).WebSocketStream(&grpc.GenericServerStream[WebSocketStreamRequest, WebSocketStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_WebSocketStreamServer = grpc.BidiStreamingServer[WebSocketStreamRequest, WebSocketStreamResponse]

func _NotificationService_ManageWebSocketConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageWebSocketConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ManageWebSocketConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ManageWebSocketConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ManageWebSocketConnection(ctx, req.(*ManageWebSocketConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListActiveConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListActiveConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListActiveConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListActiveConnections(ctx, req.(*ListActiveConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendWebSocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebSocketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendWebSocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendWebSocketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendWebSocketMessage(ctx, req.(*SendWebSocketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BroadcastWebSocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastWebSocketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BroadcastWebSocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BroadcastWebSocketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BroadcastWebSocketMessage(ctx, req.(*BroadcastWebSocketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RegisterPushDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPushDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RegisterPushDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_RegisterPushDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RegisterPushDevice(ctx, req.(*RegisterPushDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdatePushDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdatePushDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdatePushDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdatePushDevice(ctx, req.(*UpdatePushDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeletePushDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePushDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeletePushDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeletePushDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeletePushDevice(ctx, req.(*DeletePushDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListPushDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListPushDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListPushDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListPushDevices(ctx, req.(*ListPushDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetPushDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetPushDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetPushDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetPushDevice(ctx, req.(*GetPushDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, req.(*CreateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationTemplate(ctx, req.(*GetNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, req.(*UpdateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteNotificationTemplate(ctx, req.(*DeleteNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotificationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotificationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListNotificationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotificationTemplates(ctx, req.(*ListNotificationTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _NotificationService_CreateNotification_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _NotificationService_GetNotification_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _NotificationService_ListNotifications_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _NotificationService_MarkAsRead_Handler,
		},
		{
			MethodName: "MarkAllAsRead",
			Handler:    _NotificationService_MarkAllAsRead_Handler,
		},
		{
			MethodName: "BatchMarkAsRead",
			Handler:    _NotificationService_BatchMarkAsRead_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NotificationService_DeleteNotification_Handler,
		},
		{
			MethodName: "BatchDeleteNotifications",
			Handler:    _NotificationService_BatchDeleteNotifications_Handler,
		},
		{
			MethodName: "GetNotificationPreferences",
			Handler:    _NotificationService_GetNotificationPreferences_Handler,
		},
		{
			MethodName: "UpdateNotificationPreferences",
			Handler:    _NotificationService_UpdateNotificationPreferences_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "GetUnreadCount",
			Handler:    _NotificationService_GetUnreadCount_Handler,
		},
		{
			MethodName: "BatchCreateNotifications",
			Handler:    _NotificationService_BatchCreateNotifications_Handler,
		},
		{
			MethodName: "ManageWebSocketConnection",
			Handler:    _NotificationService_ManageWebSocketConnection_Handler,
		},
		{
			MethodName: "ListActiveConnections",
			Handler:    _NotificationService_ListActiveConnections_Handler,
		},
		{
			MethodName: "SendWebSocketMessage",
			Handler:    _NotificationService_SendWebSocketMessage_Handler,
		},
		{
			MethodName: "BroadcastWebSocketMessage",
			Handler:    _NotificationService_BroadcastWebSocketMessage_Handler,
		},
		{
			MethodName: "RegisterPushDevice",
			Handler:    _NotificationService_RegisterPushDevice_Handler,
		},
		{
			MethodName: "UpdatePushDevice",
			Handler:    _NotificationService_UpdatePushDevice_Handler,
		},
		{
			MethodName: "DeletePushDevice",
			Handler:    _NotificationService_DeletePushDevice_Handler,
		},
		{
			MethodName: "ListPushDevices",
			Handler:    _NotificationService_ListPushDevices_Handler,
		},
		{
			MethodName: "GetPushDevice",
			Handler:    _NotificationService_GetPushDevice_Handler,
		},
		{
			MethodName: "CreateNotificationTemplate",
			Handler:    _NotificationService_CreateNotificationTemplate_Handler,
		},
		{
			MethodName: "GetNotificationTemplate",
			Handler:    _NotificationService_GetNotificationTemplate_Handler,
		},
		{
			MethodName: "UpdateNotificationTemplate",
			Handler:    _NotificationService_UpdateNotificationTemplate_Handler,
		},
		{
			MethodName: "DeleteNotificationTemplate",
			Handler:    _NotificationService_DeleteNotificationTemplate_Handler,
		},
		{
			MethodName: "ListNotificationTemplates",
			Handler:    _NotificationService_ListNotificationTemplates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotifications",
			Handler:       _NotificationService_StreamNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WebSocketStream",
			Handler:       _NotificationService_WebSocketStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "avion/notification/v1/notification_service.proto",
}
