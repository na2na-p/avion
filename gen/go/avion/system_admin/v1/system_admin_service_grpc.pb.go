// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/system_admin/v1/system_admin_service.proto

package system_adminv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemAdminService_GetSystemHealth_FullMethodName         = "/avion.system_admin.v1.SystemAdminService/GetSystemHealth"
	SystemAdminService_StreamSystemHealth_FullMethodName      = "/avion.system_admin.v1.SystemAdminService/StreamSystemHealth"
	SystemAdminService_GetSystemConfig_FullMethodName         = "/avion.system_admin.v1.SystemAdminService/GetSystemConfig"
	SystemAdminService_ListSystemConfigs_FullMethodName       = "/avion.system_admin.v1.SystemAdminService/ListSystemConfigs"
	SystemAdminService_UpdateSystemConfig_FullMethodName      = "/avion.system_admin.v1.SystemAdminService/UpdateSystemConfig"
	SystemAdminService_CreateAuditLog_FullMethodName          = "/avion.system_admin.v1.SystemAdminService/CreateAuditLog"
	SystemAdminService_SearchAuditLogs_FullMethodName         = "/avion.system_admin.v1.SystemAdminService/SearchAuditLogs"
	SystemAdminService_CreateBackup_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/CreateBackup"
	SystemAdminService_ListBackups_FullMethodName             = "/avion.system_admin.v1.SystemAdminService/ListBackups"
	SystemAdminService_RestoreBackup_FullMethodName           = "/avion.system_admin.v1.SystemAdminService/RestoreBackup"
	SystemAdminService_VerifyBackup_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/VerifyBackup"
	SystemAdminService_CreateMaintenanceWindow_FullMethodName = "/avion.system_admin.v1.SystemAdminService/CreateMaintenanceWindow"
	SystemAdminService_UpdateMaintenanceWindow_FullMethodName = "/avion.system_admin.v1.SystemAdminService/UpdateMaintenanceWindow"
	SystemAdminService_EndMaintenance_FullMethodName          = "/avion.system_admin.v1.SystemAdminService/EndMaintenance"
	SystemAdminService_GetSystemStats_FullMethodName          = "/avion.system_admin.v1.SystemAdminService/GetSystemStats"
	SystemAdminService_GenerateReport_FullMethodName          = "/avion.system_admin.v1.SystemAdminService/GenerateReport"
	SystemAdminService_ListAlerts_FullMethodName              = "/avion.system_admin.v1.SystemAdminService/ListAlerts"
	SystemAdminService_AcknowledgeAlert_FullMethodName        = "/avion.system_admin.v1.SystemAdminService/AcknowledgeAlert"
	SystemAdminService_ResolveAlert_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/ResolveAlert"
	SystemAdminService_StreamAlerts_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/StreamAlerts"
	SystemAdminService_ExecuteAdminAction_FullMethodName      = "/avion.system_admin.v1.SystemAdminService/ExecuteAdminAction"
	SystemAdminService_ReverseAdminAction_FullMethodName      = "/avion.system_admin.v1.SystemAdminService/ReverseAdminAction"
	SystemAdminService_ListAdminActions_FullMethodName        = "/avion.system_admin.v1.SystemAdminService/ListAdminActions"
	SystemAdminService_ControlService_FullMethodName          = "/avion.system_admin.v1.SystemAdminService/ControlService"
	SystemAdminService_ListServices_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/ListServices"
	SystemAdminService_ScaleService_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/ScaleService"
	SystemAdminService_ClearCache_FullMethodName              = "/avion.system_admin.v1.SystemAdminService/ClearCache"
	SystemAdminService_GetCacheInfo_FullMethodName            = "/avion.system_admin.v1.SystemAdminService/GetCacheInfo"
)

// SystemAdminServiceClient is the client API for SystemAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemAdminService はシステム管理機能を提供する
type SystemAdminServiceClient interface {
	// GetSystemHealth はシステムサービスのヘルス状態を取得する
	GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*GetSystemHealthResponse, error)
	// StreamSystemHealth はリアルタイムのヘルス更新をストリーミングする
	StreamSystemHealth(ctx context.Context, in *StreamSystemHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSystemHealthResponse], error)
	// GetSystemConfig はシステム設定を取得する
	GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*GetSystemConfigResponse, error)
	// ListSystemConfigs はすべてのシステム設定をリストする
	ListSystemConfigs(ctx context.Context, in *ListSystemConfigsRequest, opts ...grpc.CallOption) (*ListSystemConfigsResponse, error)
	// UpdateSystemConfig はシステム設定を更新する
	UpdateSystemConfig(ctx context.Context, in *UpdateSystemConfigRequest, opts ...grpc.CallOption) (*UpdateSystemConfigResponse, error)
	// CreateAuditLog は監査ログエントリを作成する
	CreateAuditLog(ctx context.Context, in *CreateAuditLogRequest, opts ...grpc.CallOption) (*CreateAuditLogResponse, error)
	// SearchAuditLogs は監査ログを検索する
	SearchAuditLogs(ctx context.Context, in *SearchAuditLogsRequest, opts ...grpc.CallOption) (*SearchAuditLogsResponse, error)
	// CreateBackup はシステムバックアップを作成する
	CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error)
	// ListBackups は利用可能なバックアップをリストする
	ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error)
	// RestoreBackup はバックアップから復元する
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error)
	// VerifyBackup はバックアップの整合性を検証する
	VerifyBackup(ctx context.Context, in *VerifyBackupRequest, opts ...grpc.CallOption) (*VerifyBackupResponse, error)
	// CreateMaintenanceWindow はメンテナンスウィンドウを作成する
	CreateMaintenanceWindow(ctx context.Context, in *CreateMaintenanceWindowRequest, opts ...grpc.CallOption) (*CreateMaintenanceWindowResponse, error)
	// UpdateMaintenanceWindow はメンテナンスウィンドウを更新する
	UpdateMaintenanceWindow(ctx context.Context, in *UpdateMaintenanceWindowRequest, opts ...grpc.CallOption) (*UpdateMaintenanceWindowResponse, error)
	// EndMaintenance は現在のメンテナンスを終了する
	EndMaintenance(ctx context.Context, in *EndMaintenanceRequest, opts ...grpc.CallOption) (*EndMaintenanceResponse, error)
	// GetSystemStats はシステム統計を取得する
	GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error)
	// GenerateReport はシステムレポートを生成する
	GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error)
	// ListAlerts はシステムアラートをリストする
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	// AcknowledgeAlert はアラートを確認する
	AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*AcknowledgeAlertResponse, error)
	// ResolveAlert はアラートを解決する
	ResolveAlert(ctx context.Context, in *ResolveAlertRequest, opts ...grpc.CallOption) (*ResolveAlertResponse, error)
	// StreamAlerts はリアルタイムアラートをストリーミングする
	StreamAlerts(ctx context.Context, in *StreamAlertsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAlertsResponse], error)
	// ExecuteAdminAction は管理アクションを実行する
	ExecuteAdminAction(ctx context.Context, in *ExecuteAdminActionRequest, opts ...grpc.CallOption) (*ExecuteAdminActionResponse, error)
	// ReverseAdminAction は管理アクションを取り消す
	ReverseAdminAction(ctx context.Context, in *ReverseAdminActionRequest, opts ...grpc.CallOption) (*ReverseAdminActionResponse, error)
	// ListAdminActions は管理アクションをリストする
	ListAdminActions(ctx context.Context, in *ListAdminActionsRequest, opts ...grpc.CallOption) (*ListAdminActionsResponse, error)
	// ControlService はサービスのライフサイクルを制御する
	ControlService(ctx context.Context, in *ControlServiceRequest, opts ...grpc.CallOption) (*ControlServiceResponse, error)
	// ListServices はすべてのサービスをリストする
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// ScaleService はサービスをスケールする
	ScaleService(ctx context.Context, in *ScaleServiceRequest, opts ...grpc.CallOption) (*ScaleServiceResponse, error)
	// ClearCache はシステムキャッシュをクリアする
	ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error)
	// GetCacheInfo はキャッシュ情報を取得する
	GetCacheInfo(ctx context.Context, in *GetCacheInfoRequest, opts ...grpc.CallOption) (*GetCacheInfoResponse, error)
}

type systemAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemAdminServiceClient(cc grpc.ClientConnInterface) SystemAdminServiceClient {
	return &systemAdminServiceClient{cc}
}

func (c *systemAdminServiceClient) GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*GetSystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemHealthResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) StreamSystemHealth(ctx context.Context, in *StreamSystemHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSystemHealthResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemAdminService_ServiceDesc.Streams[0], SystemAdminService_StreamSystemHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSystemHealthRequest, StreamSystemHealthResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemAdminService_StreamSystemHealthClient = grpc.ServerStreamingClient[StreamSystemHealthResponse]

func (c *systemAdminServiceClient) GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*GetSystemConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemConfigResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_GetSystemConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListSystemConfigs(ctx context.Context, in *ListSystemConfigsRequest, opts ...grpc.CallOption) (*ListSystemConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemConfigsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ListSystemConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) UpdateSystemConfig(ctx context.Context, in *UpdateSystemConfigRequest, opts ...grpc.CallOption) (*UpdateSystemConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemConfigResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_UpdateSystemConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateAuditLog(ctx context.Context, in *CreateAuditLogRequest, opts ...grpc.CallOption) (*CreateAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuditLogResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_CreateAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) SearchAuditLogs(ctx context.Context, in *SearchAuditLogsRequest, opts ...grpc.CallOption) (*SearchAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAuditLogsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_SearchAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBackupResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_CreateBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackupsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ListBackups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreBackupResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_RestoreBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) VerifyBackup(ctx context.Context, in *VerifyBackupRequest, opts ...grpc.CallOption) (*VerifyBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyBackupResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_VerifyBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateMaintenanceWindow(ctx context.Context, in *CreateMaintenanceWindowRequest, opts ...grpc.CallOption) (*CreateMaintenanceWindowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMaintenanceWindowResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_CreateMaintenanceWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) UpdateMaintenanceWindow(ctx context.Context, in *UpdateMaintenanceWindowRequest, opts ...grpc.CallOption) (*UpdateMaintenanceWindowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMaintenanceWindowResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_UpdateMaintenanceWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) EndMaintenance(ctx context.Context, in *EndMaintenanceRequest, opts ...grpc.CallOption) (*EndMaintenanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndMaintenanceResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_EndMaintenance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemStatsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_GetSystemStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateReportResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ListAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*AcknowledgeAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeAlertResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_AcknowledgeAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ResolveAlert(ctx context.Context, in *ResolveAlertRequest, opts ...grpc.CallOption) (*ResolveAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveAlertResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ResolveAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) StreamAlerts(ctx context.Context, in *StreamAlertsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAlertsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemAdminService_ServiceDesc.Streams[1], SystemAdminService_StreamAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAlertsRequest, StreamAlertsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemAdminService_StreamAlertsClient = grpc.ServerStreamingClient[StreamAlertsResponse]

func (c *systemAdminServiceClient) ExecuteAdminAction(ctx context.Context, in *ExecuteAdminActionRequest, opts ...grpc.CallOption) (*ExecuteAdminActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteAdminActionResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ExecuteAdminAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ReverseAdminAction(ctx context.Context, in *ReverseAdminActionRequest, opts ...grpc.CallOption) (*ReverseAdminActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReverseAdminActionResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ReverseAdminAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListAdminActions(ctx context.Context, in *ListAdminActionsRequest, opts ...grpc.CallOption) (*ListAdminActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdminActionsResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ListAdminActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ControlService(ctx context.Context, in *ControlServiceRequest, opts ...grpc.CallOption) (*ControlServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlServiceResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ControlService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ScaleService(ctx context.Context, in *ScaleServiceRequest, opts ...grpc.CallOption) (*ScaleServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleServiceResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ScaleService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearCacheResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_ClearCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) GetCacheInfo(ctx context.Context, in *GetCacheInfoRequest, opts ...grpc.CallOption) (*GetCacheInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCacheInfoResponse)
	err := c.cc.Invoke(ctx, SystemAdminService_GetCacheInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemAdminServiceServer is the server API for SystemAdminService service.
// All implementations must embed UnimplementedSystemAdminServiceServer
// for forward compatibility.
//
// SystemAdminService はシステム管理機能を提供する
type SystemAdminServiceServer interface {
	// GetSystemHealth はシステムサービスのヘルス状態を取得する
	GetSystemHealth(context.Context, *GetSystemHealthRequest) (*GetSystemHealthResponse, error)
	// StreamSystemHealth はリアルタイムのヘルス更新をストリーミングする
	StreamSystemHealth(*StreamSystemHealthRequest, grpc.ServerStreamingServer[StreamSystemHealthResponse]) error
	// GetSystemConfig はシステム設定を取得する
	GetSystemConfig(context.Context, *GetSystemConfigRequest) (*GetSystemConfigResponse, error)
	// ListSystemConfigs はすべてのシステム設定をリストする
	ListSystemConfigs(context.Context, *ListSystemConfigsRequest) (*ListSystemConfigsResponse, error)
	// UpdateSystemConfig はシステム設定を更新する
	UpdateSystemConfig(context.Context, *UpdateSystemConfigRequest) (*UpdateSystemConfigResponse, error)
	// CreateAuditLog は監査ログエントリを作成する
	CreateAuditLog(context.Context, *CreateAuditLogRequest) (*CreateAuditLogResponse, error)
	// SearchAuditLogs は監査ログを検索する
	SearchAuditLogs(context.Context, *SearchAuditLogsRequest) (*SearchAuditLogsResponse, error)
	// CreateBackup はシステムバックアップを作成する
	CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error)
	// ListBackups は利用可能なバックアップをリストする
	ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error)
	// RestoreBackup はバックアップから復元する
	RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error)
	// VerifyBackup はバックアップの整合性を検証する
	VerifyBackup(context.Context, *VerifyBackupRequest) (*VerifyBackupResponse, error)
	// CreateMaintenanceWindow はメンテナンスウィンドウを作成する
	CreateMaintenanceWindow(context.Context, *CreateMaintenanceWindowRequest) (*CreateMaintenanceWindowResponse, error)
	// UpdateMaintenanceWindow はメンテナンスウィンドウを更新する
	UpdateMaintenanceWindow(context.Context, *UpdateMaintenanceWindowRequest) (*UpdateMaintenanceWindowResponse, error)
	// EndMaintenance は現在のメンテナンスを終了する
	EndMaintenance(context.Context, *EndMaintenanceRequest) (*EndMaintenanceResponse, error)
	// GetSystemStats はシステム統計を取得する
	GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error)
	// GenerateReport はシステムレポートを生成する
	GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error)
	// ListAlerts はシステムアラートをリストする
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	// AcknowledgeAlert はアラートを確認する
	AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*AcknowledgeAlertResponse, error)
	// ResolveAlert はアラートを解決する
	ResolveAlert(context.Context, *ResolveAlertRequest) (*ResolveAlertResponse, error)
	// StreamAlerts はリアルタイムアラートをストリーミングする
	StreamAlerts(*StreamAlertsRequest, grpc.ServerStreamingServer[StreamAlertsResponse]) error
	// ExecuteAdminAction は管理アクションを実行する
	ExecuteAdminAction(context.Context, *ExecuteAdminActionRequest) (*ExecuteAdminActionResponse, error)
	// ReverseAdminAction は管理アクションを取り消す
	ReverseAdminAction(context.Context, *ReverseAdminActionRequest) (*ReverseAdminActionResponse, error)
	// ListAdminActions は管理アクションをリストする
	ListAdminActions(context.Context, *ListAdminActionsRequest) (*ListAdminActionsResponse, error)
	// ControlService はサービスのライフサイクルを制御する
	ControlService(context.Context, *ControlServiceRequest) (*ControlServiceResponse, error)
	// ListServices はすべてのサービスをリストする
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// ScaleService はサービスをスケールする
	ScaleService(context.Context, *ScaleServiceRequest) (*ScaleServiceResponse, error)
	// ClearCache はシステムキャッシュをクリアする
	ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error)
	// GetCacheInfo はキャッシュ情報を取得する
	GetCacheInfo(context.Context, *GetCacheInfoRequest) (*GetCacheInfoResponse, error)
	mustEmbedUnimplementedSystemAdminServiceServer()
}

// UnimplementedSystemAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemAdminServiceServer struct{}

func (UnimplementedSystemAdminServiceServer) GetSystemHealth(context.Context, *GetSystemHealthRequest) (*GetSystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedSystemAdminServiceServer) StreamSystemHealth(*StreamSystemHealthRequest, grpc.ServerStreamingServer[StreamSystemHealthResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSystemHealth not implemented")
}
func (UnimplementedSystemAdminServiceServer) GetSystemConfig(context.Context, *GetSystemConfigRequest) (*GetSystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedSystemAdminServiceServer) ListSystemConfigs(context.Context, *ListSystemConfigsRequest) (*ListSystemConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemConfigs not implemented")
}
func (UnimplementedSystemAdminServiceServer) UpdateSystemConfig(context.Context, *UpdateSystemConfigRequest) (*UpdateSystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemConfig not implemented")
}
func (UnimplementedSystemAdminServiceServer) CreateAuditLog(context.Context, *CreateAuditLogRequest) (*CreateAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditLog not implemented")
}
func (UnimplementedSystemAdminServiceServer) SearchAuditLogs(context.Context, *SearchAuditLogsRequest) (*SearchAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAuditLogs not implemented")
}
func (UnimplementedSystemAdminServiceServer) CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedSystemAdminServiceServer) ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (UnimplementedSystemAdminServiceServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedSystemAdminServiceServer) VerifyBackup(context.Context, *VerifyBackupRequest) (*VerifyBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBackup not implemented")
}
func (UnimplementedSystemAdminServiceServer) CreateMaintenanceWindow(context.Context, *CreateMaintenanceWindowRequest) (*CreateMaintenanceWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaintenanceWindow not implemented")
}
func (UnimplementedSystemAdminServiceServer) UpdateMaintenanceWindow(context.Context, *UpdateMaintenanceWindowRequest) (*UpdateMaintenanceWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaintenanceWindow not implemented")
}
func (UnimplementedSystemAdminServiceServer) EndMaintenance(context.Context, *EndMaintenanceRequest) (*EndMaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndMaintenance not implemented")
}
func (UnimplementedSystemAdminServiceServer) GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStats not implemented")
}
func (UnimplementedSystemAdminServiceServer) GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedSystemAdminServiceServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedSystemAdminServiceServer) AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*AcknowledgeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeAlert not implemented")
}
func (UnimplementedSystemAdminServiceServer) ResolveAlert(context.Context, *ResolveAlertRequest) (*ResolveAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAlert not implemented")
}
func (UnimplementedSystemAdminServiceServer) StreamAlerts(*StreamAlertsRequest, grpc.ServerStreamingServer[StreamAlertsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAlerts not implemented")
}
func (UnimplementedSystemAdminServiceServer) ExecuteAdminAction(context.Context, *ExecuteAdminActionRequest) (*ExecuteAdminActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAdminAction not implemented")
}
func (UnimplementedSystemAdminServiceServer) ReverseAdminAction(context.Context, *ReverseAdminActionRequest) (*ReverseAdminActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseAdminAction not implemented")
}
func (UnimplementedSystemAdminServiceServer) ListAdminActions(context.Context, *ListAdminActionsRequest) (*ListAdminActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminActions not implemented")
}
func (UnimplementedSystemAdminServiceServer) ControlService(context.Context, *ControlServiceRequest) (*ControlServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlService not implemented")
}
func (UnimplementedSystemAdminServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedSystemAdminServiceServer) ScaleService(context.Context, *ScaleServiceRequest) (*ScaleServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleService not implemented")
}
func (UnimplementedSystemAdminServiceServer) ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}
func (UnimplementedSystemAdminServiceServer) GetCacheInfo(context.Context, *GetCacheInfoRequest) (*GetCacheInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheInfo not implemented")
}
func (UnimplementedSystemAdminServiceServer) mustEmbedUnimplementedSystemAdminServiceServer() {}
func (UnimplementedSystemAdminServiceServer) testEmbeddedByValue()                            {}

// UnsafeSystemAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemAdminServiceServer will
// result in compilation errors.
type UnsafeSystemAdminServiceServer interface {
	mustEmbedUnimplementedSystemAdminServiceServer()
}

func RegisterSystemAdminServiceServer(s grpc.ServiceRegistrar, srv SystemAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemAdminService_ServiceDesc, srv)
}

func _SystemAdminService_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).GetSystemHealth(ctx, req.(*GetSystemHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_StreamSystemHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSystemHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemAdminServiceServer).StreamSystemHealth(m, &grpc.GenericServerStream[StreamSystemHealthRequest, StreamSystemHealthResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemAdminService_StreamSystemHealthServer = grpc.ServerStreamingServer[StreamSystemHealthResponse]

func _SystemAdminService_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_GetSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).GetSystemConfig(ctx, req.(*GetSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListSystemConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListSystemConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ListSystemConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListSystemConfigs(ctx, req.(*ListSystemConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_UpdateSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).UpdateSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_UpdateSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).UpdateSystemConfig(ctx, req.(*UpdateSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_CreateAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateAuditLog(ctx, req.(*CreateAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_SearchAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).SearchAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_SearchAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).SearchAuditLogs(ctx, req.(*SearchAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_CreateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateBackup(ctx, req.(*CreateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ListBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListBackups(ctx, req.(*ListBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_RestoreBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_VerifyBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).VerifyBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_VerifyBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).VerifyBackup(ctx, req.(*VerifyBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateMaintenanceWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateMaintenanceWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_CreateMaintenanceWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateMaintenanceWindow(ctx, req.(*CreateMaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_UpdateMaintenanceWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).UpdateMaintenanceWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_UpdateMaintenanceWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).UpdateMaintenanceWindow(ctx, req.(*UpdateMaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_EndMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).EndMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_EndMaintenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).EndMaintenance(ctx, req.(*EndMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_GetSystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).GetSystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_GetSystemStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).GetSystemStats(ctx, req.(*GetSystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).GenerateReport(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ListAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_AcknowledgeAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).AcknowledgeAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_AcknowledgeAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).AcknowledgeAlert(ctx, req.(*AcknowledgeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ResolveAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ResolveAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ResolveAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ResolveAlert(ctx, req.(*ResolveAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_StreamAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemAdminServiceServer).StreamAlerts(m, &grpc.GenericServerStream[StreamAlertsRequest, StreamAlertsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemAdminService_StreamAlertsServer = grpc.ServerStreamingServer[StreamAlertsResponse]

func _SystemAdminService_ExecuteAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteAdminActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ExecuteAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ExecuteAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ExecuteAdminAction(ctx, req.(*ExecuteAdminActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ReverseAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseAdminActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ReverseAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ReverseAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ReverseAdminAction(ctx, req.(*ReverseAdminActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListAdminActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListAdminActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ListAdminActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListAdminActions(ctx, req.(*ListAdminActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ControlService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ControlService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ControlService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ControlService(ctx, req.(*ControlServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ScaleService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ScaleService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ScaleService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ScaleService(ctx, req.(*ScaleServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_ClearCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ClearCache(ctx, req.(*ClearCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_GetCacheInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).GetCacheInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemAdminService_GetCacheInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).GetCacheInfo(ctx, req.(*GetCacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemAdminService_ServiceDesc is the grpc.ServiceDesc for SystemAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.system_admin.v1.SystemAdminService",
	HandlerType: (*SystemAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemHealth",
			Handler:    _SystemAdminService_GetSystemHealth_Handler,
		},
		{
			MethodName: "GetSystemConfig",
			Handler:    _SystemAdminService_GetSystemConfig_Handler,
		},
		{
			MethodName: "ListSystemConfigs",
			Handler:    _SystemAdminService_ListSystemConfigs_Handler,
		},
		{
			MethodName: "UpdateSystemConfig",
			Handler:    _SystemAdminService_UpdateSystemConfig_Handler,
		},
		{
			MethodName: "CreateAuditLog",
			Handler:    _SystemAdminService_CreateAuditLog_Handler,
		},
		{
			MethodName: "SearchAuditLogs",
			Handler:    _SystemAdminService_SearchAuditLogs_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _SystemAdminService_CreateBackup_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _SystemAdminService_ListBackups_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _SystemAdminService_RestoreBackup_Handler,
		},
		{
			MethodName: "VerifyBackup",
			Handler:    _SystemAdminService_VerifyBackup_Handler,
		},
		{
			MethodName: "CreateMaintenanceWindow",
			Handler:    _SystemAdminService_CreateMaintenanceWindow_Handler,
		},
		{
			MethodName: "UpdateMaintenanceWindow",
			Handler:    _SystemAdminService_UpdateMaintenanceWindow_Handler,
		},
		{
			MethodName: "EndMaintenance",
			Handler:    _SystemAdminService_EndMaintenance_Handler,
		},
		{
			MethodName: "GetSystemStats",
			Handler:    _SystemAdminService_GetSystemStats_Handler,
		},
		{
			MethodName: "GenerateReport",
			Handler:    _SystemAdminService_GenerateReport_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _SystemAdminService_ListAlerts_Handler,
		},
		{
			MethodName: "AcknowledgeAlert",
			Handler:    _SystemAdminService_AcknowledgeAlert_Handler,
		},
		{
			MethodName: "ResolveAlert",
			Handler:    _SystemAdminService_ResolveAlert_Handler,
		},
		{
			MethodName: "ExecuteAdminAction",
			Handler:    _SystemAdminService_ExecuteAdminAction_Handler,
		},
		{
			MethodName: "ReverseAdminAction",
			Handler:    _SystemAdminService_ReverseAdminAction_Handler,
		},
		{
			MethodName: "ListAdminActions",
			Handler:    _SystemAdminService_ListAdminActions_Handler,
		},
		{
			MethodName: "ControlService",
			Handler:    _SystemAdminService_ControlService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _SystemAdminService_ListServices_Handler,
		},
		{
			MethodName: "ScaleService",
			Handler:    _SystemAdminService_ScaleService_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _SystemAdminService_ClearCache_Handler,
		},
		{
			MethodName: "GetCacheInfo",
			Handler:    _SystemAdminService_GetCacheInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSystemHealth",
			Handler:       _SystemAdminService_StreamSystemHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAlerts",
			Handler:       _SystemAdminService_StreamAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "avion/system_admin/v1/system_admin_service.proto",
}
