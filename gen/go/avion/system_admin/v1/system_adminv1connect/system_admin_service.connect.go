// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/system_admin/v1/system_admin_service.proto

package system_adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/system_admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemAdminServiceName is the fully-qualified name of the SystemAdminService service.
	SystemAdminServiceName = "avion.system_admin.v1.SystemAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemAdminServiceGetSystemHealthProcedure is the fully-qualified name of the
	// SystemAdminService's GetSystemHealth RPC.
	SystemAdminServiceGetSystemHealthProcedure = "/avion.system_admin.v1.SystemAdminService/GetSystemHealth"
	// SystemAdminServiceStreamSystemHealthProcedure is the fully-qualified name of the
	// SystemAdminService's StreamSystemHealth RPC.
	SystemAdminServiceStreamSystemHealthProcedure = "/avion.system_admin.v1.SystemAdminService/StreamSystemHealth"
	// SystemAdminServiceGetSystemConfigProcedure is the fully-qualified name of the
	// SystemAdminService's GetSystemConfig RPC.
	SystemAdminServiceGetSystemConfigProcedure = "/avion.system_admin.v1.SystemAdminService/GetSystemConfig"
	// SystemAdminServiceListSystemConfigsProcedure is the fully-qualified name of the
	// SystemAdminService's ListSystemConfigs RPC.
	SystemAdminServiceListSystemConfigsProcedure = "/avion.system_admin.v1.SystemAdminService/ListSystemConfigs"
	// SystemAdminServiceUpdateSystemConfigProcedure is the fully-qualified name of the
	// SystemAdminService's UpdateSystemConfig RPC.
	SystemAdminServiceUpdateSystemConfigProcedure = "/avion.system_admin.v1.SystemAdminService/UpdateSystemConfig"
	// SystemAdminServiceCreateAuditLogProcedure is the fully-qualified name of the SystemAdminService's
	// CreateAuditLog RPC.
	SystemAdminServiceCreateAuditLogProcedure = "/avion.system_admin.v1.SystemAdminService/CreateAuditLog"
	// SystemAdminServiceSearchAuditLogsProcedure is the fully-qualified name of the
	// SystemAdminService's SearchAuditLogs RPC.
	SystemAdminServiceSearchAuditLogsProcedure = "/avion.system_admin.v1.SystemAdminService/SearchAuditLogs"
	// SystemAdminServiceCreateBackupProcedure is the fully-qualified name of the SystemAdminService's
	// CreateBackup RPC.
	SystemAdminServiceCreateBackupProcedure = "/avion.system_admin.v1.SystemAdminService/CreateBackup"
	// SystemAdminServiceListBackupsProcedure is the fully-qualified name of the SystemAdminService's
	// ListBackups RPC.
	SystemAdminServiceListBackupsProcedure = "/avion.system_admin.v1.SystemAdminService/ListBackups"
	// SystemAdminServiceRestoreBackupProcedure is the fully-qualified name of the SystemAdminService's
	// RestoreBackup RPC.
	SystemAdminServiceRestoreBackupProcedure = "/avion.system_admin.v1.SystemAdminService/RestoreBackup"
	// SystemAdminServiceVerifyBackupProcedure is the fully-qualified name of the SystemAdminService's
	// VerifyBackup RPC.
	SystemAdminServiceVerifyBackupProcedure = "/avion.system_admin.v1.SystemAdminService/VerifyBackup"
	// SystemAdminServiceCreateMaintenanceWindowProcedure is the fully-qualified name of the
	// SystemAdminService's CreateMaintenanceWindow RPC.
	SystemAdminServiceCreateMaintenanceWindowProcedure = "/avion.system_admin.v1.SystemAdminService/CreateMaintenanceWindow"
	// SystemAdminServiceUpdateMaintenanceWindowProcedure is the fully-qualified name of the
	// SystemAdminService's UpdateMaintenanceWindow RPC.
	SystemAdminServiceUpdateMaintenanceWindowProcedure = "/avion.system_admin.v1.SystemAdminService/UpdateMaintenanceWindow"
	// SystemAdminServiceEndMaintenanceProcedure is the fully-qualified name of the SystemAdminService's
	// EndMaintenance RPC.
	SystemAdminServiceEndMaintenanceProcedure = "/avion.system_admin.v1.SystemAdminService/EndMaintenance"
	// SystemAdminServiceGetSystemStatsProcedure is the fully-qualified name of the SystemAdminService's
	// GetSystemStats RPC.
	SystemAdminServiceGetSystemStatsProcedure = "/avion.system_admin.v1.SystemAdminService/GetSystemStats"
	// SystemAdminServiceGenerateReportProcedure is the fully-qualified name of the SystemAdminService's
	// GenerateReport RPC.
	SystemAdminServiceGenerateReportProcedure = "/avion.system_admin.v1.SystemAdminService/GenerateReport"
	// SystemAdminServiceListAlertsProcedure is the fully-qualified name of the SystemAdminService's
	// ListAlerts RPC.
	SystemAdminServiceListAlertsProcedure = "/avion.system_admin.v1.SystemAdminService/ListAlerts"
	// SystemAdminServiceAcknowledgeAlertProcedure is the fully-qualified name of the
	// SystemAdminService's AcknowledgeAlert RPC.
	SystemAdminServiceAcknowledgeAlertProcedure = "/avion.system_admin.v1.SystemAdminService/AcknowledgeAlert"
	// SystemAdminServiceResolveAlertProcedure is the fully-qualified name of the SystemAdminService's
	// ResolveAlert RPC.
	SystemAdminServiceResolveAlertProcedure = "/avion.system_admin.v1.SystemAdminService/ResolveAlert"
	// SystemAdminServiceStreamAlertsProcedure is the fully-qualified name of the SystemAdminService's
	// StreamAlerts RPC.
	SystemAdminServiceStreamAlertsProcedure = "/avion.system_admin.v1.SystemAdminService/StreamAlerts"
	// SystemAdminServiceExecuteAdminActionProcedure is the fully-qualified name of the
	// SystemAdminService's ExecuteAdminAction RPC.
	SystemAdminServiceExecuteAdminActionProcedure = "/avion.system_admin.v1.SystemAdminService/ExecuteAdminAction"
	// SystemAdminServiceReverseAdminActionProcedure is the fully-qualified name of the
	// SystemAdminService's ReverseAdminAction RPC.
	SystemAdminServiceReverseAdminActionProcedure = "/avion.system_admin.v1.SystemAdminService/ReverseAdminAction"
	// SystemAdminServiceListAdminActionsProcedure is the fully-qualified name of the
	// SystemAdminService's ListAdminActions RPC.
	SystemAdminServiceListAdminActionsProcedure = "/avion.system_admin.v1.SystemAdminService/ListAdminActions"
	// SystemAdminServiceControlServiceProcedure is the fully-qualified name of the SystemAdminService's
	// ControlService RPC.
	SystemAdminServiceControlServiceProcedure = "/avion.system_admin.v1.SystemAdminService/ControlService"
	// SystemAdminServiceListServicesProcedure is the fully-qualified name of the SystemAdminService's
	// ListServices RPC.
	SystemAdminServiceListServicesProcedure = "/avion.system_admin.v1.SystemAdminService/ListServices"
	// SystemAdminServiceScaleServiceProcedure is the fully-qualified name of the SystemAdminService's
	// ScaleService RPC.
	SystemAdminServiceScaleServiceProcedure = "/avion.system_admin.v1.SystemAdminService/ScaleService"
	// SystemAdminServiceClearCacheProcedure is the fully-qualified name of the SystemAdminService's
	// ClearCache RPC.
	SystemAdminServiceClearCacheProcedure = "/avion.system_admin.v1.SystemAdminService/ClearCache"
	// SystemAdminServiceGetCacheInfoProcedure is the fully-qualified name of the SystemAdminService's
	// GetCacheInfo RPC.
	SystemAdminServiceGetCacheInfoProcedure = "/avion.system_admin.v1.SystemAdminService/GetCacheInfo"
)

// SystemAdminServiceClient is a client for the avion.system_admin.v1.SystemAdminService service.
type SystemAdminServiceClient interface {
	// GetSystemHealth はシステムサービスのヘルス状態を取得する
	GetSystemHealth(context.Context, *connect.Request[v1.GetSystemHealthRequest]) (*connect.Response[v1.GetSystemHealthResponse], error)
	// StreamSystemHealth はリアルタイムのヘルス更新をストリーミングする
	StreamSystemHealth(context.Context, *connect.Request[v1.StreamSystemHealthRequest]) (*connect.ServerStreamForClient[v1.StreamSystemHealthResponse], error)
	// GetSystemConfig はシステム設定を取得する
	GetSystemConfig(context.Context, *connect.Request[v1.GetSystemConfigRequest]) (*connect.Response[v1.GetSystemConfigResponse], error)
	// ListSystemConfigs はすべてのシステム設定をリストする
	ListSystemConfigs(context.Context, *connect.Request[v1.ListSystemConfigsRequest]) (*connect.Response[v1.ListSystemConfigsResponse], error)
	// UpdateSystemConfig はシステム設定を更新する
	UpdateSystemConfig(context.Context, *connect.Request[v1.UpdateSystemConfigRequest]) (*connect.Response[v1.UpdateSystemConfigResponse], error)
	// CreateAuditLog は監査ログエントリを作成する
	CreateAuditLog(context.Context, *connect.Request[v1.CreateAuditLogRequest]) (*connect.Response[v1.CreateAuditLogResponse], error)
	// SearchAuditLogs は監査ログを検索する
	SearchAuditLogs(context.Context, *connect.Request[v1.SearchAuditLogsRequest]) (*connect.Response[v1.SearchAuditLogsResponse], error)
	// CreateBackup はシステムバックアップを作成する
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// ListBackups は利用可能なバックアップをリストする
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// RestoreBackup はバックアップから復元する
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// VerifyBackup はバックアップの整合性を検証する
	VerifyBackup(context.Context, *connect.Request[v1.VerifyBackupRequest]) (*connect.Response[v1.VerifyBackupResponse], error)
	// CreateMaintenanceWindow はメンテナンスウィンドウを作成する
	CreateMaintenanceWindow(context.Context, *connect.Request[v1.CreateMaintenanceWindowRequest]) (*connect.Response[v1.CreateMaintenanceWindowResponse], error)
	// UpdateMaintenanceWindow はメンテナンスウィンドウを更新する
	UpdateMaintenanceWindow(context.Context, *connect.Request[v1.UpdateMaintenanceWindowRequest]) (*connect.Response[v1.UpdateMaintenanceWindowResponse], error)
	// EndMaintenance は現在のメンテナンスを終了する
	EndMaintenance(context.Context, *connect.Request[v1.EndMaintenanceRequest]) (*connect.Response[v1.EndMaintenanceResponse], error)
	// GetSystemStats はシステム統計を取得する
	GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error)
	// GenerateReport はシステムレポートを生成する
	GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error)
	// ListAlerts はシステムアラートをリストする
	ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error)
	// AcknowledgeAlert はアラートを確認する
	AcknowledgeAlert(context.Context, *connect.Request[v1.AcknowledgeAlertRequest]) (*connect.Response[v1.AcknowledgeAlertResponse], error)
	// ResolveAlert はアラートを解決する
	ResolveAlert(context.Context, *connect.Request[v1.ResolveAlertRequest]) (*connect.Response[v1.ResolveAlertResponse], error)
	// StreamAlerts はリアルタイムアラートをストリーミングする
	StreamAlerts(context.Context, *connect.Request[v1.StreamAlertsRequest]) (*connect.ServerStreamForClient[v1.StreamAlertsResponse], error)
	// ExecuteAdminAction は管理アクションを実行する
	ExecuteAdminAction(context.Context, *connect.Request[v1.ExecuteAdminActionRequest]) (*connect.Response[v1.ExecuteAdminActionResponse], error)
	// ReverseAdminAction は管理アクションを取り消す
	ReverseAdminAction(context.Context, *connect.Request[v1.ReverseAdminActionRequest]) (*connect.Response[v1.ReverseAdminActionResponse], error)
	// ListAdminActions は管理アクションをリストする
	ListAdminActions(context.Context, *connect.Request[v1.ListAdminActionsRequest]) (*connect.Response[v1.ListAdminActionsResponse], error)
	// ControlService はサービスのライフサイクルを制御する
	ControlService(context.Context, *connect.Request[v1.ControlServiceRequest]) (*connect.Response[v1.ControlServiceResponse], error)
	// ListServices はすべてのサービスをリストする
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	// ScaleService はサービスをスケールする
	ScaleService(context.Context, *connect.Request[v1.ScaleServiceRequest]) (*connect.Response[v1.ScaleServiceResponse], error)
	// ClearCache はシステムキャッシュをクリアする
	ClearCache(context.Context, *connect.Request[v1.ClearCacheRequest]) (*connect.Response[v1.ClearCacheResponse], error)
	// GetCacheInfo はキャッシュ情報を取得する
	GetCacheInfo(context.Context, *connect.Request[v1.GetCacheInfoRequest]) (*connect.Response[v1.GetCacheInfoResponse], error)
}

// NewSystemAdminServiceClient constructs a client for the avion.system_admin.v1.SystemAdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemAdminServiceMethods := v1.File_avion_system_admin_v1_system_admin_service_proto.Services().ByName("SystemAdminService").Methods()
	return &systemAdminServiceClient{
		getSystemHealth: connect.NewClient[v1.GetSystemHealthRequest, v1.GetSystemHealthResponse](
			httpClient,
			baseURL+SystemAdminServiceGetSystemHealthProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemHealth")),
			connect.WithClientOptions(opts...),
		),
		streamSystemHealth: connect.NewClient[v1.StreamSystemHealthRequest, v1.StreamSystemHealthResponse](
			httpClient,
			baseURL+SystemAdminServiceStreamSystemHealthProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("StreamSystemHealth")),
			connect.WithClientOptions(opts...),
		),
		getSystemConfig: connect.NewClient[v1.GetSystemConfigRequest, v1.GetSystemConfigResponse](
			httpClient,
			baseURL+SystemAdminServiceGetSystemConfigProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemConfig")),
			connect.WithClientOptions(opts...),
		),
		listSystemConfigs: connect.NewClient[v1.ListSystemConfigsRequest, v1.ListSystemConfigsResponse](
			httpClient,
			baseURL+SystemAdminServiceListSystemConfigsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ListSystemConfigs")),
			connect.WithClientOptions(opts...),
		),
		updateSystemConfig: connect.NewClient[v1.UpdateSystemConfigRequest, v1.UpdateSystemConfigResponse](
			httpClient,
			baseURL+SystemAdminServiceUpdateSystemConfigProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("UpdateSystemConfig")),
			connect.WithClientOptions(opts...),
		),
		createAuditLog: connect.NewClient[v1.CreateAuditLogRequest, v1.CreateAuditLogResponse](
			httpClient,
			baseURL+SystemAdminServiceCreateAuditLogProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("CreateAuditLog")),
			connect.WithClientOptions(opts...),
		),
		searchAuditLogs: connect.NewClient[v1.SearchAuditLogsRequest, v1.SearchAuditLogsResponse](
			httpClient,
			baseURL+SystemAdminServiceSearchAuditLogsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("SearchAuditLogs")),
			connect.WithClientOptions(opts...),
		),
		createBackup: connect.NewClient[v1.CreateBackupRequest, v1.CreateBackupResponse](
			httpClient,
			baseURL+SystemAdminServiceCreateBackupProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("CreateBackup")),
			connect.WithClientOptions(opts...),
		),
		listBackups: connect.NewClient[v1.ListBackupsRequest, v1.ListBackupsResponse](
			httpClient,
			baseURL+SystemAdminServiceListBackupsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ListBackups")),
			connect.WithClientOptions(opts...),
		),
		restoreBackup: connect.NewClient[v1.RestoreBackupRequest, v1.RestoreBackupResponse](
			httpClient,
			baseURL+SystemAdminServiceRestoreBackupProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("RestoreBackup")),
			connect.WithClientOptions(opts...),
		),
		verifyBackup: connect.NewClient[v1.VerifyBackupRequest, v1.VerifyBackupResponse](
			httpClient,
			baseURL+SystemAdminServiceVerifyBackupProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("VerifyBackup")),
			connect.WithClientOptions(opts...),
		),
		createMaintenanceWindow: connect.NewClient[v1.CreateMaintenanceWindowRequest, v1.CreateMaintenanceWindowResponse](
			httpClient,
			baseURL+SystemAdminServiceCreateMaintenanceWindowProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("CreateMaintenanceWindow")),
			connect.WithClientOptions(opts...),
		),
		updateMaintenanceWindow: connect.NewClient[v1.UpdateMaintenanceWindowRequest, v1.UpdateMaintenanceWindowResponse](
			httpClient,
			baseURL+SystemAdminServiceUpdateMaintenanceWindowProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("UpdateMaintenanceWindow")),
			connect.WithClientOptions(opts...),
		),
		endMaintenance: connect.NewClient[v1.EndMaintenanceRequest, v1.EndMaintenanceResponse](
			httpClient,
			baseURL+SystemAdminServiceEndMaintenanceProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("EndMaintenance")),
			connect.WithClientOptions(opts...),
		),
		getSystemStats: connect.NewClient[v1.GetSystemStatsRequest, v1.GetSystemStatsResponse](
			httpClient,
			baseURL+SystemAdminServiceGetSystemStatsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemStats")),
			connect.WithClientOptions(opts...),
		),
		generateReport: connect.NewClient[v1.GenerateReportRequest, v1.GenerateReportResponse](
			httpClient,
			baseURL+SystemAdminServiceGenerateReportProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("GenerateReport")),
			connect.WithClientOptions(opts...),
		),
		listAlerts: connect.NewClient[v1.ListAlertsRequest, v1.ListAlertsResponse](
			httpClient,
			baseURL+SystemAdminServiceListAlertsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ListAlerts")),
			connect.WithClientOptions(opts...),
		),
		acknowledgeAlert: connect.NewClient[v1.AcknowledgeAlertRequest, v1.AcknowledgeAlertResponse](
			httpClient,
			baseURL+SystemAdminServiceAcknowledgeAlertProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("AcknowledgeAlert")),
			connect.WithClientOptions(opts...),
		),
		resolveAlert: connect.NewClient[v1.ResolveAlertRequest, v1.ResolveAlertResponse](
			httpClient,
			baseURL+SystemAdminServiceResolveAlertProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ResolveAlert")),
			connect.WithClientOptions(opts...),
		),
		streamAlerts: connect.NewClient[v1.StreamAlertsRequest, v1.StreamAlertsResponse](
			httpClient,
			baseURL+SystemAdminServiceStreamAlertsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("StreamAlerts")),
			connect.WithClientOptions(opts...),
		),
		executeAdminAction: connect.NewClient[v1.ExecuteAdminActionRequest, v1.ExecuteAdminActionResponse](
			httpClient,
			baseURL+SystemAdminServiceExecuteAdminActionProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ExecuteAdminAction")),
			connect.WithClientOptions(opts...),
		),
		reverseAdminAction: connect.NewClient[v1.ReverseAdminActionRequest, v1.ReverseAdminActionResponse](
			httpClient,
			baseURL+SystemAdminServiceReverseAdminActionProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ReverseAdminAction")),
			connect.WithClientOptions(opts...),
		),
		listAdminActions: connect.NewClient[v1.ListAdminActionsRequest, v1.ListAdminActionsResponse](
			httpClient,
			baseURL+SystemAdminServiceListAdminActionsProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ListAdminActions")),
			connect.WithClientOptions(opts...),
		),
		controlService: connect.NewClient[v1.ControlServiceRequest, v1.ControlServiceResponse](
			httpClient,
			baseURL+SystemAdminServiceControlServiceProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ControlService")),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[v1.ListServicesRequest, v1.ListServicesResponse](
			httpClient,
			baseURL+SystemAdminServiceListServicesProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ListServices")),
			connect.WithClientOptions(opts...),
		),
		scaleService: connect.NewClient[v1.ScaleServiceRequest, v1.ScaleServiceResponse](
			httpClient,
			baseURL+SystemAdminServiceScaleServiceProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ScaleService")),
			connect.WithClientOptions(opts...),
		),
		clearCache: connect.NewClient[v1.ClearCacheRequest, v1.ClearCacheResponse](
			httpClient,
			baseURL+SystemAdminServiceClearCacheProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("ClearCache")),
			connect.WithClientOptions(opts...),
		),
		getCacheInfo: connect.NewClient[v1.GetCacheInfoRequest, v1.GetCacheInfoResponse](
			httpClient,
			baseURL+SystemAdminServiceGetCacheInfoProcedure,
			connect.WithSchema(systemAdminServiceMethods.ByName("GetCacheInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemAdminServiceClient implements SystemAdminServiceClient.
type systemAdminServiceClient struct {
	getSystemHealth         *connect.Client[v1.GetSystemHealthRequest, v1.GetSystemHealthResponse]
	streamSystemHealth      *connect.Client[v1.StreamSystemHealthRequest, v1.StreamSystemHealthResponse]
	getSystemConfig         *connect.Client[v1.GetSystemConfigRequest, v1.GetSystemConfigResponse]
	listSystemConfigs       *connect.Client[v1.ListSystemConfigsRequest, v1.ListSystemConfigsResponse]
	updateSystemConfig      *connect.Client[v1.UpdateSystemConfigRequest, v1.UpdateSystemConfigResponse]
	createAuditLog          *connect.Client[v1.CreateAuditLogRequest, v1.CreateAuditLogResponse]
	searchAuditLogs         *connect.Client[v1.SearchAuditLogsRequest, v1.SearchAuditLogsResponse]
	createBackup            *connect.Client[v1.CreateBackupRequest, v1.CreateBackupResponse]
	listBackups             *connect.Client[v1.ListBackupsRequest, v1.ListBackupsResponse]
	restoreBackup           *connect.Client[v1.RestoreBackupRequest, v1.RestoreBackupResponse]
	verifyBackup            *connect.Client[v1.VerifyBackupRequest, v1.VerifyBackupResponse]
	createMaintenanceWindow *connect.Client[v1.CreateMaintenanceWindowRequest, v1.CreateMaintenanceWindowResponse]
	updateMaintenanceWindow *connect.Client[v1.UpdateMaintenanceWindowRequest, v1.UpdateMaintenanceWindowResponse]
	endMaintenance          *connect.Client[v1.EndMaintenanceRequest, v1.EndMaintenanceResponse]
	getSystemStats          *connect.Client[v1.GetSystemStatsRequest, v1.GetSystemStatsResponse]
	generateReport          *connect.Client[v1.GenerateReportRequest, v1.GenerateReportResponse]
	listAlerts              *connect.Client[v1.ListAlertsRequest, v1.ListAlertsResponse]
	acknowledgeAlert        *connect.Client[v1.AcknowledgeAlertRequest, v1.AcknowledgeAlertResponse]
	resolveAlert            *connect.Client[v1.ResolveAlertRequest, v1.ResolveAlertResponse]
	streamAlerts            *connect.Client[v1.StreamAlertsRequest, v1.StreamAlertsResponse]
	executeAdminAction      *connect.Client[v1.ExecuteAdminActionRequest, v1.ExecuteAdminActionResponse]
	reverseAdminAction      *connect.Client[v1.ReverseAdminActionRequest, v1.ReverseAdminActionResponse]
	listAdminActions        *connect.Client[v1.ListAdminActionsRequest, v1.ListAdminActionsResponse]
	controlService          *connect.Client[v1.ControlServiceRequest, v1.ControlServiceResponse]
	listServices            *connect.Client[v1.ListServicesRequest, v1.ListServicesResponse]
	scaleService            *connect.Client[v1.ScaleServiceRequest, v1.ScaleServiceResponse]
	clearCache              *connect.Client[v1.ClearCacheRequest, v1.ClearCacheResponse]
	getCacheInfo            *connect.Client[v1.GetCacheInfoRequest, v1.GetCacheInfoResponse]
}

// GetSystemHealth calls avion.system_admin.v1.SystemAdminService.GetSystemHealth.
func (c *systemAdminServiceClient) GetSystemHealth(ctx context.Context, req *connect.Request[v1.GetSystemHealthRequest]) (*connect.Response[v1.GetSystemHealthResponse], error) {
	return c.getSystemHealth.CallUnary(ctx, req)
}

// StreamSystemHealth calls avion.system_admin.v1.SystemAdminService.StreamSystemHealth.
func (c *systemAdminServiceClient) StreamSystemHealth(ctx context.Context, req *connect.Request[v1.StreamSystemHealthRequest]) (*connect.ServerStreamForClient[v1.StreamSystemHealthResponse], error) {
	return c.streamSystemHealth.CallServerStream(ctx, req)
}

// GetSystemConfig calls avion.system_admin.v1.SystemAdminService.GetSystemConfig.
func (c *systemAdminServiceClient) GetSystemConfig(ctx context.Context, req *connect.Request[v1.GetSystemConfigRequest]) (*connect.Response[v1.GetSystemConfigResponse], error) {
	return c.getSystemConfig.CallUnary(ctx, req)
}

// ListSystemConfigs calls avion.system_admin.v1.SystemAdminService.ListSystemConfigs.
func (c *systemAdminServiceClient) ListSystemConfigs(ctx context.Context, req *connect.Request[v1.ListSystemConfigsRequest]) (*connect.Response[v1.ListSystemConfigsResponse], error) {
	return c.listSystemConfigs.CallUnary(ctx, req)
}

// UpdateSystemConfig calls avion.system_admin.v1.SystemAdminService.UpdateSystemConfig.
func (c *systemAdminServiceClient) UpdateSystemConfig(ctx context.Context, req *connect.Request[v1.UpdateSystemConfigRequest]) (*connect.Response[v1.UpdateSystemConfigResponse], error) {
	return c.updateSystemConfig.CallUnary(ctx, req)
}

// CreateAuditLog calls avion.system_admin.v1.SystemAdminService.CreateAuditLog.
func (c *systemAdminServiceClient) CreateAuditLog(ctx context.Context, req *connect.Request[v1.CreateAuditLogRequest]) (*connect.Response[v1.CreateAuditLogResponse], error) {
	return c.createAuditLog.CallUnary(ctx, req)
}

// SearchAuditLogs calls avion.system_admin.v1.SystemAdminService.SearchAuditLogs.
func (c *systemAdminServiceClient) SearchAuditLogs(ctx context.Context, req *connect.Request[v1.SearchAuditLogsRequest]) (*connect.Response[v1.SearchAuditLogsResponse], error) {
	return c.searchAuditLogs.CallUnary(ctx, req)
}

// CreateBackup calls avion.system_admin.v1.SystemAdminService.CreateBackup.
func (c *systemAdminServiceClient) CreateBackup(ctx context.Context, req *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return c.createBackup.CallUnary(ctx, req)
}

// ListBackups calls avion.system_admin.v1.SystemAdminService.ListBackups.
func (c *systemAdminServiceClient) ListBackups(ctx context.Context, req *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return c.listBackups.CallUnary(ctx, req)
}

// RestoreBackup calls avion.system_admin.v1.SystemAdminService.RestoreBackup.
func (c *systemAdminServiceClient) RestoreBackup(ctx context.Context, req *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return c.restoreBackup.CallUnary(ctx, req)
}

// VerifyBackup calls avion.system_admin.v1.SystemAdminService.VerifyBackup.
func (c *systemAdminServiceClient) VerifyBackup(ctx context.Context, req *connect.Request[v1.VerifyBackupRequest]) (*connect.Response[v1.VerifyBackupResponse], error) {
	return c.verifyBackup.CallUnary(ctx, req)
}

// CreateMaintenanceWindow calls avion.system_admin.v1.SystemAdminService.CreateMaintenanceWindow.
func (c *systemAdminServiceClient) CreateMaintenanceWindow(ctx context.Context, req *connect.Request[v1.CreateMaintenanceWindowRequest]) (*connect.Response[v1.CreateMaintenanceWindowResponse], error) {
	return c.createMaintenanceWindow.CallUnary(ctx, req)
}

// UpdateMaintenanceWindow calls avion.system_admin.v1.SystemAdminService.UpdateMaintenanceWindow.
func (c *systemAdminServiceClient) UpdateMaintenanceWindow(ctx context.Context, req *connect.Request[v1.UpdateMaintenanceWindowRequest]) (*connect.Response[v1.UpdateMaintenanceWindowResponse], error) {
	return c.updateMaintenanceWindow.CallUnary(ctx, req)
}

// EndMaintenance calls avion.system_admin.v1.SystemAdminService.EndMaintenance.
func (c *systemAdminServiceClient) EndMaintenance(ctx context.Context, req *connect.Request[v1.EndMaintenanceRequest]) (*connect.Response[v1.EndMaintenanceResponse], error) {
	return c.endMaintenance.CallUnary(ctx, req)
}

// GetSystemStats calls avion.system_admin.v1.SystemAdminService.GetSystemStats.
func (c *systemAdminServiceClient) GetSystemStats(ctx context.Context, req *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error) {
	return c.getSystemStats.CallUnary(ctx, req)
}

// GenerateReport calls avion.system_admin.v1.SystemAdminService.GenerateReport.
func (c *systemAdminServiceClient) GenerateReport(ctx context.Context, req *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error) {
	return c.generateReport.CallUnary(ctx, req)
}

// ListAlerts calls avion.system_admin.v1.SystemAdminService.ListAlerts.
func (c *systemAdminServiceClient) ListAlerts(ctx context.Context, req *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error) {
	return c.listAlerts.CallUnary(ctx, req)
}

// AcknowledgeAlert calls avion.system_admin.v1.SystemAdminService.AcknowledgeAlert.
func (c *systemAdminServiceClient) AcknowledgeAlert(ctx context.Context, req *connect.Request[v1.AcknowledgeAlertRequest]) (*connect.Response[v1.AcknowledgeAlertResponse], error) {
	return c.acknowledgeAlert.CallUnary(ctx, req)
}

// ResolveAlert calls avion.system_admin.v1.SystemAdminService.ResolveAlert.
func (c *systemAdminServiceClient) ResolveAlert(ctx context.Context, req *connect.Request[v1.ResolveAlertRequest]) (*connect.Response[v1.ResolveAlertResponse], error) {
	return c.resolveAlert.CallUnary(ctx, req)
}

// StreamAlerts calls avion.system_admin.v1.SystemAdminService.StreamAlerts.
func (c *systemAdminServiceClient) StreamAlerts(ctx context.Context, req *connect.Request[v1.StreamAlertsRequest]) (*connect.ServerStreamForClient[v1.StreamAlertsResponse], error) {
	return c.streamAlerts.CallServerStream(ctx, req)
}

// ExecuteAdminAction calls avion.system_admin.v1.SystemAdminService.ExecuteAdminAction.
func (c *systemAdminServiceClient) ExecuteAdminAction(ctx context.Context, req *connect.Request[v1.ExecuteAdminActionRequest]) (*connect.Response[v1.ExecuteAdminActionResponse], error) {
	return c.executeAdminAction.CallUnary(ctx, req)
}

// ReverseAdminAction calls avion.system_admin.v1.SystemAdminService.ReverseAdminAction.
func (c *systemAdminServiceClient) ReverseAdminAction(ctx context.Context, req *connect.Request[v1.ReverseAdminActionRequest]) (*connect.Response[v1.ReverseAdminActionResponse], error) {
	return c.reverseAdminAction.CallUnary(ctx, req)
}

// ListAdminActions calls avion.system_admin.v1.SystemAdminService.ListAdminActions.
func (c *systemAdminServiceClient) ListAdminActions(ctx context.Context, req *connect.Request[v1.ListAdminActionsRequest]) (*connect.Response[v1.ListAdminActionsResponse], error) {
	return c.listAdminActions.CallUnary(ctx, req)
}

// ControlService calls avion.system_admin.v1.SystemAdminService.ControlService.
func (c *systemAdminServiceClient) ControlService(ctx context.Context, req *connect.Request[v1.ControlServiceRequest]) (*connect.Response[v1.ControlServiceResponse], error) {
	return c.controlService.CallUnary(ctx, req)
}

// ListServices calls avion.system_admin.v1.SystemAdminService.ListServices.
func (c *systemAdminServiceClient) ListServices(ctx context.Context, req *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return c.listServices.CallUnary(ctx, req)
}

// ScaleService calls avion.system_admin.v1.SystemAdminService.ScaleService.
func (c *systemAdminServiceClient) ScaleService(ctx context.Context, req *connect.Request[v1.ScaleServiceRequest]) (*connect.Response[v1.ScaleServiceResponse], error) {
	return c.scaleService.CallUnary(ctx, req)
}

// ClearCache calls avion.system_admin.v1.SystemAdminService.ClearCache.
func (c *systemAdminServiceClient) ClearCache(ctx context.Context, req *connect.Request[v1.ClearCacheRequest]) (*connect.Response[v1.ClearCacheResponse], error) {
	return c.clearCache.CallUnary(ctx, req)
}

// GetCacheInfo calls avion.system_admin.v1.SystemAdminService.GetCacheInfo.
func (c *systemAdminServiceClient) GetCacheInfo(ctx context.Context, req *connect.Request[v1.GetCacheInfoRequest]) (*connect.Response[v1.GetCacheInfoResponse], error) {
	return c.getCacheInfo.CallUnary(ctx, req)
}

// SystemAdminServiceHandler is an implementation of the avion.system_admin.v1.SystemAdminService
// service.
type SystemAdminServiceHandler interface {
	// GetSystemHealth はシステムサービスのヘルス状態を取得する
	GetSystemHealth(context.Context, *connect.Request[v1.GetSystemHealthRequest]) (*connect.Response[v1.GetSystemHealthResponse], error)
	// StreamSystemHealth はリアルタイムのヘルス更新をストリーミングする
	StreamSystemHealth(context.Context, *connect.Request[v1.StreamSystemHealthRequest], *connect.ServerStream[v1.StreamSystemHealthResponse]) error
	// GetSystemConfig はシステム設定を取得する
	GetSystemConfig(context.Context, *connect.Request[v1.GetSystemConfigRequest]) (*connect.Response[v1.GetSystemConfigResponse], error)
	// ListSystemConfigs はすべてのシステム設定をリストする
	ListSystemConfigs(context.Context, *connect.Request[v1.ListSystemConfigsRequest]) (*connect.Response[v1.ListSystemConfigsResponse], error)
	// UpdateSystemConfig はシステム設定を更新する
	UpdateSystemConfig(context.Context, *connect.Request[v1.UpdateSystemConfigRequest]) (*connect.Response[v1.UpdateSystemConfigResponse], error)
	// CreateAuditLog は監査ログエントリを作成する
	CreateAuditLog(context.Context, *connect.Request[v1.CreateAuditLogRequest]) (*connect.Response[v1.CreateAuditLogResponse], error)
	// SearchAuditLogs は監査ログを検索する
	SearchAuditLogs(context.Context, *connect.Request[v1.SearchAuditLogsRequest]) (*connect.Response[v1.SearchAuditLogsResponse], error)
	// CreateBackup はシステムバックアップを作成する
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// ListBackups は利用可能なバックアップをリストする
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// RestoreBackup はバックアップから復元する
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// VerifyBackup はバックアップの整合性を検証する
	VerifyBackup(context.Context, *connect.Request[v1.VerifyBackupRequest]) (*connect.Response[v1.VerifyBackupResponse], error)
	// CreateMaintenanceWindow はメンテナンスウィンドウを作成する
	CreateMaintenanceWindow(context.Context, *connect.Request[v1.CreateMaintenanceWindowRequest]) (*connect.Response[v1.CreateMaintenanceWindowResponse], error)
	// UpdateMaintenanceWindow はメンテナンスウィンドウを更新する
	UpdateMaintenanceWindow(context.Context, *connect.Request[v1.UpdateMaintenanceWindowRequest]) (*connect.Response[v1.UpdateMaintenanceWindowResponse], error)
	// EndMaintenance は現在のメンテナンスを終了する
	EndMaintenance(context.Context, *connect.Request[v1.EndMaintenanceRequest]) (*connect.Response[v1.EndMaintenanceResponse], error)
	// GetSystemStats はシステム統計を取得する
	GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error)
	// GenerateReport はシステムレポートを生成する
	GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error)
	// ListAlerts はシステムアラートをリストする
	ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error)
	// AcknowledgeAlert はアラートを確認する
	AcknowledgeAlert(context.Context, *connect.Request[v1.AcknowledgeAlertRequest]) (*connect.Response[v1.AcknowledgeAlertResponse], error)
	// ResolveAlert はアラートを解決する
	ResolveAlert(context.Context, *connect.Request[v1.ResolveAlertRequest]) (*connect.Response[v1.ResolveAlertResponse], error)
	// StreamAlerts はリアルタイムアラートをストリーミングする
	StreamAlerts(context.Context, *connect.Request[v1.StreamAlertsRequest], *connect.ServerStream[v1.StreamAlertsResponse]) error
	// ExecuteAdminAction は管理アクションを実行する
	ExecuteAdminAction(context.Context, *connect.Request[v1.ExecuteAdminActionRequest]) (*connect.Response[v1.ExecuteAdminActionResponse], error)
	// ReverseAdminAction は管理アクションを取り消す
	ReverseAdminAction(context.Context, *connect.Request[v1.ReverseAdminActionRequest]) (*connect.Response[v1.ReverseAdminActionResponse], error)
	// ListAdminActions は管理アクションをリストする
	ListAdminActions(context.Context, *connect.Request[v1.ListAdminActionsRequest]) (*connect.Response[v1.ListAdminActionsResponse], error)
	// ControlService はサービスのライフサイクルを制御する
	ControlService(context.Context, *connect.Request[v1.ControlServiceRequest]) (*connect.Response[v1.ControlServiceResponse], error)
	// ListServices はすべてのサービスをリストする
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	// ScaleService はサービスをスケールする
	ScaleService(context.Context, *connect.Request[v1.ScaleServiceRequest]) (*connect.Response[v1.ScaleServiceResponse], error)
	// ClearCache はシステムキャッシュをクリアする
	ClearCache(context.Context, *connect.Request[v1.ClearCacheRequest]) (*connect.Response[v1.ClearCacheResponse], error)
	// GetCacheInfo はキャッシュ情報を取得する
	GetCacheInfo(context.Context, *connect.Request[v1.GetCacheInfoRequest]) (*connect.Response[v1.GetCacheInfoResponse], error)
}

// NewSystemAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemAdminServiceHandler(svc SystemAdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemAdminServiceMethods := v1.File_avion_system_admin_v1_system_admin_service_proto.Services().ByName("SystemAdminService").Methods()
	systemAdminServiceGetSystemHealthHandler := connect.NewUnaryHandler(
		SystemAdminServiceGetSystemHealthProcedure,
		svc.GetSystemHealth,
		connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemHealth")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceStreamSystemHealthHandler := connect.NewServerStreamHandler(
		SystemAdminServiceStreamSystemHealthProcedure,
		svc.StreamSystemHealth,
		connect.WithSchema(systemAdminServiceMethods.ByName("StreamSystemHealth")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceGetSystemConfigHandler := connect.NewUnaryHandler(
		SystemAdminServiceGetSystemConfigProcedure,
		svc.GetSystemConfig,
		connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemConfig")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceListSystemConfigsHandler := connect.NewUnaryHandler(
		SystemAdminServiceListSystemConfigsProcedure,
		svc.ListSystemConfigs,
		connect.WithSchema(systemAdminServiceMethods.ByName("ListSystemConfigs")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceUpdateSystemConfigHandler := connect.NewUnaryHandler(
		SystemAdminServiceUpdateSystemConfigProcedure,
		svc.UpdateSystemConfig,
		connect.WithSchema(systemAdminServiceMethods.ByName("UpdateSystemConfig")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceCreateAuditLogHandler := connect.NewUnaryHandler(
		SystemAdminServiceCreateAuditLogProcedure,
		svc.CreateAuditLog,
		connect.WithSchema(systemAdminServiceMethods.ByName("CreateAuditLog")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceSearchAuditLogsHandler := connect.NewUnaryHandler(
		SystemAdminServiceSearchAuditLogsProcedure,
		svc.SearchAuditLogs,
		connect.WithSchema(systemAdminServiceMethods.ByName("SearchAuditLogs")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceCreateBackupHandler := connect.NewUnaryHandler(
		SystemAdminServiceCreateBackupProcedure,
		svc.CreateBackup,
		connect.WithSchema(systemAdminServiceMethods.ByName("CreateBackup")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceListBackupsHandler := connect.NewUnaryHandler(
		SystemAdminServiceListBackupsProcedure,
		svc.ListBackups,
		connect.WithSchema(systemAdminServiceMethods.ByName("ListBackups")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceRestoreBackupHandler := connect.NewUnaryHandler(
		SystemAdminServiceRestoreBackupProcedure,
		svc.RestoreBackup,
		connect.WithSchema(systemAdminServiceMethods.ByName("RestoreBackup")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceVerifyBackupHandler := connect.NewUnaryHandler(
		SystemAdminServiceVerifyBackupProcedure,
		svc.VerifyBackup,
		connect.WithSchema(systemAdminServiceMethods.ByName("VerifyBackup")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceCreateMaintenanceWindowHandler := connect.NewUnaryHandler(
		SystemAdminServiceCreateMaintenanceWindowProcedure,
		svc.CreateMaintenanceWindow,
		connect.WithSchema(systemAdminServiceMethods.ByName("CreateMaintenanceWindow")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceUpdateMaintenanceWindowHandler := connect.NewUnaryHandler(
		SystemAdminServiceUpdateMaintenanceWindowProcedure,
		svc.UpdateMaintenanceWindow,
		connect.WithSchema(systemAdminServiceMethods.ByName("UpdateMaintenanceWindow")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceEndMaintenanceHandler := connect.NewUnaryHandler(
		SystemAdminServiceEndMaintenanceProcedure,
		svc.EndMaintenance,
		connect.WithSchema(systemAdminServiceMethods.ByName("EndMaintenance")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceGetSystemStatsHandler := connect.NewUnaryHandler(
		SystemAdminServiceGetSystemStatsProcedure,
		svc.GetSystemStats,
		connect.WithSchema(systemAdminServiceMethods.ByName("GetSystemStats")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceGenerateReportHandler := connect.NewUnaryHandler(
		SystemAdminServiceGenerateReportProcedure,
		svc.GenerateReport,
		connect.WithSchema(systemAdminServiceMethods.ByName("GenerateReport")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceListAlertsHandler := connect.NewUnaryHandler(
		SystemAdminServiceListAlertsProcedure,
		svc.ListAlerts,
		connect.WithSchema(systemAdminServiceMethods.ByName("ListAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceAcknowledgeAlertHandler := connect.NewUnaryHandler(
		SystemAdminServiceAcknowledgeAlertProcedure,
		svc.AcknowledgeAlert,
		connect.WithSchema(systemAdminServiceMethods.ByName("AcknowledgeAlert")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceResolveAlertHandler := connect.NewUnaryHandler(
		SystemAdminServiceResolveAlertProcedure,
		svc.ResolveAlert,
		connect.WithSchema(systemAdminServiceMethods.ByName("ResolveAlert")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceStreamAlertsHandler := connect.NewServerStreamHandler(
		SystemAdminServiceStreamAlertsProcedure,
		svc.StreamAlerts,
		connect.WithSchema(systemAdminServiceMethods.ByName("StreamAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceExecuteAdminActionHandler := connect.NewUnaryHandler(
		SystemAdminServiceExecuteAdminActionProcedure,
		svc.ExecuteAdminAction,
		connect.WithSchema(systemAdminServiceMethods.ByName("ExecuteAdminAction")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceReverseAdminActionHandler := connect.NewUnaryHandler(
		SystemAdminServiceReverseAdminActionProcedure,
		svc.ReverseAdminAction,
		connect.WithSchema(systemAdminServiceMethods.ByName("ReverseAdminAction")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceListAdminActionsHandler := connect.NewUnaryHandler(
		SystemAdminServiceListAdminActionsProcedure,
		svc.ListAdminActions,
		connect.WithSchema(systemAdminServiceMethods.ByName("ListAdminActions")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceControlServiceHandler := connect.NewUnaryHandler(
		SystemAdminServiceControlServiceProcedure,
		svc.ControlService,
		connect.WithSchema(systemAdminServiceMethods.ByName("ControlService")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceListServicesHandler := connect.NewUnaryHandler(
		SystemAdminServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(systemAdminServiceMethods.ByName("ListServices")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceScaleServiceHandler := connect.NewUnaryHandler(
		SystemAdminServiceScaleServiceProcedure,
		svc.ScaleService,
		connect.WithSchema(systemAdminServiceMethods.ByName("ScaleService")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceClearCacheHandler := connect.NewUnaryHandler(
		SystemAdminServiceClearCacheProcedure,
		svc.ClearCache,
		connect.WithSchema(systemAdminServiceMethods.ByName("ClearCache")),
		connect.WithHandlerOptions(opts...),
	)
	systemAdminServiceGetCacheInfoHandler := connect.NewUnaryHandler(
		SystemAdminServiceGetCacheInfoProcedure,
		svc.GetCacheInfo,
		connect.WithSchema(systemAdminServiceMethods.ByName("GetCacheInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.system_admin.v1.SystemAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemAdminServiceGetSystemHealthProcedure:
			systemAdminServiceGetSystemHealthHandler.ServeHTTP(w, r)
		case SystemAdminServiceStreamSystemHealthProcedure:
			systemAdminServiceStreamSystemHealthHandler.ServeHTTP(w, r)
		case SystemAdminServiceGetSystemConfigProcedure:
			systemAdminServiceGetSystemConfigHandler.ServeHTTP(w, r)
		case SystemAdminServiceListSystemConfigsProcedure:
			systemAdminServiceListSystemConfigsHandler.ServeHTTP(w, r)
		case SystemAdminServiceUpdateSystemConfigProcedure:
			systemAdminServiceUpdateSystemConfigHandler.ServeHTTP(w, r)
		case SystemAdminServiceCreateAuditLogProcedure:
			systemAdminServiceCreateAuditLogHandler.ServeHTTP(w, r)
		case SystemAdminServiceSearchAuditLogsProcedure:
			systemAdminServiceSearchAuditLogsHandler.ServeHTTP(w, r)
		case SystemAdminServiceCreateBackupProcedure:
			systemAdminServiceCreateBackupHandler.ServeHTTP(w, r)
		case SystemAdminServiceListBackupsProcedure:
			systemAdminServiceListBackupsHandler.ServeHTTP(w, r)
		case SystemAdminServiceRestoreBackupProcedure:
			systemAdminServiceRestoreBackupHandler.ServeHTTP(w, r)
		case SystemAdminServiceVerifyBackupProcedure:
			systemAdminServiceVerifyBackupHandler.ServeHTTP(w, r)
		case SystemAdminServiceCreateMaintenanceWindowProcedure:
			systemAdminServiceCreateMaintenanceWindowHandler.ServeHTTP(w, r)
		case SystemAdminServiceUpdateMaintenanceWindowProcedure:
			systemAdminServiceUpdateMaintenanceWindowHandler.ServeHTTP(w, r)
		case SystemAdminServiceEndMaintenanceProcedure:
			systemAdminServiceEndMaintenanceHandler.ServeHTTP(w, r)
		case SystemAdminServiceGetSystemStatsProcedure:
			systemAdminServiceGetSystemStatsHandler.ServeHTTP(w, r)
		case SystemAdminServiceGenerateReportProcedure:
			systemAdminServiceGenerateReportHandler.ServeHTTP(w, r)
		case SystemAdminServiceListAlertsProcedure:
			systemAdminServiceListAlertsHandler.ServeHTTP(w, r)
		case SystemAdminServiceAcknowledgeAlertProcedure:
			systemAdminServiceAcknowledgeAlertHandler.ServeHTTP(w, r)
		case SystemAdminServiceResolveAlertProcedure:
			systemAdminServiceResolveAlertHandler.ServeHTTP(w, r)
		case SystemAdminServiceStreamAlertsProcedure:
			systemAdminServiceStreamAlertsHandler.ServeHTTP(w, r)
		case SystemAdminServiceExecuteAdminActionProcedure:
			systemAdminServiceExecuteAdminActionHandler.ServeHTTP(w, r)
		case SystemAdminServiceReverseAdminActionProcedure:
			systemAdminServiceReverseAdminActionHandler.ServeHTTP(w, r)
		case SystemAdminServiceListAdminActionsProcedure:
			systemAdminServiceListAdminActionsHandler.ServeHTTP(w, r)
		case SystemAdminServiceControlServiceProcedure:
			systemAdminServiceControlServiceHandler.ServeHTTP(w, r)
		case SystemAdminServiceListServicesProcedure:
			systemAdminServiceListServicesHandler.ServeHTTP(w, r)
		case SystemAdminServiceScaleServiceProcedure:
			systemAdminServiceScaleServiceHandler.ServeHTTP(w, r)
		case SystemAdminServiceClearCacheProcedure:
			systemAdminServiceClearCacheHandler.ServeHTTP(w, r)
		case SystemAdminServiceGetCacheInfoProcedure:
			systemAdminServiceGetCacheInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemAdminServiceHandler struct{}

func (UnimplementedSystemAdminServiceHandler) GetSystemHealth(context.Context, *connect.Request[v1.GetSystemHealthRequest]) (*connect.Response[v1.GetSystemHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.GetSystemHealth is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) StreamSystemHealth(context.Context, *connect.Request[v1.StreamSystemHealthRequest], *connect.ServerStream[v1.StreamSystemHealthResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.StreamSystemHealth is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) GetSystemConfig(context.Context, *connect.Request[v1.GetSystemConfigRequest]) (*connect.Response[v1.GetSystemConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.GetSystemConfig is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ListSystemConfigs(context.Context, *connect.Request[v1.ListSystemConfigsRequest]) (*connect.Response[v1.ListSystemConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ListSystemConfigs is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) UpdateSystemConfig(context.Context, *connect.Request[v1.UpdateSystemConfigRequest]) (*connect.Response[v1.UpdateSystemConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.UpdateSystemConfig is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) CreateAuditLog(context.Context, *connect.Request[v1.CreateAuditLogRequest]) (*connect.Response[v1.CreateAuditLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.CreateAuditLog is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) SearchAuditLogs(context.Context, *connect.Request[v1.SearchAuditLogsRequest]) (*connect.Response[v1.SearchAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.SearchAuditLogs is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.CreateBackup is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ListBackups is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.RestoreBackup is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) VerifyBackup(context.Context, *connect.Request[v1.VerifyBackupRequest]) (*connect.Response[v1.VerifyBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.VerifyBackup is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) CreateMaintenanceWindow(context.Context, *connect.Request[v1.CreateMaintenanceWindowRequest]) (*connect.Response[v1.CreateMaintenanceWindowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.CreateMaintenanceWindow is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) UpdateMaintenanceWindow(context.Context, *connect.Request[v1.UpdateMaintenanceWindowRequest]) (*connect.Response[v1.UpdateMaintenanceWindowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.UpdateMaintenanceWindow is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) EndMaintenance(context.Context, *connect.Request[v1.EndMaintenanceRequest]) (*connect.Response[v1.EndMaintenanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.EndMaintenance is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.GetSystemStats is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.GenerateReport is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ListAlerts is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) AcknowledgeAlert(context.Context, *connect.Request[v1.AcknowledgeAlertRequest]) (*connect.Response[v1.AcknowledgeAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.AcknowledgeAlert is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ResolveAlert(context.Context, *connect.Request[v1.ResolveAlertRequest]) (*connect.Response[v1.ResolveAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ResolveAlert is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) StreamAlerts(context.Context, *connect.Request[v1.StreamAlertsRequest], *connect.ServerStream[v1.StreamAlertsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.StreamAlerts is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ExecuteAdminAction(context.Context, *connect.Request[v1.ExecuteAdminActionRequest]) (*connect.Response[v1.ExecuteAdminActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ExecuteAdminAction is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ReverseAdminAction(context.Context, *connect.Request[v1.ReverseAdminActionRequest]) (*connect.Response[v1.ReverseAdminActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ReverseAdminAction is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ListAdminActions(context.Context, *connect.Request[v1.ListAdminActionsRequest]) (*connect.Response[v1.ListAdminActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ListAdminActions is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ControlService(context.Context, *connect.Request[v1.ControlServiceRequest]) (*connect.Response[v1.ControlServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ControlService is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ListServices is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ScaleService(context.Context, *connect.Request[v1.ScaleServiceRequest]) (*connect.Response[v1.ScaleServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ScaleService is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) ClearCache(context.Context, *connect.Request[v1.ClearCacheRequest]) (*connect.Response[v1.ClearCacheResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.ClearCache is not implemented"))
}

func (UnimplementedSystemAdminServiceHandler) GetCacheInfo(context.Context, *connect.Request[v1.GetCacheInfoRequest]) (*connect.Response[v1.GetCacheInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.system_admin.v1.SystemAdminService.GetCacheInfo is not implemented"))
}
