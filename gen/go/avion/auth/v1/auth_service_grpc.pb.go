// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/auth/v1/auth_service.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Login_FullMethodName                      = "/avion.auth.v1.AuthService/Login"
	AuthService_Logout_FullMethodName                     = "/avion.auth.v1.AuthService/Logout"
	AuthService_RefreshToken_FullMethodName               = "/avion.auth.v1.AuthService/RefreshToken"
	AuthService_ValidateToken_FullMethodName              = "/avion.auth.v1.AuthService/ValidateToken"
	AuthService_CreateUser_FullMethodName                 = "/avion.auth.v1.AuthService/CreateUser"
	AuthService_VerifyEmail_FullMethodName                = "/avion.auth.v1.AuthService/VerifyEmail"
	AuthService_ResendVerificationEmail_FullMethodName    = "/avion.auth.v1.AuthService/ResendVerificationEmail"
	AuthService_RequestPasswordReset_FullMethodName       = "/avion.auth.v1.AuthService/RequestPasswordReset"
	AuthService_ResetPassword_FullMethodName              = "/avion.auth.v1.AuthService/ResetPassword"
	AuthService_ChangePassword_FullMethodName             = "/avion.auth.v1.AuthService/ChangePassword"
	AuthService_ChangeEmail_FullMethodName                = "/avion.auth.v1.AuthService/ChangeEmail"
	AuthService_DeleteAccount_FullMethodName              = "/avion.auth.v1.AuthService/DeleteAccount"
	AuthService_CancelAccountDeletion_FullMethodName      = "/avion.auth.v1.AuthService/CancelAccountDeletion"
	AuthService_EnableMfa_FullMethodName                  = "/avion.auth.v1.AuthService/EnableMfa"
	AuthService_DisableMfa_FullMethodName                 = "/avion.auth.v1.AuthService/DisableMfa"
	AuthService_SetupTotp_FullMethodName                  = "/avion.auth.v1.AuthService/SetupTotp"
	AuthService_VerifyTotp_FullMethodName                 = "/avion.auth.v1.AuthService/VerifyTotp"
	AuthService_GenerateBackupCodes_FullMethodName        = "/avion.auth.v1.AuthService/GenerateBackupCodes"
	AuthService_VerifyBackupCode_FullMethodName           = "/avion.auth.v1.AuthService/VerifyBackupCode"
	AuthService_ListMfaDevices_FullMethodName             = "/avion.auth.v1.AuthService/ListMfaDevices"
	AuthService_GetMfaDevice_FullMethodName               = "/avion.auth.v1.AuthService/GetMfaDevice"
	AuthService_UpdateMfaDevice_FullMethodName            = "/avion.auth.v1.AuthService/UpdateMfaDevice"
	AuthService_MfaChallenge_FullMethodName               = "/avion.auth.v1.AuthService/MfaChallenge"
	AuthService_VerifyMfaChallenge_FullMethodName         = "/avion.auth.v1.AuthService/VerifyMfaChallenge"
	AuthService_RegisterPasskeyOptions_FullMethodName     = "/avion.auth.v1.AuthService/RegisterPasskeyOptions"
	AuthService_RegisterPasskey_FullMethodName            = "/avion.auth.v1.AuthService/RegisterPasskey"
	AuthService_AuthenticatePasskeyOptions_FullMethodName = "/avion.auth.v1.AuthService/AuthenticatePasskeyOptions"
	AuthService_AuthenticatePasskey_FullMethodName        = "/avion.auth.v1.AuthService/AuthenticatePasskey"
	AuthService_ListPasskeys_FullMethodName               = "/avion.auth.v1.AuthService/ListPasskeys"
	AuthService_GetPasskey_FullMethodName                 = "/avion.auth.v1.AuthService/GetPasskey"
	AuthService_UpdatePasskey_FullMethodName              = "/avion.auth.v1.AuthService/UpdatePasskey"
	AuthService_DeletePasskey_FullMethodName              = "/avion.auth.v1.AuthService/DeletePasskey"
	AuthService_RevokePasskey_FullMethodName              = "/avion.auth.v1.AuthService/RevokePasskey"
	AuthService_GetOAuthAuthorizationUrl_FullMethodName   = "/avion.auth.v1.AuthService/GetOAuthAuthorizationUrl"
	AuthService_HandleOAuthCallback_FullMethodName        = "/avion.auth.v1.AuthService/HandleOAuthCallback"
	AuthService_ConnectOAuthAccount_FullMethodName        = "/avion.auth.v1.AuthService/ConnectOAuthAccount"
	AuthService_DisconnectOAuthAccount_FullMethodName     = "/avion.auth.v1.AuthService/DisconnectOAuthAccount"
	AuthService_ListOAuthConnections_FullMethodName       = "/avion.auth.v1.AuthService/ListOAuthConnections"
	AuthService_GetOAuthConnection_FullMethodName         = "/avion.auth.v1.AuthService/GetOAuthConnection"
	AuthService_RefreshOAuthToken_FullMethodName          = "/avion.auth.v1.AuthService/RefreshOAuthToken"
	AuthService_ListOAuthProviders_FullMethodName         = "/avion.auth.v1.AuthService/ListOAuthProviders"
	AuthService_GetOAuthUserInfo_FullMethodName           = "/avion.auth.v1.AuthService/GetOAuthUserInfo"
	AuthService_CreateSession_FullMethodName              = "/avion.auth.v1.AuthService/CreateSession"
	AuthService_GetSession_FullMethodName                 = "/avion.auth.v1.AuthService/GetSession"
	AuthService_ListSessions_FullMethodName               = "/avion.auth.v1.AuthService/ListSessions"
	AuthService_ValidateSession_FullMethodName            = "/avion.auth.v1.AuthService/ValidateSession"
	AuthService_UpdateSession_FullMethodName              = "/avion.auth.v1.AuthService/UpdateSession"
	AuthService_ExtendSession_FullMethodName              = "/avion.auth.v1.AuthService/ExtendSession"
	AuthService_RevokeSession_FullMethodName              = "/avion.auth.v1.AuthService/RevokeSession"
	AuthService_GetSessionStats_FullMethodName            = "/avion.auth.v1.AuthService/GetSessionStats"
	AuthService_RecoverAccount_FullMethodName             = "/avion.auth.v1.AuthService/RecoverAccount"
	AuthService_ExportAccountData_FullMethodName          = "/avion.auth.v1.AuthService/ExportAccountData"
	AuthService_GetExportStatus_FullMethodName            = "/avion.auth.v1.AuthService/GetExportStatus"
	AuthService_ImportAccountData_FullMethodName          = "/avion.auth.v1.AuthService/ImportAccountData"
	AuthService_GetLoginHistory_FullMethodName            = "/avion.auth.v1.AuthService/GetLoginHistory"
	AuthService_GetSecurityAuditLog_FullMethodName        = "/avion.auth.v1.AuthService/GetSecurityAuditLog"
	AuthService_GetUserPreferences_FullMethodName         = "/avion.auth.v1.AuthService/GetUserPreferences"
	AuthService_UpdateUserPreferences_FullMethodName      = "/avion.auth.v1.AuthService/UpdateUserPreferences"
	AuthService_ResetUserPreferences_FullMethodName       = "/avion.auth.v1.AuthService/ResetUserPreferences"
	AuthService_EvaluatePolicy_FullMethodName             = "/avion.auth.v1.AuthService/EvaluatePolicy"
	AuthService_CreatePolicy_FullMethodName               = "/avion.auth.v1.AuthService/CreatePolicy"
	AuthService_GetPolicy_FullMethodName                  = "/avion.auth.v1.AuthService/GetPolicy"
	AuthService_UpdatePolicy_FullMethodName               = "/avion.auth.v1.AuthService/UpdatePolicy"
	AuthService_DeletePolicy_FullMethodName               = "/avion.auth.v1.AuthService/DeletePolicy"
	AuthService_ListPolicies_FullMethodName               = "/avion.auth.v1.AuthService/ListPolicies"
	AuthService_AssignPolicy_FullMethodName               = "/avion.auth.v1.AuthService/AssignPolicy"
	AuthService_UnassignPolicy_FullMethodName             = "/avion.auth.v1.AuthService/UnassignPolicy"
	AuthService_ListUserPolicies_FullMethodName           = "/avion.auth.v1.AuthService/ListUserPolicies"
	AuthService_GenerateJwt_FullMethodName                = "/avion.auth.v1.AuthService/GenerateJwt"
	AuthService_VerifyJwt_FullMethodName                  = "/avion.auth.v1.AuthService/VerifyJwt"
	AuthService_RefreshJwt_FullMethodName                 = "/avion.auth.v1.AuthService/RefreshJwt"
	AuthService_RevokeJwt_FullMethodName                  = "/avion.auth.v1.AuthService/RevokeJwt"
	AuthService_IntrospectJwt_FullMethodName              = "/avion.auth.v1.AuthService/IntrospectJwt"
	AuthService_GetJwks_FullMethodName                    = "/avion.auth.v1.AuthService/GetJwks"
	AuthService_GetJwtConfig_FullMethodName               = "/avion.auth.v1.AuthService/GetJwtConfig"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// 認証関連
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// ユーザー登録関連
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	ResendVerificationEmail(ctx context.Context, in *ResendVerificationEmailRequest, opts ...grpc.CallOption) (*ResendVerificationEmailResponse, error)
	// パスワード管理
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// アカウント管理
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	CancelAccountDeletion(ctx context.Context, in *CancelAccountDeletionRequest, opts ...grpc.CallOption) (*CancelAccountDeletionResponse, error)
	// MFA/TOTP関連
	EnableMfa(ctx context.Context, in *EnableMfaRequest, opts ...grpc.CallOption) (*EnableMfaResponse, error)
	DisableMfa(ctx context.Context, in *DisableMfaRequest, opts ...grpc.CallOption) (*DisableMfaResponse, error)
	SetupTotp(ctx context.Context, in *SetupTotpRequest, opts ...grpc.CallOption) (*SetupTotpResponse, error)
	VerifyTotp(ctx context.Context, in *VerifyTotpRequest, opts ...grpc.CallOption) (*VerifyTotpResponse, error)
	GenerateBackupCodes(ctx context.Context, in *GenerateBackupCodesRequest, opts ...grpc.CallOption) (*GenerateBackupCodesResponse, error)
	VerifyBackupCode(ctx context.Context, in *VerifyBackupCodeRequest, opts ...grpc.CallOption) (*VerifyBackupCodeResponse, error)
	ListMfaDevices(ctx context.Context, in *ListMfaDevicesRequest, opts ...grpc.CallOption) (*ListMfaDevicesResponse, error)
	GetMfaDevice(ctx context.Context, in *GetMfaDeviceRequest, opts ...grpc.CallOption) (*GetMfaDeviceResponse, error)
	UpdateMfaDevice(ctx context.Context, in *UpdateMfaDeviceRequest, opts ...grpc.CallOption) (*UpdateMfaDeviceResponse, error)
	MfaChallenge(ctx context.Context, in *MfaChallengeRequest, opts ...grpc.CallOption) (*MfaChallengeResponse, error)
	VerifyMfaChallenge(ctx context.Context, in *VerifyMfaChallengeRequest, opts ...grpc.CallOption) (*VerifyMfaChallengeResponse, error)
	// Passkey/WebAuthn関連
	RegisterPasskeyOptions(ctx context.Context, in *RegisterPasskeyOptionsRequest, opts ...grpc.CallOption) (*RegisterPasskeyOptionsResponse, error)
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	AuthenticatePasskeyOptions(ctx context.Context, in *AuthenticatePasskeyOptionsRequest, opts ...grpc.CallOption) (*AuthenticatePasskeyOptionsResponse, error)
	AuthenticatePasskey(ctx context.Context, in *AuthenticatePasskeyRequest, opts ...grpc.CallOption) (*AuthenticatePasskeyResponse, error)
	ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error)
	GetPasskey(ctx context.Context, in *GetPasskeyRequest, opts ...grpc.CallOption) (*GetPasskeyResponse, error)
	UpdatePasskey(ctx context.Context, in *UpdatePasskeyRequest, opts ...grpc.CallOption) (*UpdatePasskeyResponse, error)
	DeletePasskey(ctx context.Context, in *DeletePasskeyRequest, opts ...grpc.CallOption) (*DeletePasskeyResponse, error)
	RevokePasskey(ctx context.Context, in *RevokePasskeyRequest, opts ...grpc.CallOption) (*RevokePasskeyResponse, error)
	// OAuth2.0/OIDC関連
	GetOAuthAuthorizationUrl(ctx context.Context, in *GetOAuthAuthorizationUrlRequest, opts ...grpc.CallOption) (*GetOAuthAuthorizationUrlResponse, error)
	HandleOAuthCallback(ctx context.Context, in *HandleOAuthCallbackRequest, opts ...grpc.CallOption) (*HandleOAuthCallbackResponse, error)
	ConnectOAuthAccount(ctx context.Context, in *ConnectOAuthAccountRequest, opts ...grpc.CallOption) (*ConnectOAuthAccountResponse, error)
	DisconnectOAuthAccount(ctx context.Context, in *DisconnectOAuthAccountRequest, opts ...grpc.CallOption) (*DisconnectOAuthAccountResponse, error)
	ListOAuthConnections(ctx context.Context, in *ListOAuthConnectionsRequest, opts ...grpc.CallOption) (*ListOAuthConnectionsResponse, error)
	GetOAuthConnection(ctx context.Context, in *GetOAuthConnectionRequest, opts ...grpc.CallOption) (*GetOAuthConnectionResponse, error)
	RefreshOAuthToken(ctx context.Context, in *RefreshOAuthTokenRequest, opts ...grpc.CallOption) (*RefreshOAuthTokenResponse, error)
	ListOAuthProviders(ctx context.Context, in *ListOAuthProvidersRequest, opts ...grpc.CallOption) (*ListOAuthProvidersResponse, error)
	GetOAuthUserInfo(ctx context.Context, in *GetOAuthUserInfoRequest, opts ...grpc.CallOption) (*GetOAuthUserInfoResponse, error)
	// セッション管理
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error)
	RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*RevokeSessionResponse, error)
	GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error)
	// アカウント復旧
	RecoverAccount(ctx context.Context, in *RecoverAccountRequest, opts ...grpc.CallOption) (*RecoverAccountResponse, error)
	// アカウントエクスポート（GDPR対応）
	ExportAccountData(ctx context.Context, in *ExportAccountDataRequest, opts ...grpc.CallOption) (*ExportAccountDataResponse, error)
	GetExportStatus(ctx context.Context, in *GetExportStatusRequest, opts ...grpc.CallOption) (*GetExportStatusResponse, error)
	// アカウントインポート
	ImportAccountData(ctx context.Context, in *ImportAccountDataRequest, opts ...grpc.CallOption) (*ImportAccountDataResponse, error)
	// ログイン履歴とセキュリティ
	GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...grpc.CallOption) (*GetLoginHistoryResponse, error)
	GetSecurityAuditLog(ctx context.Context, in *GetSecurityAuditLogRequest, opts ...grpc.CallOption) (*GetSecurityAuditLogResponse, error)
	// ユーザー設定管理
	GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error)
	UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error)
	ResetUserPreferences(ctx context.Context, in *ResetUserPreferencesRequest, opts ...grpc.CallOption) (*ResetUserPreferencesResponse, error)
	// ポリシー管理
	EvaluatePolicy(ctx context.Context, in *EvaluatePolicyRequest, opts ...grpc.CallOption) (*EvaluatePolicyResponse, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	AssignPolicy(ctx context.Context, in *AssignPolicyRequest, opts ...grpc.CallOption) (*AssignPolicyResponse, error)
	UnassignPolicy(ctx context.Context, in *UnassignPolicyRequest, opts ...grpc.CallOption) (*UnassignPolicyResponse, error)
	ListUserPolicies(ctx context.Context, in *ListUserPoliciesRequest, opts ...grpc.CallOption) (*ListUserPoliciesResponse, error)
	// JWT管理
	GenerateJwt(ctx context.Context, in *GenerateJwtRequest, opts ...grpc.CallOption) (*GenerateJwtResponse, error)
	VerifyJwt(ctx context.Context, in *VerifyJwtRequest, opts ...grpc.CallOption) (*VerifyJwtResponse, error)
	RefreshJwt(ctx context.Context, in *RefreshJwtRequest, opts ...grpc.CallOption) (*RefreshJwtResponse, error)
	RevokeJwt(ctx context.Context, in *RevokeJwtRequest, opts ...grpc.CallOption) (*RevokeJwtResponse, error)
	IntrospectJwt(ctx context.Context, in *IntrospectJwtRequest, opts ...grpc.CallOption) (*IntrospectJwtResponse, error)
	GetJwks(ctx context.Context, in *GetJwksRequest, opts ...grpc.CallOption) (*GetJwksResponse, error)
	GetJwtConfig(ctx context.Context, in *GetJwtConfigRequest, opts ...grpc.CallOption) (*GetJwtConfigResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, AuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendVerificationEmail(ctx context.Context, in *ResendVerificationEmailRequest, opts ...grpc.CallOption) (*ResendVerificationEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendVerificationEmailResponse)
	err := c.cc.Invoke(ctx, AuthService_ResendVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPasswordResetResponse)
	err := c.cc.Invoke(ctx, AuthService_RequestPasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEmailResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CancelAccountDeletion(ctx context.Context, in *CancelAccountDeletionRequest, opts ...grpc.CallOption) (*CancelAccountDeletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAccountDeletionResponse)
	err := c.cc.Invoke(ctx, AuthService_CancelAccountDeletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableMfa(ctx context.Context, in *EnableMfaRequest, opts ...grpc.CallOption) (*EnableMfaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableMfaResponse)
	err := c.cc.Invoke(ctx, AuthService_EnableMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableMfa(ctx context.Context, in *DisableMfaRequest, opts ...grpc.CallOption) (*DisableMfaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableMfaResponse)
	err := c.cc.Invoke(ctx, AuthService_DisableMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetupTotp(ctx context.Context, in *SetupTotpRequest, opts ...grpc.CallOption) (*SetupTotpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetupTotpResponse)
	err := c.cc.Invoke(ctx, AuthService_SetupTotp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyTotp(ctx context.Context, in *VerifyTotpRequest, opts ...grpc.CallOption) (*VerifyTotpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTotpResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyTotp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateBackupCodes(ctx context.Context, in *GenerateBackupCodesRequest, opts ...grpc.CallOption) (*GenerateBackupCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBackupCodesResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateBackupCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyBackupCode(ctx context.Context, in *VerifyBackupCodeRequest, opts ...grpc.CallOption) (*VerifyBackupCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyBackupCodeResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyBackupCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMfaDevices(ctx context.Context, in *ListMfaDevicesRequest, opts ...grpc.CallOption) (*ListMfaDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMfaDevicesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListMfaDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMfaDevice(ctx context.Context, in *GetMfaDeviceRequest, opts ...grpc.CallOption) (*GetMfaDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMfaDeviceResponse)
	err := c.cc.Invoke(ctx, AuthService_GetMfaDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateMfaDevice(ctx context.Context, in *UpdateMfaDeviceRequest, opts ...grpc.CallOption) (*UpdateMfaDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMfaDeviceResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateMfaDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MfaChallenge(ctx context.Context, in *MfaChallengeRequest, opts ...grpc.CallOption) (*MfaChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MfaChallengeResponse)
	err := c.cc.Invoke(ctx, AuthService_MfaChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMfaChallenge(ctx context.Context, in *VerifyMfaChallengeRequest, opts ...grpc.CallOption) (*VerifyMfaChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMfaChallengeResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyMfaChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterPasskeyOptions(ctx context.Context, in *RegisterPasskeyOptionsRequest, opts ...grpc.CallOption) (*RegisterPasskeyOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPasskeyOptionsResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterPasskeyOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthenticatePasskeyOptions(ctx context.Context, in *AuthenticatePasskeyOptionsRequest, opts ...grpc.CallOption) (*AuthenticatePasskeyOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticatePasskeyOptionsResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthenticatePasskeyOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthenticatePasskey(ctx context.Context, in *AuthenticatePasskeyRequest, opts ...grpc.CallOption) (*AuthenticatePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticatePasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthenticatePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPasskeysResponse)
	err := c.cc.Invoke(ctx, AuthService_ListPasskeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPasskey(ctx context.Context, in *GetPasskeyRequest, opts ...grpc.CallOption) (*GetPasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_GetPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePasskey(ctx context.Context, in *UpdatePasskeyRequest, opts ...grpc.CallOption) (*UpdatePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdatePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeletePasskey(ctx context.Context, in *DeletePasskeyRequest, opts ...grpc.CallOption) (*DeletePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_DeletePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokePasskey(ctx context.Context, in *RevokePasskeyRequest, opts ...grpc.CallOption) (*RevokePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokePasskeyResponse)
	err := c.cc.Invoke(ctx, AuthService_RevokePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOAuthAuthorizationUrl(ctx context.Context, in *GetOAuthAuthorizationUrlRequest, opts ...grpc.CallOption) (*GetOAuthAuthorizationUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOAuthAuthorizationUrlResponse)
	err := c.cc.Invoke(ctx, AuthService_GetOAuthAuthorizationUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) HandleOAuthCallback(ctx context.Context, in *HandleOAuthCallbackRequest, opts ...grpc.CallOption) (*HandleOAuthCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleOAuthCallbackResponse)
	err := c.cc.Invoke(ctx, AuthService_HandleOAuthCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ConnectOAuthAccount(ctx context.Context, in *ConnectOAuthAccountRequest, opts ...grpc.CallOption) (*ConnectOAuthAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectOAuthAccountResponse)
	err := c.cc.Invoke(ctx, AuthService_ConnectOAuthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisconnectOAuthAccount(ctx context.Context, in *DisconnectOAuthAccountRequest, opts ...grpc.CallOption) (*DisconnectOAuthAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectOAuthAccountResponse)
	err := c.cc.Invoke(ctx, AuthService_DisconnectOAuthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListOAuthConnections(ctx context.Context, in *ListOAuthConnectionsRequest, opts ...grpc.CallOption) (*ListOAuthConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOAuthConnectionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListOAuthConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOAuthConnection(ctx context.Context, in *GetOAuthConnectionRequest, opts ...grpc.CallOption) (*GetOAuthConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOAuthConnectionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetOAuthConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshOAuthToken(ctx context.Context, in *RefreshOAuthTokenRequest, opts ...grpc.CallOption) (*RefreshOAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshOAuthTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshOAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListOAuthProviders(ctx context.Context, in *ListOAuthProvidersRequest, opts ...grpc.CallOption) (*ListOAuthProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOAuthProvidersResponse)
	err := c.cc.Invoke(ctx, AuthService_ListOAuthProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOAuthUserInfo(ctx context.Context, in *GetOAuthUserInfoRequest, opts ...grpc.CallOption) (*GetOAuthUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOAuthUserInfoResponse)
	err := c.cc.Invoke(ctx, AuthService_GetOAuthUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtendSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_ExtendSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*RevokeSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_RevokeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RecoverAccount(ctx context.Context, in *RecoverAccountRequest, opts ...grpc.CallOption) (*RecoverAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverAccountResponse)
	err := c.cc.Invoke(ctx, AuthService_RecoverAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExportAccountData(ctx context.Context, in *ExportAccountDataRequest, opts ...grpc.CallOption) (*ExportAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportAccountDataResponse)
	err := c.cc.Invoke(ctx, AuthService_ExportAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetExportStatus(ctx context.Context, in *GetExportStatusRequest, opts ...grpc.CallOption) (*GetExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExportStatusResponse)
	err := c.cc.Invoke(ctx, AuthService_GetExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ImportAccountData(ctx context.Context, in *ImportAccountDataRequest, opts ...grpc.CallOption) (*ImportAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportAccountDataResponse)
	err := c.cc.Invoke(ctx, AuthService_ImportAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...grpc.CallOption) (*GetLoginHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoginHistoryResponse)
	err := c.cc.Invoke(ctx, AuthService_GetLoginHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSecurityAuditLog(ctx context.Context, in *GetSecurityAuditLogRequest, opts ...grpc.CallOption) (*GetSecurityAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecurityAuditLogResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSecurityAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPreferencesResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPreferencesResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetUserPreferences(ctx context.Context, in *ResetUserPreferencesRequest, opts ...grpc.CallOption) (*ResetUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserPreferencesResponse)
	err := c.cc.Invoke(ctx, AuthService_ResetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EvaluatePolicy(ctx context.Context, in *EvaluatePolicyRequest, opts ...grpc.CallOption) (*EvaluatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluatePolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_EvaluatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssignPolicy(ctx context.Context, in *AssignPolicyRequest, opts ...grpc.CallOption) (*AssignPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_AssignPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UnassignPolicy(ctx context.Context, in *UnassignPolicyRequest, opts ...grpc.CallOption) (*UnassignPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignPolicyResponse)
	err := c.cc.Invoke(ctx, AuthService_UnassignPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListUserPolicies(ctx context.Context, in *ListUserPoliciesRequest, opts ...grpc.CallOption) (*ListUserPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPoliciesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListUserPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateJwt(ctx context.Context, in *GenerateJwtRequest, opts ...grpc.CallOption) (*GenerateJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateJwtResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyJwt(ctx context.Context, in *VerifyJwtRequest, opts ...grpc.CallOption) (*VerifyJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyJwtResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshJwt(ctx context.Context, in *RefreshJwtRequest, opts ...grpc.CallOption) (*RefreshJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshJwtResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeJwt(ctx context.Context, in *RevokeJwtRequest, opts ...grpc.CallOption) (*RevokeJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeJwtResponse)
	err := c.cc.Invoke(ctx, AuthService_RevokeJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) IntrospectJwt(ctx context.Context, in *IntrospectJwtRequest, opts ...grpc.CallOption) (*IntrospectJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntrospectJwtResponse)
	err := c.cc.Invoke(ctx, AuthService_IntrospectJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetJwks(ctx context.Context, in *GetJwksRequest, opts ...grpc.CallOption) (*GetJwksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJwksResponse)
	err := c.cc.Invoke(ctx, AuthService_GetJwks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetJwtConfig(ctx context.Context, in *GetJwtConfigRequest, opts ...grpc.CallOption) (*GetJwtConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJwtConfigResponse)
	err := c.cc.Invoke(ctx, AuthService_GetJwtConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	// 認証関連
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	// ユーザー登録関連
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	ResendVerificationEmail(context.Context, *ResendVerificationEmailRequest) (*ResendVerificationEmailResponse, error)
	// パスワード管理
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// アカウント管理
	ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	CancelAccountDeletion(context.Context, *CancelAccountDeletionRequest) (*CancelAccountDeletionResponse, error)
	// MFA/TOTP関連
	EnableMfa(context.Context, *EnableMfaRequest) (*EnableMfaResponse, error)
	DisableMfa(context.Context, *DisableMfaRequest) (*DisableMfaResponse, error)
	SetupTotp(context.Context, *SetupTotpRequest) (*SetupTotpResponse, error)
	VerifyTotp(context.Context, *VerifyTotpRequest) (*VerifyTotpResponse, error)
	GenerateBackupCodes(context.Context, *GenerateBackupCodesRequest) (*GenerateBackupCodesResponse, error)
	VerifyBackupCode(context.Context, *VerifyBackupCodeRequest) (*VerifyBackupCodeResponse, error)
	ListMfaDevices(context.Context, *ListMfaDevicesRequest) (*ListMfaDevicesResponse, error)
	GetMfaDevice(context.Context, *GetMfaDeviceRequest) (*GetMfaDeviceResponse, error)
	UpdateMfaDevice(context.Context, *UpdateMfaDeviceRequest) (*UpdateMfaDeviceResponse, error)
	MfaChallenge(context.Context, *MfaChallengeRequest) (*MfaChallengeResponse, error)
	VerifyMfaChallenge(context.Context, *VerifyMfaChallengeRequest) (*VerifyMfaChallengeResponse, error)
	// Passkey/WebAuthn関連
	RegisterPasskeyOptions(context.Context, *RegisterPasskeyOptionsRequest) (*RegisterPasskeyOptionsResponse, error)
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	AuthenticatePasskeyOptions(context.Context, *AuthenticatePasskeyOptionsRequest) (*AuthenticatePasskeyOptionsResponse, error)
	AuthenticatePasskey(context.Context, *AuthenticatePasskeyRequest) (*AuthenticatePasskeyResponse, error)
	ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error)
	GetPasskey(context.Context, *GetPasskeyRequest) (*GetPasskeyResponse, error)
	UpdatePasskey(context.Context, *UpdatePasskeyRequest) (*UpdatePasskeyResponse, error)
	DeletePasskey(context.Context, *DeletePasskeyRequest) (*DeletePasskeyResponse, error)
	RevokePasskey(context.Context, *RevokePasskeyRequest) (*RevokePasskeyResponse, error)
	// OAuth2.0/OIDC関連
	GetOAuthAuthorizationUrl(context.Context, *GetOAuthAuthorizationUrlRequest) (*GetOAuthAuthorizationUrlResponse, error)
	HandleOAuthCallback(context.Context, *HandleOAuthCallbackRequest) (*HandleOAuthCallbackResponse, error)
	ConnectOAuthAccount(context.Context, *ConnectOAuthAccountRequest) (*ConnectOAuthAccountResponse, error)
	DisconnectOAuthAccount(context.Context, *DisconnectOAuthAccountRequest) (*DisconnectOAuthAccountResponse, error)
	ListOAuthConnections(context.Context, *ListOAuthConnectionsRequest) (*ListOAuthConnectionsResponse, error)
	GetOAuthConnection(context.Context, *GetOAuthConnectionRequest) (*GetOAuthConnectionResponse, error)
	RefreshOAuthToken(context.Context, *RefreshOAuthTokenRequest) (*RefreshOAuthTokenResponse, error)
	ListOAuthProviders(context.Context, *ListOAuthProvidersRequest) (*ListOAuthProvidersResponse, error)
	GetOAuthUserInfo(context.Context, *GetOAuthUserInfoRequest) (*GetOAuthUserInfoResponse, error)
	// セッション管理
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	ExtendSession(context.Context, *ExtendSessionRequest) (*ExtendSessionResponse, error)
	RevokeSession(context.Context, *RevokeSessionRequest) (*RevokeSessionResponse, error)
	GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error)
	// アカウント復旧
	RecoverAccount(context.Context, *RecoverAccountRequest) (*RecoverAccountResponse, error)
	// アカウントエクスポート（GDPR対応）
	ExportAccountData(context.Context, *ExportAccountDataRequest) (*ExportAccountDataResponse, error)
	GetExportStatus(context.Context, *GetExportStatusRequest) (*GetExportStatusResponse, error)
	// アカウントインポート
	ImportAccountData(context.Context, *ImportAccountDataRequest) (*ImportAccountDataResponse, error)
	// ログイン履歴とセキュリティ
	GetLoginHistory(context.Context, *GetLoginHistoryRequest) (*GetLoginHistoryResponse, error)
	GetSecurityAuditLog(context.Context, *GetSecurityAuditLogRequest) (*GetSecurityAuditLogResponse, error)
	// ユーザー設定管理
	GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error)
	UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error)
	ResetUserPreferences(context.Context, *ResetUserPreferencesRequest) (*ResetUserPreferencesResponse, error)
	// ポリシー管理
	EvaluatePolicy(context.Context, *EvaluatePolicyRequest) (*EvaluatePolicyResponse, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	AssignPolicy(context.Context, *AssignPolicyRequest) (*AssignPolicyResponse, error)
	UnassignPolicy(context.Context, *UnassignPolicyRequest) (*UnassignPolicyResponse, error)
	ListUserPolicies(context.Context, *ListUserPoliciesRequest) (*ListUserPoliciesResponse, error)
	// JWT管理
	GenerateJwt(context.Context, *GenerateJwtRequest) (*GenerateJwtResponse, error)
	VerifyJwt(context.Context, *VerifyJwtRequest) (*VerifyJwtResponse, error)
	RefreshJwt(context.Context, *RefreshJwtRequest) (*RefreshJwtResponse, error)
	RevokeJwt(context.Context, *RevokeJwtRequest) (*RevokeJwtResponse, error)
	IntrospectJwt(context.Context, *IntrospectJwtRequest) (*IntrospectJwtResponse, error)
	GetJwks(context.Context, *GetJwksRequest) (*GetJwksResponse, error)
	GetJwtConfig(context.Context, *GetJwtConfigRequest) (*GetJwtConfigResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthServiceServer) ResendVerificationEmail(context.Context, *ResendVerificationEmailRequest) (*ResendVerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerificationEmail not implemented")
}
func (UnimplementedAuthServiceServer) RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedAuthServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAuthServiceServer) CancelAccountDeletion(context.Context, *CancelAccountDeletionRequest) (*CancelAccountDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAccountDeletion not implemented")
}
func (UnimplementedAuthServiceServer) EnableMfa(context.Context, *EnableMfaRequest) (*EnableMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMfa not implemented")
}
func (UnimplementedAuthServiceServer) DisableMfa(context.Context, *DisableMfaRequest) (*DisableMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMfa not implemented")
}
func (UnimplementedAuthServiceServer) SetupTotp(context.Context, *SetupTotpRequest) (*SetupTotpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupTotp not implemented")
}
func (UnimplementedAuthServiceServer) VerifyTotp(context.Context, *VerifyTotpRequest) (*VerifyTotpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTotp not implemented")
}
func (UnimplementedAuthServiceServer) GenerateBackupCodes(context.Context, *GenerateBackupCodesRequest) (*GenerateBackupCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBackupCodes not implemented")
}
func (UnimplementedAuthServiceServer) VerifyBackupCode(context.Context, *VerifyBackupCodeRequest) (*VerifyBackupCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBackupCode not implemented")
}
func (UnimplementedAuthServiceServer) ListMfaDevices(context.Context, *ListMfaDevicesRequest) (*ListMfaDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMfaDevices not implemented")
}
func (UnimplementedAuthServiceServer) GetMfaDevice(context.Context, *GetMfaDeviceRequest) (*GetMfaDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMfaDevice not implemented")
}
func (UnimplementedAuthServiceServer) UpdateMfaDevice(context.Context, *UpdateMfaDeviceRequest) (*UpdateMfaDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMfaDevice not implemented")
}
func (UnimplementedAuthServiceServer) MfaChallenge(context.Context, *MfaChallengeRequest) (*MfaChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MfaChallenge not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMfaChallenge(context.Context, *VerifyMfaChallengeRequest) (*VerifyMfaChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMfaChallenge not implemented")
}
func (UnimplementedAuthServiceServer) RegisterPasskeyOptions(context.Context, *RegisterPasskeyOptionsRequest) (*RegisterPasskeyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskeyOptions not implemented")
}
func (UnimplementedAuthServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedAuthServiceServer) AuthenticatePasskeyOptions(context.Context, *AuthenticatePasskeyOptionsRequest) (*AuthenticatePasskeyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticatePasskeyOptions not implemented")
}
func (UnimplementedAuthServiceServer) AuthenticatePasskey(context.Context, *AuthenticatePasskeyRequest) (*AuthenticatePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticatePasskey not implemented")
}
func (UnimplementedAuthServiceServer) ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPasskeys not implemented")
}
func (UnimplementedAuthServiceServer) GetPasskey(context.Context, *GetPasskeyRequest) (*GetPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasskey not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePasskey(context.Context, *UpdatePasskeyRequest) (*UpdatePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasskey not implemented")
}
func (UnimplementedAuthServiceServer) DeletePasskey(context.Context, *DeletePasskeyRequest) (*DeletePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePasskey not implemented")
}
func (UnimplementedAuthServiceServer) RevokePasskey(context.Context, *RevokePasskeyRequest) (*RevokePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePasskey not implemented")
}
func (UnimplementedAuthServiceServer) GetOAuthAuthorizationUrl(context.Context, *GetOAuthAuthorizationUrlRequest) (*GetOAuthAuthorizationUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthAuthorizationUrl not implemented")
}
func (UnimplementedAuthServiceServer) HandleOAuthCallback(context.Context, *HandleOAuthCallbackRequest) (*HandleOAuthCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOAuthCallback not implemented")
}
func (UnimplementedAuthServiceServer) ConnectOAuthAccount(context.Context, *ConnectOAuthAccountRequest) (*ConnectOAuthAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectOAuthAccount not implemented")
}
func (UnimplementedAuthServiceServer) DisconnectOAuthAccount(context.Context, *DisconnectOAuthAccountRequest) (*DisconnectOAuthAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectOAuthAccount not implemented")
}
func (UnimplementedAuthServiceServer) ListOAuthConnections(context.Context, *ListOAuthConnectionsRequest) (*ListOAuthConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuthConnections not implemented")
}
func (UnimplementedAuthServiceServer) GetOAuthConnection(context.Context, *GetOAuthConnectionRequest) (*GetOAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthConnection not implemented")
}
func (UnimplementedAuthServiceServer) RefreshOAuthToken(context.Context, *RefreshOAuthTokenRequest) (*RefreshOAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshOAuthToken not implemented")
}
func (UnimplementedAuthServiceServer) ListOAuthProviders(context.Context, *ListOAuthProvidersRequest) (*ListOAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuthProviders not implemented")
}
func (UnimplementedAuthServiceServer) GetOAuthUserInfo(context.Context, *GetOAuthUserInfoRequest) (*GetOAuthUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthUserInfo not implemented")
}
func (UnimplementedAuthServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAuthServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedAuthServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedAuthServiceServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedAuthServiceServer) ExtendSession(context.Context, *ExtendSessionRequest) (*ExtendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (UnimplementedAuthServiceServer) RevokeSession(context.Context, *RevokeSessionRequest) (*RevokeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSession not implemented")
}
func (UnimplementedAuthServiceServer) GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStats not implemented")
}
func (UnimplementedAuthServiceServer) RecoverAccount(context.Context, *RecoverAccountRequest) (*RecoverAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccount not implemented")
}
func (UnimplementedAuthServiceServer) ExportAccountData(context.Context, *ExportAccountDataRequest) (*ExportAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAccountData not implemented")
}
func (UnimplementedAuthServiceServer) GetExportStatus(context.Context, *GetExportStatusRequest) (*GetExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportStatus not implemented")
}
func (UnimplementedAuthServiceServer) ImportAccountData(context.Context, *ImportAccountDataRequest) (*ImportAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAccountData not implemented")
}
func (UnimplementedAuthServiceServer) GetLoginHistory(context.Context, *GetLoginHistoryRequest) (*GetLoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginHistory not implemented")
}
func (UnimplementedAuthServiceServer) GetSecurityAuditLog(context.Context, *GetSecurityAuditLogRequest) (*GetSecurityAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityAuditLog not implemented")
}
func (UnimplementedAuthServiceServer) GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPreferences not implemented")
}
func (UnimplementedAuthServiceServer) ResetUserPreferences(context.Context, *ResetUserPreferencesRequest) (*ResetUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPreferences not implemented")
}
func (UnimplementedAuthServiceServer) EvaluatePolicy(context.Context, *EvaluatePolicyRequest) (*EvaluatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatePolicy not implemented")
}
func (UnimplementedAuthServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedAuthServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedAuthServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedAuthServiceServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedAuthServiceServer) AssignPolicy(context.Context, *AssignPolicyRequest) (*AssignPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPolicy not implemented")
}
func (UnimplementedAuthServiceServer) UnassignPolicy(context.Context, *UnassignPolicyRequest) (*UnassignPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignPolicy not implemented")
}
func (UnimplementedAuthServiceServer) ListUserPolicies(context.Context, *ListUserPoliciesRequest) (*ListUserPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPolicies not implemented")
}
func (UnimplementedAuthServiceServer) GenerateJwt(context.Context, *GenerateJwtRequest) (*GenerateJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJwt not implemented")
}
func (UnimplementedAuthServiceServer) VerifyJwt(context.Context, *VerifyJwtRequest) (*VerifyJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJwt not implemented")
}
func (UnimplementedAuthServiceServer) RefreshJwt(context.Context, *RefreshJwtRequest) (*RefreshJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshJwt not implemented")
}
func (UnimplementedAuthServiceServer) RevokeJwt(context.Context, *RevokeJwtRequest) (*RevokeJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeJwt not implemented")
}
func (UnimplementedAuthServiceServer) IntrospectJwt(context.Context, *IntrospectJwtRequest) (*IntrospectJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectJwt not implemented")
}
func (UnimplementedAuthServiceServer) GetJwks(context.Context, *GetJwksRequest) (*GetJwksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwks not implemented")
}
func (UnimplementedAuthServiceServer) GetJwtConfig(context.Context, *GetJwtConfigRequest) (*GetJwtConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtConfig not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResendVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendVerificationEmail(ctx, req.(*ResendVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RequestPasswordReset(ctx, req.(*RequestPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CancelAccountDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAccountDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelAccountDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CancelAccountDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelAccountDeletion(ctx, req.(*CancelAccountDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableMfa(ctx, req.(*EnableMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DisableMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableMfa(ctx, req.(*DisableMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetupTotp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupTotpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetupTotp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetupTotp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetupTotp(ctx, req.(*SetupTotpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyTotp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTotpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyTotp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyTotp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyTotp(ctx, req.(*VerifyTotpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateBackupCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBackupCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateBackupCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateBackupCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateBackupCodes(ctx, req.(*GenerateBackupCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyBackupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBackupCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyBackupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyBackupCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyBackupCode(ctx, req.(*VerifyBackupCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMfaDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMfaDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMfaDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListMfaDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMfaDevices(ctx, req.(*ListMfaDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMfaDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMfaDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMfaDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetMfaDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMfaDevice(ctx, req.(*GetMfaDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateMfaDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMfaDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateMfaDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateMfaDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateMfaDevice(ctx, req.(*UpdateMfaDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MfaChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MfaChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MfaChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MfaChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MfaChallenge(ctx, req.(*MfaChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMfaChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMfaChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMfaChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyMfaChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMfaChallenge(ctx, req.(*VerifyMfaChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterPasskeyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterPasskeyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterPasskeyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterPasskeyOptions(ctx, req.(*RegisterPasskeyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthenticatePasskeyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasskeyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticatePasskeyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthenticatePasskeyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticatePasskeyOptions(ctx, req.(*AuthenticatePasskeyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthenticatePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticatePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthenticatePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticatePasskey(ctx, req.(*AuthenticatePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListPasskeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPasskeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListPasskeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListPasskeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListPasskeys(ctx, req.(*ListPasskeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPasskey(ctx, req.(*GetPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdatePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePasskey(ctx, req.(*UpdatePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeletePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeletePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeletePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeletePasskey(ctx, req.(*DeletePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RevokePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokePasskey(ctx, req.(*RevokePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOAuthAuthorizationUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthAuthorizationUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOAuthAuthorizationUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOAuthAuthorizationUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOAuthAuthorizationUrl(ctx, req.(*GetOAuthAuthorizationUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_HandleOAuthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOAuthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).HandleOAuthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_HandleOAuthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).HandleOAuthCallback(ctx, req.(*HandleOAuthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ConnectOAuthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectOAuthAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ConnectOAuthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ConnectOAuthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ConnectOAuthAccount(ctx, req.(*ConnectOAuthAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisconnectOAuthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectOAuthAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisconnectOAuthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DisconnectOAuthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisconnectOAuthAccount(ctx, req.(*DisconnectOAuthAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListOAuthConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListOAuthConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListOAuthConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListOAuthConnections(ctx, req.(*ListOAuthConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOAuthConnection(ctx, req.(*GetOAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshOAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshOAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshOAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshOAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshOAuthToken(ctx, req.(*RefreshOAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListOAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListOAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListOAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListOAuthProviders(ctx, req.(*ListOAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOAuthUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOAuthUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOAuthUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOAuthUserInfo(ctx, req.(*GetOAuthUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExtendSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExtendSession(ctx, req.(*ExtendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RevokeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeSession(ctx, req.(*RevokeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSessionStats(ctx, req.(*GetSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RecoverAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RecoverAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RecoverAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RecoverAccount(ctx, req.(*RecoverAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExportAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExportAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExportAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExportAccountData(ctx, req.(*ExportAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetExportStatus(ctx, req.(*GetExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ImportAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ImportAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ImportAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ImportAccountData(ctx, req.(*ImportAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetLoginHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetLoginHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetLoginHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetLoginHistory(ctx, req.(*GetLoginHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSecurityAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSecurityAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSecurityAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSecurityAuditLog(ctx, req.(*GetSecurityAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserPreferences(ctx, req.(*GetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUserPreferences(ctx, req.(*UpdateUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetUserPreferences(ctx, req.(*ResetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EvaluatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EvaluatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EvaluatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EvaluatePolicy(ctx, req.(*EvaluatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssignPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssignPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssignPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssignPolicy(ctx, req.(*AssignPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UnassignPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UnassignPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UnassignPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UnassignPolicy(ctx, req.(*UnassignPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListUserPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListUserPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListUserPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListUserPolicies(ctx, req.(*ListUserPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateJwt(ctx, req.(*GenerateJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyJwt(ctx, req.(*VerifyJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshJwt(ctx, req.(*RefreshJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RevokeJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeJwt(ctx, req.(*RevokeJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_IntrospectJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IntrospectJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_IntrospectJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IntrospectJwt(ctx, req.(*IntrospectJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetJwks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetJwks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetJwks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetJwks(ctx, req.(*GetJwksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetJwtConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwtConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetJwtConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetJwtConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetJwtConfig(ctx, req.(*GetJwtConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.auth.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthService_ValidateToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthService_CreateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthService_VerifyEmail_Handler,
		},
		{
			MethodName: "ResendVerificationEmail",
			Handler:    _AuthService_ResendVerificationEmail_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _AuthService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthService_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _AuthService_ChangeEmail_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AuthService_DeleteAccount_Handler,
		},
		{
			MethodName: "CancelAccountDeletion",
			Handler:    _AuthService_CancelAccountDeletion_Handler,
		},
		{
			MethodName: "EnableMfa",
			Handler:    _AuthService_EnableMfa_Handler,
		},
		{
			MethodName: "DisableMfa",
			Handler:    _AuthService_DisableMfa_Handler,
		},
		{
			MethodName: "SetupTotp",
			Handler:    _AuthService_SetupTotp_Handler,
		},
		{
			MethodName: "VerifyTotp",
			Handler:    _AuthService_VerifyTotp_Handler,
		},
		{
			MethodName: "GenerateBackupCodes",
			Handler:    _AuthService_GenerateBackupCodes_Handler,
		},
		{
			MethodName: "VerifyBackupCode",
			Handler:    _AuthService_VerifyBackupCode_Handler,
		},
		{
			MethodName: "ListMfaDevices",
			Handler:    _AuthService_ListMfaDevices_Handler,
		},
		{
			MethodName: "GetMfaDevice",
			Handler:    _AuthService_GetMfaDevice_Handler,
		},
		{
			MethodName: "UpdateMfaDevice",
			Handler:    _AuthService_UpdateMfaDevice_Handler,
		},
		{
			MethodName: "MfaChallenge",
			Handler:    _AuthService_MfaChallenge_Handler,
		},
		{
			MethodName: "VerifyMfaChallenge",
			Handler:    _AuthService_VerifyMfaChallenge_Handler,
		},
		{
			MethodName: "RegisterPasskeyOptions",
			Handler:    _AuthService_RegisterPasskeyOptions_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _AuthService_RegisterPasskey_Handler,
		},
		{
			MethodName: "AuthenticatePasskeyOptions",
			Handler:    _AuthService_AuthenticatePasskeyOptions_Handler,
		},
		{
			MethodName: "AuthenticatePasskey",
			Handler:    _AuthService_AuthenticatePasskey_Handler,
		},
		{
			MethodName: "ListPasskeys",
			Handler:    _AuthService_ListPasskeys_Handler,
		},
		{
			MethodName: "GetPasskey",
			Handler:    _AuthService_GetPasskey_Handler,
		},
		{
			MethodName: "UpdatePasskey",
			Handler:    _AuthService_UpdatePasskey_Handler,
		},
		{
			MethodName: "DeletePasskey",
			Handler:    _AuthService_DeletePasskey_Handler,
		},
		{
			MethodName: "RevokePasskey",
			Handler:    _AuthService_RevokePasskey_Handler,
		},
		{
			MethodName: "GetOAuthAuthorizationUrl",
			Handler:    _AuthService_GetOAuthAuthorizationUrl_Handler,
		},
		{
			MethodName: "HandleOAuthCallback",
			Handler:    _AuthService_HandleOAuthCallback_Handler,
		},
		{
			MethodName: "ConnectOAuthAccount",
			Handler:    _AuthService_ConnectOAuthAccount_Handler,
		},
		{
			MethodName: "DisconnectOAuthAccount",
			Handler:    _AuthService_DisconnectOAuthAccount_Handler,
		},
		{
			MethodName: "ListOAuthConnections",
			Handler:    _AuthService_ListOAuthConnections_Handler,
		},
		{
			MethodName: "GetOAuthConnection",
			Handler:    _AuthService_GetOAuthConnection_Handler,
		},
		{
			MethodName: "RefreshOAuthToken",
			Handler:    _AuthService_RefreshOAuthToken_Handler,
		},
		{
			MethodName: "ListOAuthProviders",
			Handler:    _AuthService_ListOAuthProviders_Handler,
		},
		{
			MethodName: "GetOAuthUserInfo",
			Handler:    _AuthService_GetOAuthUserInfo_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _AuthService_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _AuthService_GetSession_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _AuthService_ListSessions_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _AuthService_ValidateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _AuthService_UpdateSession_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _AuthService_ExtendSession_Handler,
		},
		{
			MethodName: "RevokeSession",
			Handler:    _AuthService_RevokeSession_Handler,
		},
		{
			MethodName: "GetSessionStats",
			Handler:    _AuthService_GetSessionStats_Handler,
		},
		{
			MethodName: "RecoverAccount",
			Handler:    _AuthService_RecoverAccount_Handler,
		},
		{
			MethodName: "ExportAccountData",
			Handler:    _AuthService_ExportAccountData_Handler,
		},
		{
			MethodName: "GetExportStatus",
			Handler:    _AuthService_GetExportStatus_Handler,
		},
		{
			MethodName: "ImportAccountData",
			Handler:    _AuthService_ImportAccountData_Handler,
		},
		{
			MethodName: "GetLoginHistory",
			Handler:    _AuthService_GetLoginHistory_Handler,
		},
		{
			MethodName: "GetSecurityAuditLog",
			Handler:    _AuthService_GetSecurityAuditLog_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _AuthService_GetUserPreferences_Handler,
		},
		{
			MethodName: "UpdateUserPreferences",
			Handler:    _AuthService_UpdateUserPreferences_Handler,
		},
		{
			MethodName: "ResetUserPreferences",
			Handler:    _AuthService_ResetUserPreferences_Handler,
		},
		{
			MethodName: "EvaluatePolicy",
			Handler:    _AuthService_EvaluatePolicy_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _AuthService_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _AuthService_GetPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _AuthService_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _AuthService_DeletePolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _AuthService_ListPolicies_Handler,
		},
		{
			MethodName: "AssignPolicy",
			Handler:    _AuthService_AssignPolicy_Handler,
		},
		{
			MethodName: "UnassignPolicy",
			Handler:    _AuthService_UnassignPolicy_Handler,
		},
		{
			MethodName: "ListUserPolicies",
			Handler:    _AuthService_ListUserPolicies_Handler,
		},
		{
			MethodName: "GenerateJwt",
			Handler:    _AuthService_GenerateJwt_Handler,
		},
		{
			MethodName: "VerifyJwt",
			Handler:    _AuthService_VerifyJwt_Handler,
		},
		{
			MethodName: "RefreshJwt",
			Handler:    _AuthService_RefreshJwt_Handler,
		},
		{
			MethodName: "RevokeJwt",
			Handler:    _AuthService_RevokeJwt_Handler,
		},
		{
			MethodName: "IntrospectJwt",
			Handler:    _AuthService_IntrospectJwt_Handler,
		},
		{
			MethodName: "GetJwks",
			Handler:    _AuthService_GetJwks_Handler,
		},
		{
			MethodName: "GetJwtConfig",
			Handler:    _AuthService_GetJwtConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/auth/v1/auth_service.proto",
}
