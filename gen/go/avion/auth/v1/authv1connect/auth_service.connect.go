// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/auth/v1/auth_service.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "avion.auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/avion.auth.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/avion.auth.v1.AuthService/Logout"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/avion.auth.v1.AuthService/RefreshToken"
	// AuthServiceValidateTokenProcedure is the fully-qualified name of the AuthService's ValidateToken
	// RPC.
	AuthServiceValidateTokenProcedure = "/avion.auth.v1.AuthService/ValidateToken"
	// AuthServiceCreateUserProcedure is the fully-qualified name of the AuthService's CreateUser RPC.
	AuthServiceCreateUserProcedure = "/avion.auth.v1.AuthService/CreateUser"
	// AuthServiceVerifyEmailProcedure is the fully-qualified name of the AuthService's VerifyEmail RPC.
	AuthServiceVerifyEmailProcedure = "/avion.auth.v1.AuthService/VerifyEmail"
	// AuthServiceResendVerificationEmailProcedure is the fully-qualified name of the AuthService's
	// ResendVerificationEmail RPC.
	AuthServiceResendVerificationEmailProcedure = "/avion.auth.v1.AuthService/ResendVerificationEmail"
	// AuthServiceRequestPasswordResetProcedure is the fully-qualified name of the AuthService's
	// RequestPasswordReset RPC.
	AuthServiceRequestPasswordResetProcedure = "/avion.auth.v1.AuthService/RequestPasswordReset"
	// AuthServiceResetPasswordProcedure is the fully-qualified name of the AuthService's ResetPassword
	// RPC.
	AuthServiceResetPasswordProcedure = "/avion.auth.v1.AuthService/ResetPassword"
	// AuthServiceChangePasswordProcedure is the fully-qualified name of the AuthService's
	// ChangePassword RPC.
	AuthServiceChangePasswordProcedure = "/avion.auth.v1.AuthService/ChangePassword"
	// AuthServiceChangeEmailProcedure is the fully-qualified name of the AuthService's ChangeEmail RPC.
	AuthServiceChangeEmailProcedure = "/avion.auth.v1.AuthService/ChangeEmail"
	// AuthServiceDeleteAccountProcedure is the fully-qualified name of the AuthService's DeleteAccount
	// RPC.
	AuthServiceDeleteAccountProcedure = "/avion.auth.v1.AuthService/DeleteAccount"
	// AuthServiceCancelAccountDeletionProcedure is the fully-qualified name of the AuthService's
	// CancelAccountDeletion RPC.
	AuthServiceCancelAccountDeletionProcedure = "/avion.auth.v1.AuthService/CancelAccountDeletion"
	// AuthServiceEnableMfaProcedure is the fully-qualified name of the AuthService's EnableMfa RPC.
	AuthServiceEnableMfaProcedure = "/avion.auth.v1.AuthService/EnableMfa"
	// AuthServiceDisableMfaProcedure is the fully-qualified name of the AuthService's DisableMfa RPC.
	AuthServiceDisableMfaProcedure = "/avion.auth.v1.AuthService/DisableMfa"
	// AuthServiceSetupTotpProcedure is the fully-qualified name of the AuthService's SetupTotp RPC.
	AuthServiceSetupTotpProcedure = "/avion.auth.v1.AuthService/SetupTotp"
	// AuthServiceVerifyTotpProcedure is the fully-qualified name of the AuthService's VerifyTotp RPC.
	AuthServiceVerifyTotpProcedure = "/avion.auth.v1.AuthService/VerifyTotp"
	// AuthServiceGenerateBackupCodesProcedure is the fully-qualified name of the AuthService's
	// GenerateBackupCodes RPC.
	AuthServiceGenerateBackupCodesProcedure = "/avion.auth.v1.AuthService/GenerateBackupCodes"
	// AuthServiceVerifyBackupCodeProcedure is the fully-qualified name of the AuthService's
	// VerifyBackupCode RPC.
	AuthServiceVerifyBackupCodeProcedure = "/avion.auth.v1.AuthService/VerifyBackupCode"
	// AuthServiceListMfaDevicesProcedure is the fully-qualified name of the AuthService's
	// ListMfaDevices RPC.
	AuthServiceListMfaDevicesProcedure = "/avion.auth.v1.AuthService/ListMfaDevices"
	// AuthServiceGetMfaDeviceProcedure is the fully-qualified name of the AuthService's GetMfaDevice
	// RPC.
	AuthServiceGetMfaDeviceProcedure = "/avion.auth.v1.AuthService/GetMfaDevice"
	// AuthServiceUpdateMfaDeviceProcedure is the fully-qualified name of the AuthService's
	// UpdateMfaDevice RPC.
	AuthServiceUpdateMfaDeviceProcedure = "/avion.auth.v1.AuthService/UpdateMfaDevice"
	// AuthServiceMfaChallengeProcedure is the fully-qualified name of the AuthService's MfaChallenge
	// RPC.
	AuthServiceMfaChallengeProcedure = "/avion.auth.v1.AuthService/MfaChallenge"
	// AuthServiceVerifyMfaChallengeProcedure is the fully-qualified name of the AuthService's
	// VerifyMfaChallenge RPC.
	AuthServiceVerifyMfaChallengeProcedure = "/avion.auth.v1.AuthService/VerifyMfaChallenge"
	// AuthServiceRegisterPasskeyOptionsProcedure is the fully-qualified name of the AuthService's
	// RegisterPasskeyOptions RPC.
	AuthServiceRegisterPasskeyOptionsProcedure = "/avion.auth.v1.AuthService/RegisterPasskeyOptions"
	// AuthServiceRegisterPasskeyProcedure is the fully-qualified name of the AuthService's
	// RegisterPasskey RPC.
	AuthServiceRegisterPasskeyProcedure = "/avion.auth.v1.AuthService/RegisterPasskey"
	// AuthServiceAuthenticatePasskeyOptionsProcedure is the fully-qualified name of the AuthService's
	// AuthenticatePasskeyOptions RPC.
	AuthServiceAuthenticatePasskeyOptionsProcedure = "/avion.auth.v1.AuthService/AuthenticatePasskeyOptions"
	// AuthServiceAuthenticatePasskeyProcedure is the fully-qualified name of the AuthService's
	// AuthenticatePasskey RPC.
	AuthServiceAuthenticatePasskeyProcedure = "/avion.auth.v1.AuthService/AuthenticatePasskey"
	// AuthServiceListPasskeysProcedure is the fully-qualified name of the AuthService's ListPasskeys
	// RPC.
	AuthServiceListPasskeysProcedure = "/avion.auth.v1.AuthService/ListPasskeys"
	// AuthServiceGetPasskeyProcedure is the fully-qualified name of the AuthService's GetPasskey RPC.
	AuthServiceGetPasskeyProcedure = "/avion.auth.v1.AuthService/GetPasskey"
	// AuthServiceUpdatePasskeyProcedure is the fully-qualified name of the AuthService's UpdatePasskey
	// RPC.
	AuthServiceUpdatePasskeyProcedure = "/avion.auth.v1.AuthService/UpdatePasskey"
	// AuthServiceDeletePasskeyProcedure is the fully-qualified name of the AuthService's DeletePasskey
	// RPC.
	AuthServiceDeletePasskeyProcedure = "/avion.auth.v1.AuthService/DeletePasskey"
	// AuthServiceRevokePasskeyProcedure is the fully-qualified name of the AuthService's RevokePasskey
	// RPC.
	AuthServiceRevokePasskeyProcedure = "/avion.auth.v1.AuthService/RevokePasskey"
	// AuthServiceGetOAuthAuthorizationUrlProcedure is the fully-qualified name of the AuthService's
	// GetOAuthAuthorizationUrl RPC.
	AuthServiceGetOAuthAuthorizationUrlProcedure = "/avion.auth.v1.AuthService/GetOAuthAuthorizationUrl"
	// AuthServiceHandleOAuthCallbackProcedure is the fully-qualified name of the AuthService's
	// HandleOAuthCallback RPC.
	AuthServiceHandleOAuthCallbackProcedure = "/avion.auth.v1.AuthService/HandleOAuthCallback"
	// AuthServiceConnectOAuthAccountProcedure is the fully-qualified name of the AuthService's
	// ConnectOAuthAccount RPC.
	AuthServiceConnectOAuthAccountProcedure = "/avion.auth.v1.AuthService/ConnectOAuthAccount"
	// AuthServiceDisconnectOAuthAccountProcedure is the fully-qualified name of the AuthService's
	// DisconnectOAuthAccount RPC.
	AuthServiceDisconnectOAuthAccountProcedure = "/avion.auth.v1.AuthService/DisconnectOAuthAccount"
	// AuthServiceListOAuthConnectionsProcedure is the fully-qualified name of the AuthService's
	// ListOAuthConnections RPC.
	AuthServiceListOAuthConnectionsProcedure = "/avion.auth.v1.AuthService/ListOAuthConnections"
	// AuthServiceGetOAuthConnectionProcedure is the fully-qualified name of the AuthService's
	// GetOAuthConnection RPC.
	AuthServiceGetOAuthConnectionProcedure = "/avion.auth.v1.AuthService/GetOAuthConnection"
	// AuthServiceRefreshOAuthTokenProcedure is the fully-qualified name of the AuthService's
	// RefreshOAuthToken RPC.
	AuthServiceRefreshOAuthTokenProcedure = "/avion.auth.v1.AuthService/RefreshOAuthToken"
	// AuthServiceListOAuthProvidersProcedure is the fully-qualified name of the AuthService's
	// ListOAuthProviders RPC.
	AuthServiceListOAuthProvidersProcedure = "/avion.auth.v1.AuthService/ListOAuthProviders"
	// AuthServiceGetOAuthUserInfoProcedure is the fully-qualified name of the AuthService's
	// GetOAuthUserInfo RPC.
	AuthServiceGetOAuthUserInfoProcedure = "/avion.auth.v1.AuthService/GetOAuthUserInfo"
	// AuthServiceCreateSessionProcedure is the fully-qualified name of the AuthService's CreateSession
	// RPC.
	AuthServiceCreateSessionProcedure = "/avion.auth.v1.AuthService/CreateSession"
	// AuthServiceGetSessionProcedure is the fully-qualified name of the AuthService's GetSession RPC.
	AuthServiceGetSessionProcedure = "/avion.auth.v1.AuthService/GetSession"
	// AuthServiceListSessionsProcedure is the fully-qualified name of the AuthService's ListSessions
	// RPC.
	AuthServiceListSessionsProcedure = "/avion.auth.v1.AuthService/ListSessions"
	// AuthServiceValidateSessionProcedure is the fully-qualified name of the AuthService's
	// ValidateSession RPC.
	AuthServiceValidateSessionProcedure = "/avion.auth.v1.AuthService/ValidateSession"
	// AuthServiceUpdateSessionProcedure is the fully-qualified name of the AuthService's UpdateSession
	// RPC.
	AuthServiceUpdateSessionProcedure = "/avion.auth.v1.AuthService/UpdateSession"
	// AuthServiceExtendSessionProcedure is the fully-qualified name of the AuthService's ExtendSession
	// RPC.
	AuthServiceExtendSessionProcedure = "/avion.auth.v1.AuthService/ExtendSession"
	// AuthServiceRevokeSessionProcedure is the fully-qualified name of the AuthService's RevokeSession
	// RPC.
	AuthServiceRevokeSessionProcedure = "/avion.auth.v1.AuthService/RevokeSession"
	// AuthServiceGetSessionStatsProcedure is the fully-qualified name of the AuthService's
	// GetSessionStats RPC.
	AuthServiceGetSessionStatsProcedure = "/avion.auth.v1.AuthService/GetSessionStats"
	// AuthServiceRecoverAccountProcedure is the fully-qualified name of the AuthService's
	// RecoverAccount RPC.
	AuthServiceRecoverAccountProcedure = "/avion.auth.v1.AuthService/RecoverAccount"
	// AuthServiceExportAccountDataProcedure is the fully-qualified name of the AuthService's
	// ExportAccountData RPC.
	AuthServiceExportAccountDataProcedure = "/avion.auth.v1.AuthService/ExportAccountData"
	// AuthServiceGetExportStatusProcedure is the fully-qualified name of the AuthService's
	// GetExportStatus RPC.
	AuthServiceGetExportStatusProcedure = "/avion.auth.v1.AuthService/GetExportStatus"
	// AuthServiceImportAccountDataProcedure is the fully-qualified name of the AuthService's
	// ImportAccountData RPC.
	AuthServiceImportAccountDataProcedure = "/avion.auth.v1.AuthService/ImportAccountData"
	// AuthServiceGetLoginHistoryProcedure is the fully-qualified name of the AuthService's
	// GetLoginHistory RPC.
	AuthServiceGetLoginHistoryProcedure = "/avion.auth.v1.AuthService/GetLoginHistory"
	// AuthServiceGetSecurityAuditLogProcedure is the fully-qualified name of the AuthService's
	// GetSecurityAuditLog RPC.
	AuthServiceGetSecurityAuditLogProcedure = "/avion.auth.v1.AuthService/GetSecurityAuditLog"
	// AuthServiceGetUserPreferencesProcedure is the fully-qualified name of the AuthService's
	// GetUserPreferences RPC.
	AuthServiceGetUserPreferencesProcedure = "/avion.auth.v1.AuthService/GetUserPreferences"
	// AuthServiceUpdateUserPreferencesProcedure is the fully-qualified name of the AuthService's
	// UpdateUserPreferences RPC.
	AuthServiceUpdateUserPreferencesProcedure = "/avion.auth.v1.AuthService/UpdateUserPreferences"
	// AuthServiceResetUserPreferencesProcedure is the fully-qualified name of the AuthService's
	// ResetUserPreferences RPC.
	AuthServiceResetUserPreferencesProcedure = "/avion.auth.v1.AuthService/ResetUserPreferences"
	// AuthServiceEvaluatePolicyProcedure is the fully-qualified name of the AuthService's
	// EvaluatePolicy RPC.
	AuthServiceEvaluatePolicyProcedure = "/avion.auth.v1.AuthService/EvaluatePolicy"
	// AuthServiceCreatePolicyProcedure is the fully-qualified name of the AuthService's CreatePolicy
	// RPC.
	AuthServiceCreatePolicyProcedure = "/avion.auth.v1.AuthService/CreatePolicy"
	// AuthServiceGetPolicyProcedure is the fully-qualified name of the AuthService's GetPolicy RPC.
	AuthServiceGetPolicyProcedure = "/avion.auth.v1.AuthService/GetPolicy"
	// AuthServiceUpdatePolicyProcedure is the fully-qualified name of the AuthService's UpdatePolicy
	// RPC.
	AuthServiceUpdatePolicyProcedure = "/avion.auth.v1.AuthService/UpdatePolicy"
	// AuthServiceDeletePolicyProcedure is the fully-qualified name of the AuthService's DeletePolicy
	// RPC.
	AuthServiceDeletePolicyProcedure = "/avion.auth.v1.AuthService/DeletePolicy"
	// AuthServiceListPoliciesProcedure is the fully-qualified name of the AuthService's ListPolicies
	// RPC.
	AuthServiceListPoliciesProcedure = "/avion.auth.v1.AuthService/ListPolicies"
	// AuthServiceAssignPolicyProcedure is the fully-qualified name of the AuthService's AssignPolicy
	// RPC.
	AuthServiceAssignPolicyProcedure = "/avion.auth.v1.AuthService/AssignPolicy"
	// AuthServiceUnassignPolicyProcedure is the fully-qualified name of the AuthService's
	// UnassignPolicy RPC.
	AuthServiceUnassignPolicyProcedure = "/avion.auth.v1.AuthService/UnassignPolicy"
	// AuthServiceListUserPoliciesProcedure is the fully-qualified name of the AuthService's
	// ListUserPolicies RPC.
	AuthServiceListUserPoliciesProcedure = "/avion.auth.v1.AuthService/ListUserPolicies"
	// AuthServiceGenerateJwtProcedure is the fully-qualified name of the AuthService's GenerateJwt RPC.
	AuthServiceGenerateJwtProcedure = "/avion.auth.v1.AuthService/GenerateJwt"
	// AuthServiceVerifyJwtProcedure is the fully-qualified name of the AuthService's VerifyJwt RPC.
	AuthServiceVerifyJwtProcedure = "/avion.auth.v1.AuthService/VerifyJwt"
	// AuthServiceRefreshJwtProcedure is the fully-qualified name of the AuthService's RefreshJwt RPC.
	AuthServiceRefreshJwtProcedure = "/avion.auth.v1.AuthService/RefreshJwt"
	// AuthServiceRevokeJwtProcedure is the fully-qualified name of the AuthService's RevokeJwt RPC.
	AuthServiceRevokeJwtProcedure = "/avion.auth.v1.AuthService/RevokeJwt"
	// AuthServiceIntrospectJwtProcedure is the fully-qualified name of the AuthService's IntrospectJwt
	// RPC.
	AuthServiceIntrospectJwtProcedure = "/avion.auth.v1.AuthService/IntrospectJwt"
	// AuthServiceGetJwksProcedure is the fully-qualified name of the AuthService's GetJwks RPC.
	AuthServiceGetJwksProcedure = "/avion.auth.v1.AuthService/GetJwks"
	// AuthServiceGetJwtConfigProcedure is the fully-qualified name of the AuthService's GetJwtConfig
	// RPC.
	AuthServiceGetJwtConfigProcedure = "/avion.auth.v1.AuthService/GetJwtConfig"
)

// AuthServiceClient is a client for the avion.auth.v1.AuthService service.
type AuthServiceClient interface {
	// 認証関連
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	// ユーザー登録関連
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error)
	// パスワード管理
	RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error)
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// アカウント管理
	ChangeEmail(context.Context, *connect.Request[v1.ChangeEmailRequest]) (*connect.Response[v1.ChangeEmailResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	CancelAccountDeletion(context.Context, *connect.Request[v1.CancelAccountDeletionRequest]) (*connect.Response[v1.CancelAccountDeletionResponse], error)
	// MFA/TOTP関連
	EnableMfa(context.Context, *connect.Request[v1.EnableMfaRequest]) (*connect.Response[v1.EnableMfaResponse], error)
	DisableMfa(context.Context, *connect.Request[v1.DisableMfaRequest]) (*connect.Response[v1.DisableMfaResponse], error)
	SetupTotp(context.Context, *connect.Request[v1.SetupTotpRequest]) (*connect.Response[v1.SetupTotpResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	GenerateBackupCodes(context.Context, *connect.Request[v1.GenerateBackupCodesRequest]) (*connect.Response[v1.GenerateBackupCodesResponse], error)
	VerifyBackupCode(context.Context, *connect.Request[v1.VerifyBackupCodeRequest]) (*connect.Response[v1.VerifyBackupCodeResponse], error)
	ListMfaDevices(context.Context, *connect.Request[v1.ListMfaDevicesRequest]) (*connect.Response[v1.ListMfaDevicesResponse], error)
	GetMfaDevice(context.Context, *connect.Request[v1.GetMfaDeviceRequest]) (*connect.Response[v1.GetMfaDeviceResponse], error)
	UpdateMfaDevice(context.Context, *connect.Request[v1.UpdateMfaDeviceRequest]) (*connect.Response[v1.UpdateMfaDeviceResponse], error)
	MfaChallenge(context.Context, *connect.Request[v1.MfaChallengeRequest]) (*connect.Response[v1.MfaChallengeResponse], error)
	VerifyMfaChallenge(context.Context, *connect.Request[v1.VerifyMfaChallengeRequest]) (*connect.Response[v1.VerifyMfaChallengeResponse], error)
	// Passkey/WebAuthn関連
	RegisterPasskeyOptions(context.Context, *connect.Request[v1.RegisterPasskeyOptionsRequest]) (*connect.Response[v1.RegisterPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	AuthenticatePasskeyOptions(context.Context, *connect.Request[v1.AuthenticatePasskeyOptionsRequest]) (*connect.Response[v1.AuthenticatePasskeyOptionsResponse], error)
	AuthenticatePasskey(context.Context, *connect.Request[v1.AuthenticatePasskeyRequest]) (*connect.Response[v1.AuthenticatePasskeyResponse], error)
	ListPasskeys(context.Context, *connect.Request[v1.ListPasskeysRequest]) (*connect.Response[v1.ListPasskeysResponse], error)
	GetPasskey(context.Context, *connect.Request[v1.GetPasskeyRequest]) (*connect.Response[v1.GetPasskeyResponse], error)
	UpdatePasskey(context.Context, *connect.Request[v1.UpdatePasskeyRequest]) (*connect.Response[v1.UpdatePasskeyResponse], error)
	DeletePasskey(context.Context, *connect.Request[v1.DeletePasskeyRequest]) (*connect.Response[v1.DeletePasskeyResponse], error)
	RevokePasskey(context.Context, *connect.Request[v1.RevokePasskeyRequest]) (*connect.Response[v1.RevokePasskeyResponse], error)
	// OAuth2.0/OIDC関連
	GetOAuthAuthorizationUrl(context.Context, *connect.Request[v1.GetOAuthAuthorizationUrlRequest]) (*connect.Response[v1.GetOAuthAuthorizationUrlResponse], error)
	HandleOAuthCallback(context.Context, *connect.Request[v1.HandleOAuthCallbackRequest]) (*connect.Response[v1.HandleOAuthCallbackResponse], error)
	ConnectOAuthAccount(context.Context, *connect.Request[v1.ConnectOAuthAccountRequest]) (*connect.Response[v1.ConnectOAuthAccountResponse], error)
	DisconnectOAuthAccount(context.Context, *connect.Request[v1.DisconnectOAuthAccountRequest]) (*connect.Response[v1.DisconnectOAuthAccountResponse], error)
	ListOAuthConnections(context.Context, *connect.Request[v1.ListOAuthConnectionsRequest]) (*connect.Response[v1.ListOAuthConnectionsResponse], error)
	GetOAuthConnection(context.Context, *connect.Request[v1.GetOAuthConnectionRequest]) (*connect.Response[v1.GetOAuthConnectionResponse], error)
	RefreshOAuthToken(context.Context, *connect.Request[v1.RefreshOAuthTokenRequest]) (*connect.Response[v1.RefreshOAuthTokenResponse], error)
	ListOAuthProviders(context.Context, *connect.Request[v1.ListOAuthProvidersRequest]) (*connect.Response[v1.ListOAuthProvidersResponse], error)
	GetOAuthUserInfo(context.Context, *connect.Request[v1.GetOAuthUserInfoRequest]) (*connect.Response[v1.GetOAuthUserInfoResponse], error)
	// セッション管理
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error)
	UpdateSession(context.Context, *connect.Request[v1.UpdateSessionRequest]) (*connect.Response[v1.UpdateSessionResponse], error)
	ExtendSession(context.Context, *connect.Request[v1.ExtendSessionRequest]) (*connect.Response[v1.ExtendSessionResponse], error)
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	GetSessionStats(context.Context, *connect.Request[v1.GetSessionStatsRequest]) (*connect.Response[v1.GetSessionStatsResponse], error)
	// アカウント復旧
	RecoverAccount(context.Context, *connect.Request[v1.RecoverAccountRequest]) (*connect.Response[v1.RecoverAccountResponse], error)
	// アカウントエクスポート（GDPR対応）
	ExportAccountData(context.Context, *connect.Request[v1.ExportAccountDataRequest]) (*connect.Response[v1.ExportAccountDataResponse], error)
	GetExportStatus(context.Context, *connect.Request[v1.GetExportStatusRequest]) (*connect.Response[v1.GetExportStatusResponse], error)
	// アカウントインポート
	ImportAccountData(context.Context, *connect.Request[v1.ImportAccountDataRequest]) (*connect.Response[v1.ImportAccountDataResponse], error)
	// ログイン履歴とセキュリティ
	GetLoginHistory(context.Context, *connect.Request[v1.GetLoginHistoryRequest]) (*connect.Response[v1.GetLoginHistoryResponse], error)
	GetSecurityAuditLog(context.Context, *connect.Request[v1.GetSecurityAuditLogRequest]) (*connect.Response[v1.GetSecurityAuditLogResponse], error)
	// ユーザー設定管理
	GetUserPreferences(context.Context, *connect.Request[v1.GetUserPreferencesRequest]) (*connect.Response[v1.GetUserPreferencesResponse], error)
	UpdateUserPreferences(context.Context, *connect.Request[v1.UpdateUserPreferencesRequest]) (*connect.Response[v1.UpdateUserPreferencesResponse], error)
	ResetUserPreferences(context.Context, *connect.Request[v1.ResetUserPreferencesRequest]) (*connect.Response[v1.ResetUserPreferencesResponse], error)
	// ポリシー管理
	EvaluatePolicy(context.Context, *connect.Request[v1.EvaluatePolicyRequest]) (*connect.Response[v1.EvaluatePolicyResponse], error)
	CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error)
	GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error)
	UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error)
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	AssignPolicy(context.Context, *connect.Request[v1.AssignPolicyRequest]) (*connect.Response[v1.AssignPolicyResponse], error)
	UnassignPolicy(context.Context, *connect.Request[v1.UnassignPolicyRequest]) (*connect.Response[v1.UnassignPolicyResponse], error)
	ListUserPolicies(context.Context, *connect.Request[v1.ListUserPoliciesRequest]) (*connect.Response[v1.ListUserPoliciesResponse], error)
	// JWT管理
	GenerateJwt(context.Context, *connect.Request[v1.GenerateJwtRequest]) (*connect.Response[v1.GenerateJwtResponse], error)
	VerifyJwt(context.Context, *connect.Request[v1.VerifyJwtRequest]) (*connect.Response[v1.VerifyJwtResponse], error)
	RefreshJwt(context.Context, *connect.Request[v1.RefreshJwtRequest]) (*connect.Response[v1.RefreshJwtResponse], error)
	RevokeJwt(context.Context, *connect.Request[v1.RevokeJwtRequest]) (*connect.Response[v1.RevokeJwtResponse], error)
	IntrospectJwt(context.Context, *connect.Request[v1.IntrospectJwtRequest]) (*connect.Response[v1.IntrospectJwtResponse], error)
	GetJwks(context.Context, *connect.Request[v1.GetJwksRequest]) (*connect.Response[v1.GetJwksResponse], error)
	GetJwtConfig(context.Context, *connect.Request[v1.GetJwtConfigRequest]) (*connect.Response[v1.GetJwtConfigResponse], error)
}

// NewAuthServiceClient constructs a client for the avion.auth.v1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_avion_auth_v1_auth_service_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[v1.ValidateTokenRequest, v1.ValidateTokenResponse](
			httpClient,
			baseURL+AuthServiceValidateTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+AuthServiceCreateUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		verifyEmail: connect.NewClient[v1.VerifyEmailRequest, v1.VerifyEmailResponse](
			httpClient,
			baseURL+AuthServiceVerifyEmailProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
			connect.WithClientOptions(opts...),
		),
		resendVerificationEmail: connect.NewClient[v1.ResendVerificationEmailRequest, v1.ResendVerificationEmailResponse](
			httpClient,
			baseURL+AuthServiceResendVerificationEmailProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResendVerificationEmail")),
			connect.WithClientOptions(opts...),
		),
		requestPasswordReset: connect.NewClient[v1.RequestPasswordResetRequest, v1.RequestPasswordResetResponse](
			httpClient,
			baseURL+AuthServiceRequestPasswordResetProcedure,
			connect.WithSchema(authServiceMethods.ByName("RequestPasswordReset")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[v1.ResetPasswordRequest, v1.ResetPasswordResponse](
			httpClient,
			baseURL+AuthServiceResetPasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+AuthServiceChangePasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		changeEmail: connect.NewClient[v1.ChangeEmailRequest, v1.ChangeEmailResponse](
			httpClient,
			baseURL+AuthServiceChangeEmailProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangeEmail")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AuthServiceDeleteAccountProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		cancelAccountDeletion: connect.NewClient[v1.CancelAccountDeletionRequest, v1.CancelAccountDeletionResponse](
			httpClient,
			baseURL+AuthServiceCancelAccountDeletionProcedure,
			connect.WithSchema(authServiceMethods.ByName("CancelAccountDeletion")),
			connect.WithClientOptions(opts...),
		),
		enableMfa: connect.NewClient[v1.EnableMfaRequest, v1.EnableMfaResponse](
			httpClient,
			baseURL+AuthServiceEnableMfaProcedure,
			connect.WithSchema(authServiceMethods.ByName("EnableMfa")),
			connect.WithClientOptions(opts...),
		),
		disableMfa: connect.NewClient[v1.DisableMfaRequest, v1.DisableMfaResponse](
			httpClient,
			baseURL+AuthServiceDisableMfaProcedure,
			connect.WithSchema(authServiceMethods.ByName("DisableMfa")),
			connect.WithClientOptions(opts...),
		),
		setupTotp: connect.NewClient[v1.SetupTotpRequest, v1.SetupTotpResponse](
			httpClient,
			baseURL+AuthServiceSetupTotpProcedure,
			connect.WithSchema(authServiceMethods.ByName("SetupTotp")),
			connect.WithClientOptions(opts...),
		),
		verifyTotp: connect.NewClient[v1.VerifyTotpRequest, v1.VerifyTotpResponse](
			httpClient,
			baseURL+AuthServiceVerifyTotpProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyTotp")),
			connect.WithClientOptions(opts...),
		),
		generateBackupCodes: connect.NewClient[v1.GenerateBackupCodesRequest, v1.GenerateBackupCodesResponse](
			httpClient,
			baseURL+AuthServiceGenerateBackupCodesProcedure,
			connect.WithSchema(authServiceMethods.ByName("GenerateBackupCodes")),
			connect.WithClientOptions(opts...),
		),
		verifyBackupCode: connect.NewClient[v1.VerifyBackupCodeRequest, v1.VerifyBackupCodeResponse](
			httpClient,
			baseURL+AuthServiceVerifyBackupCodeProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyBackupCode")),
			connect.WithClientOptions(opts...),
		),
		listMfaDevices: connect.NewClient[v1.ListMfaDevicesRequest, v1.ListMfaDevicesResponse](
			httpClient,
			baseURL+AuthServiceListMfaDevicesProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListMfaDevices")),
			connect.WithClientOptions(opts...),
		),
		getMfaDevice: connect.NewClient[v1.GetMfaDeviceRequest, v1.GetMfaDeviceResponse](
			httpClient,
			baseURL+AuthServiceGetMfaDeviceProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetMfaDevice")),
			connect.WithClientOptions(opts...),
		),
		updateMfaDevice: connect.NewClient[v1.UpdateMfaDeviceRequest, v1.UpdateMfaDeviceResponse](
			httpClient,
			baseURL+AuthServiceUpdateMfaDeviceProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateMfaDevice")),
			connect.WithClientOptions(opts...),
		),
		mfaChallenge: connect.NewClient[v1.MfaChallengeRequest, v1.MfaChallengeResponse](
			httpClient,
			baseURL+AuthServiceMfaChallengeProcedure,
			connect.WithSchema(authServiceMethods.ByName("MfaChallenge")),
			connect.WithClientOptions(opts...),
		),
		verifyMfaChallenge: connect.NewClient[v1.VerifyMfaChallengeRequest, v1.VerifyMfaChallengeResponse](
			httpClient,
			baseURL+AuthServiceVerifyMfaChallengeProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyMfaChallenge")),
			connect.WithClientOptions(opts...),
		),
		registerPasskeyOptions: connect.NewClient[v1.RegisterPasskeyOptionsRequest, v1.RegisterPasskeyOptionsResponse](
			httpClient,
			baseURL+AuthServiceRegisterPasskeyOptionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterPasskeyOptions")),
			connect.WithClientOptions(opts...),
		),
		registerPasskey: connect.NewClient[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse](
			httpClient,
			baseURL+AuthServiceRegisterPasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterPasskey")),
			connect.WithClientOptions(opts...),
		),
		authenticatePasskeyOptions: connect.NewClient[v1.AuthenticatePasskeyOptionsRequest, v1.AuthenticatePasskeyOptionsResponse](
			httpClient,
			baseURL+AuthServiceAuthenticatePasskeyOptionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("AuthenticatePasskeyOptions")),
			connect.WithClientOptions(opts...),
		),
		authenticatePasskey: connect.NewClient[v1.AuthenticatePasskeyRequest, v1.AuthenticatePasskeyResponse](
			httpClient,
			baseURL+AuthServiceAuthenticatePasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("AuthenticatePasskey")),
			connect.WithClientOptions(opts...),
		),
		listPasskeys: connect.NewClient[v1.ListPasskeysRequest, v1.ListPasskeysResponse](
			httpClient,
			baseURL+AuthServiceListPasskeysProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListPasskeys")),
			connect.WithClientOptions(opts...),
		),
		getPasskey: connect.NewClient[v1.GetPasskeyRequest, v1.GetPasskeyResponse](
			httpClient,
			baseURL+AuthServiceGetPasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetPasskey")),
			connect.WithClientOptions(opts...),
		),
		updatePasskey: connect.NewClient[v1.UpdatePasskeyRequest, v1.UpdatePasskeyResponse](
			httpClient,
			baseURL+AuthServiceUpdatePasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdatePasskey")),
			connect.WithClientOptions(opts...),
		),
		deletePasskey: connect.NewClient[v1.DeletePasskeyRequest, v1.DeletePasskeyResponse](
			httpClient,
			baseURL+AuthServiceDeletePasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeletePasskey")),
			connect.WithClientOptions(opts...),
		),
		revokePasskey: connect.NewClient[v1.RevokePasskeyRequest, v1.RevokePasskeyResponse](
			httpClient,
			baseURL+AuthServiceRevokePasskeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("RevokePasskey")),
			connect.WithClientOptions(opts...),
		),
		getOAuthAuthorizationUrl: connect.NewClient[v1.GetOAuthAuthorizationUrlRequest, v1.GetOAuthAuthorizationUrlResponse](
			httpClient,
			baseURL+AuthServiceGetOAuthAuthorizationUrlProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetOAuthAuthorizationUrl")),
			connect.WithClientOptions(opts...),
		),
		handleOAuthCallback: connect.NewClient[v1.HandleOAuthCallbackRequest, v1.HandleOAuthCallbackResponse](
			httpClient,
			baseURL+AuthServiceHandleOAuthCallbackProcedure,
			connect.WithSchema(authServiceMethods.ByName("HandleOAuthCallback")),
			connect.WithClientOptions(opts...),
		),
		connectOAuthAccount: connect.NewClient[v1.ConnectOAuthAccountRequest, v1.ConnectOAuthAccountResponse](
			httpClient,
			baseURL+AuthServiceConnectOAuthAccountProcedure,
			connect.WithSchema(authServiceMethods.ByName("ConnectOAuthAccount")),
			connect.WithClientOptions(opts...),
		),
		disconnectOAuthAccount: connect.NewClient[v1.DisconnectOAuthAccountRequest, v1.DisconnectOAuthAccountResponse](
			httpClient,
			baseURL+AuthServiceDisconnectOAuthAccountProcedure,
			connect.WithSchema(authServiceMethods.ByName("DisconnectOAuthAccount")),
			connect.WithClientOptions(opts...),
		),
		listOAuthConnections: connect.NewClient[v1.ListOAuthConnectionsRequest, v1.ListOAuthConnectionsResponse](
			httpClient,
			baseURL+AuthServiceListOAuthConnectionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListOAuthConnections")),
			connect.WithClientOptions(opts...),
		),
		getOAuthConnection: connect.NewClient[v1.GetOAuthConnectionRequest, v1.GetOAuthConnectionResponse](
			httpClient,
			baseURL+AuthServiceGetOAuthConnectionProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetOAuthConnection")),
			connect.WithClientOptions(opts...),
		),
		refreshOAuthToken: connect.NewClient[v1.RefreshOAuthTokenRequest, v1.RefreshOAuthTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshOAuthTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshOAuthToken")),
			connect.WithClientOptions(opts...),
		),
		listOAuthProviders: connect.NewClient[v1.ListOAuthProvidersRequest, v1.ListOAuthProvidersResponse](
			httpClient,
			baseURL+AuthServiceListOAuthProvidersProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListOAuthProviders")),
			connect.WithClientOptions(opts...),
		),
		getOAuthUserInfo: connect.NewClient[v1.GetOAuthUserInfoRequest, v1.GetOAuthUserInfoResponse](
			httpClient,
			baseURL+AuthServiceGetOAuthUserInfoProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetOAuthUserInfo")),
			connect.WithClientOptions(opts...),
		),
		createSession: connect.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+AuthServiceCreateSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateSession")),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+AuthServiceGetSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+AuthServiceListSessionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		validateSession: connect.NewClient[v1.ValidateSessionRequest, v1.ValidateSessionResponse](
			httpClient,
			baseURL+AuthServiceValidateSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("ValidateSession")),
			connect.WithClientOptions(opts...),
		),
		updateSession: connect.NewClient[v1.UpdateSessionRequest, v1.UpdateSessionResponse](
			httpClient,
			baseURL+AuthServiceUpdateSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateSession")),
			connect.WithClientOptions(opts...),
		),
		extendSession: connect.NewClient[v1.ExtendSessionRequest, v1.ExtendSessionResponse](
			httpClient,
			baseURL+AuthServiceExtendSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("ExtendSession")),
			connect.WithClientOptions(opts...),
		),
		revokeSession: connect.NewClient[v1.RevokeSessionRequest, v1.RevokeSessionResponse](
			httpClient,
			baseURL+AuthServiceRevokeSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("RevokeSession")),
			connect.WithClientOptions(opts...),
		),
		getSessionStats: connect.NewClient[v1.GetSessionStatsRequest, v1.GetSessionStatsResponse](
			httpClient,
			baseURL+AuthServiceGetSessionStatsProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetSessionStats")),
			connect.WithClientOptions(opts...),
		),
		recoverAccount: connect.NewClient[v1.RecoverAccountRequest, v1.RecoverAccountResponse](
			httpClient,
			baseURL+AuthServiceRecoverAccountProcedure,
			connect.WithSchema(authServiceMethods.ByName("RecoverAccount")),
			connect.WithClientOptions(opts...),
		),
		exportAccountData: connect.NewClient[v1.ExportAccountDataRequest, v1.ExportAccountDataResponse](
			httpClient,
			baseURL+AuthServiceExportAccountDataProcedure,
			connect.WithSchema(authServiceMethods.ByName("ExportAccountData")),
			connect.WithClientOptions(opts...),
		),
		getExportStatus: connect.NewClient[v1.GetExportStatusRequest, v1.GetExportStatusResponse](
			httpClient,
			baseURL+AuthServiceGetExportStatusProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetExportStatus")),
			connect.WithClientOptions(opts...),
		),
		importAccountData: connect.NewClient[v1.ImportAccountDataRequest, v1.ImportAccountDataResponse](
			httpClient,
			baseURL+AuthServiceImportAccountDataProcedure,
			connect.WithSchema(authServiceMethods.ByName("ImportAccountData")),
			connect.WithClientOptions(opts...),
		),
		getLoginHistory: connect.NewClient[v1.GetLoginHistoryRequest, v1.GetLoginHistoryResponse](
			httpClient,
			baseURL+AuthServiceGetLoginHistoryProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetLoginHistory")),
			connect.WithClientOptions(opts...),
		),
		getSecurityAuditLog: connect.NewClient[v1.GetSecurityAuditLogRequest, v1.GetSecurityAuditLogResponse](
			httpClient,
			baseURL+AuthServiceGetSecurityAuditLogProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetSecurityAuditLog")),
			connect.WithClientOptions(opts...),
		),
		getUserPreferences: connect.NewClient[v1.GetUserPreferencesRequest, v1.GetUserPreferencesResponse](
			httpClient,
			baseURL+AuthServiceGetUserPreferencesProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetUserPreferences")),
			connect.WithClientOptions(opts...),
		),
		updateUserPreferences: connect.NewClient[v1.UpdateUserPreferencesRequest, v1.UpdateUserPreferencesResponse](
			httpClient,
			baseURL+AuthServiceUpdateUserPreferencesProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateUserPreferences")),
			connect.WithClientOptions(opts...),
		),
		resetUserPreferences: connect.NewClient[v1.ResetUserPreferencesRequest, v1.ResetUserPreferencesResponse](
			httpClient,
			baseURL+AuthServiceResetUserPreferencesProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetUserPreferences")),
			connect.WithClientOptions(opts...),
		),
		evaluatePolicy: connect.NewClient[v1.EvaluatePolicyRequest, v1.EvaluatePolicyResponse](
			httpClient,
			baseURL+AuthServiceEvaluatePolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("EvaluatePolicy")),
			connect.WithClientOptions(opts...),
		),
		createPolicy: connect.NewClient[v1.CreatePolicyRequest, v1.CreatePolicyResponse](
			httpClient,
			baseURL+AuthServiceCreatePolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreatePolicy")),
			connect.WithClientOptions(opts...),
		),
		getPolicy: connect.NewClient[v1.GetPolicyRequest, v1.GetPolicyResponse](
			httpClient,
			baseURL+AuthServiceGetPolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetPolicy")),
			connect.WithClientOptions(opts...),
		),
		updatePolicy: connect.NewClient[v1.UpdatePolicyRequest, v1.UpdatePolicyResponse](
			httpClient,
			baseURL+AuthServiceUpdatePolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdatePolicy")),
			connect.WithClientOptions(opts...),
		),
		deletePolicy: connect.NewClient[v1.DeletePolicyRequest, v1.DeletePolicyResponse](
			httpClient,
			baseURL+AuthServiceDeletePolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeletePolicy")),
			connect.WithClientOptions(opts...),
		),
		listPolicies: connect.NewClient[v1.ListPoliciesRequest, v1.ListPoliciesResponse](
			httpClient,
			baseURL+AuthServiceListPoliciesProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListPolicies")),
			connect.WithClientOptions(opts...),
		),
		assignPolicy: connect.NewClient[v1.AssignPolicyRequest, v1.AssignPolicyResponse](
			httpClient,
			baseURL+AuthServiceAssignPolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("AssignPolicy")),
			connect.WithClientOptions(opts...),
		),
		unassignPolicy: connect.NewClient[v1.UnassignPolicyRequest, v1.UnassignPolicyResponse](
			httpClient,
			baseURL+AuthServiceUnassignPolicyProcedure,
			connect.WithSchema(authServiceMethods.ByName("UnassignPolicy")),
			connect.WithClientOptions(opts...),
		),
		listUserPolicies: connect.NewClient[v1.ListUserPoliciesRequest, v1.ListUserPoliciesResponse](
			httpClient,
			baseURL+AuthServiceListUserPoliciesProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListUserPolicies")),
			connect.WithClientOptions(opts...),
		),
		generateJwt: connect.NewClient[v1.GenerateJwtRequest, v1.GenerateJwtResponse](
			httpClient,
			baseURL+AuthServiceGenerateJwtProcedure,
			connect.WithSchema(authServiceMethods.ByName("GenerateJwt")),
			connect.WithClientOptions(opts...),
		),
		verifyJwt: connect.NewClient[v1.VerifyJwtRequest, v1.VerifyJwtResponse](
			httpClient,
			baseURL+AuthServiceVerifyJwtProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyJwt")),
			connect.WithClientOptions(opts...),
		),
		refreshJwt: connect.NewClient[v1.RefreshJwtRequest, v1.RefreshJwtResponse](
			httpClient,
			baseURL+AuthServiceRefreshJwtProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshJwt")),
			connect.WithClientOptions(opts...),
		),
		revokeJwt: connect.NewClient[v1.RevokeJwtRequest, v1.RevokeJwtResponse](
			httpClient,
			baseURL+AuthServiceRevokeJwtProcedure,
			connect.WithSchema(authServiceMethods.ByName("RevokeJwt")),
			connect.WithClientOptions(opts...),
		),
		introspectJwt: connect.NewClient[v1.IntrospectJwtRequest, v1.IntrospectJwtResponse](
			httpClient,
			baseURL+AuthServiceIntrospectJwtProcedure,
			connect.WithSchema(authServiceMethods.ByName("IntrospectJwt")),
			connect.WithClientOptions(opts...),
		),
		getJwks: connect.NewClient[v1.GetJwksRequest, v1.GetJwksResponse](
			httpClient,
			baseURL+AuthServiceGetJwksProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetJwks")),
			connect.WithClientOptions(opts...),
		),
		getJwtConfig: connect.NewClient[v1.GetJwtConfigRequest, v1.GetJwtConfigResponse](
			httpClient,
			baseURL+AuthServiceGetJwtConfigProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetJwtConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login                      *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout                     *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	refreshToken               *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	validateToken              *connect.Client[v1.ValidateTokenRequest, v1.ValidateTokenResponse]
	createUser                 *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	verifyEmail                *connect.Client[v1.VerifyEmailRequest, v1.VerifyEmailResponse]
	resendVerificationEmail    *connect.Client[v1.ResendVerificationEmailRequest, v1.ResendVerificationEmailResponse]
	requestPasswordReset       *connect.Client[v1.RequestPasswordResetRequest, v1.RequestPasswordResetResponse]
	resetPassword              *connect.Client[v1.ResetPasswordRequest, v1.ResetPasswordResponse]
	changePassword             *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	changeEmail                *connect.Client[v1.ChangeEmailRequest, v1.ChangeEmailResponse]
	deleteAccount              *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	cancelAccountDeletion      *connect.Client[v1.CancelAccountDeletionRequest, v1.CancelAccountDeletionResponse]
	enableMfa                  *connect.Client[v1.EnableMfaRequest, v1.EnableMfaResponse]
	disableMfa                 *connect.Client[v1.DisableMfaRequest, v1.DisableMfaResponse]
	setupTotp                  *connect.Client[v1.SetupTotpRequest, v1.SetupTotpResponse]
	verifyTotp                 *connect.Client[v1.VerifyTotpRequest, v1.VerifyTotpResponse]
	generateBackupCodes        *connect.Client[v1.GenerateBackupCodesRequest, v1.GenerateBackupCodesResponse]
	verifyBackupCode           *connect.Client[v1.VerifyBackupCodeRequest, v1.VerifyBackupCodeResponse]
	listMfaDevices             *connect.Client[v1.ListMfaDevicesRequest, v1.ListMfaDevicesResponse]
	getMfaDevice               *connect.Client[v1.GetMfaDeviceRequest, v1.GetMfaDeviceResponse]
	updateMfaDevice            *connect.Client[v1.UpdateMfaDeviceRequest, v1.UpdateMfaDeviceResponse]
	mfaChallenge               *connect.Client[v1.MfaChallengeRequest, v1.MfaChallengeResponse]
	verifyMfaChallenge         *connect.Client[v1.VerifyMfaChallengeRequest, v1.VerifyMfaChallengeResponse]
	registerPasskeyOptions     *connect.Client[v1.RegisterPasskeyOptionsRequest, v1.RegisterPasskeyOptionsResponse]
	registerPasskey            *connect.Client[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse]
	authenticatePasskeyOptions *connect.Client[v1.AuthenticatePasskeyOptionsRequest, v1.AuthenticatePasskeyOptionsResponse]
	authenticatePasskey        *connect.Client[v1.AuthenticatePasskeyRequest, v1.AuthenticatePasskeyResponse]
	listPasskeys               *connect.Client[v1.ListPasskeysRequest, v1.ListPasskeysResponse]
	getPasskey                 *connect.Client[v1.GetPasskeyRequest, v1.GetPasskeyResponse]
	updatePasskey              *connect.Client[v1.UpdatePasskeyRequest, v1.UpdatePasskeyResponse]
	deletePasskey              *connect.Client[v1.DeletePasskeyRequest, v1.DeletePasskeyResponse]
	revokePasskey              *connect.Client[v1.RevokePasskeyRequest, v1.RevokePasskeyResponse]
	getOAuthAuthorizationUrl   *connect.Client[v1.GetOAuthAuthorizationUrlRequest, v1.GetOAuthAuthorizationUrlResponse]
	handleOAuthCallback        *connect.Client[v1.HandleOAuthCallbackRequest, v1.HandleOAuthCallbackResponse]
	connectOAuthAccount        *connect.Client[v1.ConnectOAuthAccountRequest, v1.ConnectOAuthAccountResponse]
	disconnectOAuthAccount     *connect.Client[v1.DisconnectOAuthAccountRequest, v1.DisconnectOAuthAccountResponse]
	listOAuthConnections       *connect.Client[v1.ListOAuthConnectionsRequest, v1.ListOAuthConnectionsResponse]
	getOAuthConnection         *connect.Client[v1.GetOAuthConnectionRequest, v1.GetOAuthConnectionResponse]
	refreshOAuthToken          *connect.Client[v1.RefreshOAuthTokenRequest, v1.RefreshOAuthTokenResponse]
	listOAuthProviders         *connect.Client[v1.ListOAuthProvidersRequest, v1.ListOAuthProvidersResponse]
	getOAuthUserInfo           *connect.Client[v1.GetOAuthUserInfoRequest, v1.GetOAuthUserInfoResponse]
	createSession              *connect.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	getSession                 *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	listSessions               *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	validateSession            *connect.Client[v1.ValidateSessionRequest, v1.ValidateSessionResponse]
	updateSession              *connect.Client[v1.UpdateSessionRequest, v1.UpdateSessionResponse]
	extendSession              *connect.Client[v1.ExtendSessionRequest, v1.ExtendSessionResponse]
	revokeSession              *connect.Client[v1.RevokeSessionRequest, v1.RevokeSessionResponse]
	getSessionStats            *connect.Client[v1.GetSessionStatsRequest, v1.GetSessionStatsResponse]
	recoverAccount             *connect.Client[v1.RecoverAccountRequest, v1.RecoverAccountResponse]
	exportAccountData          *connect.Client[v1.ExportAccountDataRequest, v1.ExportAccountDataResponse]
	getExportStatus            *connect.Client[v1.GetExportStatusRequest, v1.GetExportStatusResponse]
	importAccountData          *connect.Client[v1.ImportAccountDataRequest, v1.ImportAccountDataResponse]
	getLoginHistory            *connect.Client[v1.GetLoginHistoryRequest, v1.GetLoginHistoryResponse]
	getSecurityAuditLog        *connect.Client[v1.GetSecurityAuditLogRequest, v1.GetSecurityAuditLogResponse]
	getUserPreferences         *connect.Client[v1.GetUserPreferencesRequest, v1.GetUserPreferencesResponse]
	updateUserPreferences      *connect.Client[v1.UpdateUserPreferencesRequest, v1.UpdateUserPreferencesResponse]
	resetUserPreferences       *connect.Client[v1.ResetUserPreferencesRequest, v1.ResetUserPreferencesResponse]
	evaluatePolicy             *connect.Client[v1.EvaluatePolicyRequest, v1.EvaluatePolicyResponse]
	createPolicy               *connect.Client[v1.CreatePolicyRequest, v1.CreatePolicyResponse]
	getPolicy                  *connect.Client[v1.GetPolicyRequest, v1.GetPolicyResponse]
	updatePolicy               *connect.Client[v1.UpdatePolicyRequest, v1.UpdatePolicyResponse]
	deletePolicy               *connect.Client[v1.DeletePolicyRequest, v1.DeletePolicyResponse]
	listPolicies               *connect.Client[v1.ListPoliciesRequest, v1.ListPoliciesResponse]
	assignPolicy               *connect.Client[v1.AssignPolicyRequest, v1.AssignPolicyResponse]
	unassignPolicy             *connect.Client[v1.UnassignPolicyRequest, v1.UnassignPolicyResponse]
	listUserPolicies           *connect.Client[v1.ListUserPoliciesRequest, v1.ListUserPoliciesResponse]
	generateJwt                *connect.Client[v1.GenerateJwtRequest, v1.GenerateJwtResponse]
	verifyJwt                  *connect.Client[v1.VerifyJwtRequest, v1.VerifyJwtResponse]
	refreshJwt                 *connect.Client[v1.RefreshJwtRequest, v1.RefreshJwtResponse]
	revokeJwt                  *connect.Client[v1.RevokeJwtRequest, v1.RevokeJwtResponse]
	introspectJwt              *connect.Client[v1.IntrospectJwtRequest, v1.IntrospectJwtResponse]
	getJwks                    *connect.Client[v1.GetJwksRequest, v1.GetJwksResponse]
	getJwtConfig               *connect.Client[v1.GetJwtConfigRequest, v1.GetJwtConfigResponse]
}

// Login calls avion.auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls avion.auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls avion.auth.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// ValidateToken calls avion.auth.v1.AuthService.ValidateToken.
func (c *authServiceClient) ValidateToken(ctx context.Context, req *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// CreateUser calls avion.auth.v1.AuthService.CreateUser.
func (c *authServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// VerifyEmail calls avion.auth.v1.AuthService.VerifyEmail.
func (c *authServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// ResendVerificationEmail calls avion.auth.v1.AuthService.ResendVerificationEmail.
func (c *authServiceClient) ResendVerificationEmail(ctx context.Context, req *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error) {
	return c.resendVerificationEmail.CallUnary(ctx, req)
}

// RequestPasswordReset calls avion.auth.v1.AuthService.RequestPasswordReset.
func (c *authServiceClient) RequestPasswordReset(ctx context.Context, req *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error) {
	return c.requestPasswordReset.CallUnary(ctx, req)
}

// ResetPassword calls avion.auth.v1.AuthService.ResetPassword.
func (c *authServiceClient) ResetPassword(ctx context.Context, req *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// ChangePassword calls avion.auth.v1.AuthService.ChangePassword.
func (c *authServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// ChangeEmail calls avion.auth.v1.AuthService.ChangeEmail.
func (c *authServiceClient) ChangeEmail(ctx context.Context, req *connect.Request[v1.ChangeEmailRequest]) (*connect.Response[v1.ChangeEmailResponse], error) {
	return c.changeEmail.CallUnary(ctx, req)
}

// DeleteAccount calls avion.auth.v1.AuthService.DeleteAccount.
func (c *authServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// CancelAccountDeletion calls avion.auth.v1.AuthService.CancelAccountDeletion.
func (c *authServiceClient) CancelAccountDeletion(ctx context.Context, req *connect.Request[v1.CancelAccountDeletionRequest]) (*connect.Response[v1.CancelAccountDeletionResponse], error) {
	return c.cancelAccountDeletion.CallUnary(ctx, req)
}

// EnableMfa calls avion.auth.v1.AuthService.EnableMfa.
func (c *authServiceClient) EnableMfa(ctx context.Context, req *connect.Request[v1.EnableMfaRequest]) (*connect.Response[v1.EnableMfaResponse], error) {
	return c.enableMfa.CallUnary(ctx, req)
}

// DisableMfa calls avion.auth.v1.AuthService.DisableMfa.
func (c *authServiceClient) DisableMfa(ctx context.Context, req *connect.Request[v1.DisableMfaRequest]) (*connect.Response[v1.DisableMfaResponse], error) {
	return c.disableMfa.CallUnary(ctx, req)
}

// SetupTotp calls avion.auth.v1.AuthService.SetupTotp.
func (c *authServiceClient) SetupTotp(ctx context.Context, req *connect.Request[v1.SetupTotpRequest]) (*connect.Response[v1.SetupTotpResponse], error) {
	return c.setupTotp.CallUnary(ctx, req)
}

// VerifyTotp calls avion.auth.v1.AuthService.VerifyTotp.
func (c *authServiceClient) VerifyTotp(ctx context.Context, req *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return c.verifyTotp.CallUnary(ctx, req)
}

// GenerateBackupCodes calls avion.auth.v1.AuthService.GenerateBackupCodes.
func (c *authServiceClient) GenerateBackupCodes(ctx context.Context, req *connect.Request[v1.GenerateBackupCodesRequest]) (*connect.Response[v1.GenerateBackupCodesResponse], error) {
	return c.generateBackupCodes.CallUnary(ctx, req)
}

// VerifyBackupCode calls avion.auth.v1.AuthService.VerifyBackupCode.
func (c *authServiceClient) VerifyBackupCode(ctx context.Context, req *connect.Request[v1.VerifyBackupCodeRequest]) (*connect.Response[v1.VerifyBackupCodeResponse], error) {
	return c.verifyBackupCode.CallUnary(ctx, req)
}

// ListMfaDevices calls avion.auth.v1.AuthService.ListMfaDevices.
func (c *authServiceClient) ListMfaDevices(ctx context.Context, req *connect.Request[v1.ListMfaDevicesRequest]) (*connect.Response[v1.ListMfaDevicesResponse], error) {
	return c.listMfaDevices.CallUnary(ctx, req)
}

// GetMfaDevice calls avion.auth.v1.AuthService.GetMfaDevice.
func (c *authServiceClient) GetMfaDevice(ctx context.Context, req *connect.Request[v1.GetMfaDeviceRequest]) (*connect.Response[v1.GetMfaDeviceResponse], error) {
	return c.getMfaDevice.CallUnary(ctx, req)
}

// UpdateMfaDevice calls avion.auth.v1.AuthService.UpdateMfaDevice.
func (c *authServiceClient) UpdateMfaDevice(ctx context.Context, req *connect.Request[v1.UpdateMfaDeviceRequest]) (*connect.Response[v1.UpdateMfaDeviceResponse], error) {
	return c.updateMfaDevice.CallUnary(ctx, req)
}

// MfaChallenge calls avion.auth.v1.AuthService.MfaChallenge.
func (c *authServiceClient) MfaChallenge(ctx context.Context, req *connect.Request[v1.MfaChallengeRequest]) (*connect.Response[v1.MfaChallengeResponse], error) {
	return c.mfaChallenge.CallUnary(ctx, req)
}

// VerifyMfaChallenge calls avion.auth.v1.AuthService.VerifyMfaChallenge.
func (c *authServiceClient) VerifyMfaChallenge(ctx context.Context, req *connect.Request[v1.VerifyMfaChallengeRequest]) (*connect.Response[v1.VerifyMfaChallengeResponse], error) {
	return c.verifyMfaChallenge.CallUnary(ctx, req)
}

// RegisterPasskeyOptions calls avion.auth.v1.AuthService.RegisterPasskeyOptions.
func (c *authServiceClient) RegisterPasskeyOptions(ctx context.Context, req *connect.Request[v1.RegisterPasskeyOptionsRequest]) (*connect.Response[v1.RegisterPasskeyOptionsResponse], error) {
	return c.registerPasskeyOptions.CallUnary(ctx, req)
}

// RegisterPasskey calls avion.auth.v1.AuthService.RegisterPasskey.
func (c *authServiceClient) RegisterPasskey(ctx context.Context, req *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return c.registerPasskey.CallUnary(ctx, req)
}

// AuthenticatePasskeyOptions calls avion.auth.v1.AuthService.AuthenticatePasskeyOptions.
func (c *authServiceClient) AuthenticatePasskeyOptions(ctx context.Context, req *connect.Request[v1.AuthenticatePasskeyOptionsRequest]) (*connect.Response[v1.AuthenticatePasskeyOptionsResponse], error) {
	return c.authenticatePasskeyOptions.CallUnary(ctx, req)
}

// AuthenticatePasskey calls avion.auth.v1.AuthService.AuthenticatePasskey.
func (c *authServiceClient) AuthenticatePasskey(ctx context.Context, req *connect.Request[v1.AuthenticatePasskeyRequest]) (*connect.Response[v1.AuthenticatePasskeyResponse], error) {
	return c.authenticatePasskey.CallUnary(ctx, req)
}

// ListPasskeys calls avion.auth.v1.AuthService.ListPasskeys.
func (c *authServiceClient) ListPasskeys(ctx context.Context, req *connect.Request[v1.ListPasskeysRequest]) (*connect.Response[v1.ListPasskeysResponse], error) {
	return c.listPasskeys.CallUnary(ctx, req)
}

// GetPasskey calls avion.auth.v1.AuthService.GetPasskey.
func (c *authServiceClient) GetPasskey(ctx context.Context, req *connect.Request[v1.GetPasskeyRequest]) (*connect.Response[v1.GetPasskeyResponse], error) {
	return c.getPasskey.CallUnary(ctx, req)
}

// UpdatePasskey calls avion.auth.v1.AuthService.UpdatePasskey.
func (c *authServiceClient) UpdatePasskey(ctx context.Context, req *connect.Request[v1.UpdatePasskeyRequest]) (*connect.Response[v1.UpdatePasskeyResponse], error) {
	return c.updatePasskey.CallUnary(ctx, req)
}

// DeletePasskey calls avion.auth.v1.AuthService.DeletePasskey.
func (c *authServiceClient) DeletePasskey(ctx context.Context, req *connect.Request[v1.DeletePasskeyRequest]) (*connect.Response[v1.DeletePasskeyResponse], error) {
	return c.deletePasskey.CallUnary(ctx, req)
}

// RevokePasskey calls avion.auth.v1.AuthService.RevokePasskey.
func (c *authServiceClient) RevokePasskey(ctx context.Context, req *connect.Request[v1.RevokePasskeyRequest]) (*connect.Response[v1.RevokePasskeyResponse], error) {
	return c.revokePasskey.CallUnary(ctx, req)
}

// GetOAuthAuthorizationUrl calls avion.auth.v1.AuthService.GetOAuthAuthorizationUrl.
func (c *authServiceClient) GetOAuthAuthorizationUrl(ctx context.Context, req *connect.Request[v1.GetOAuthAuthorizationUrlRequest]) (*connect.Response[v1.GetOAuthAuthorizationUrlResponse], error) {
	return c.getOAuthAuthorizationUrl.CallUnary(ctx, req)
}

// HandleOAuthCallback calls avion.auth.v1.AuthService.HandleOAuthCallback.
func (c *authServiceClient) HandleOAuthCallback(ctx context.Context, req *connect.Request[v1.HandleOAuthCallbackRequest]) (*connect.Response[v1.HandleOAuthCallbackResponse], error) {
	return c.handleOAuthCallback.CallUnary(ctx, req)
}

// ConnectOAuthAccount calls avion.auth.v1.AuthService.ConnectOAuthAccount.
func (c *authServiceClient) ConnectOAuthAccount(ctx context.Context, req *connect.Request[v1.ConnectOAuthAccountRequest]) (*connect.Response[v1.ConnectOAuthAccountResponse], error) {
	return c.connectOAuthAccount.CallUnary(ctx, req)
}

// DisconnectOAuthAccount calls avion.auth.v1.AuthService.DisconnectOAuthAccount.
func (c *authServiceClient) DisconnectOAuthAccount(ctx context.Context, req *connect.Request[v1.DisconnectOAuthAccountRequest]) (*connect.Response[v1.DisconnectOAuthAccountResponse], error) {
	return c.disconnectOAuthAccount.CallUnary(ctx, req)
}

// ListOAuthConnections calls avion.auth.v1.AuthService.ListOAuthConnections.
func (c *authServiceClient) ListOAuthConnections(ctx context.Context, req *connect.Request[v1.ListOAuthConnectionsRequest]) (*connect.Response[v1.ListOAuthConnectionsResponse], error) {
	return c.listOAuthConnections.CallUnary(ctx, req)
}

// GetOAuthConnection calls avion.auth.v1.AuthService.GetOAuthConnection.
func (c *authServiceClient) GetOAuthConnection(ctx context.Context, req *connect.Request[v1.GetOAuthConnectionRequest]) (*connect.Response[v1.GetOAuthConnectionResponse], error) {
	return c.getOAuthConnection.CallUnary(ctx, req)
}

// RefreshOAuthToken calls avion.auth.v1.AuthService.RefreshOAuthToken.
func (c *authServiceClient) RefreshOAuthToken(ctx context.Context, req *connect.Request[v1.RefreshOAuthTokenRequest]) (*connect.Response[v1.RefreshOAuthTokenResponse], error) {
	return c.refreshOAuthToken.CallUnary(ctx, req)
}

// ListOAuthProviders calls avion.auth.v1.AuthService.ListOAuthProviders.
func (c *authServiceClient) ListOAuthProviders(ctx context.Context, req *connect.Request[v1.ListOAuthProvidersRequest]) (*connect.Response[v1.ListOAuthProvidersResponse], error) {
	return c.listOAuthProviders.CallUnary(ctx, req)
}

// GetOAuthUserInfo calls avion.auth.v1.AuthService.GetOAuthUserInfo.
func (c *authServiceClient) GetOAuthUserInfo(ctx context.Context, req *connect.Request[v1.GetOAuthUserInfoRequest]) (*connect.Response[v1.GetOAuthUserInfoResponse], error) {
	return c.getOAuthUserInfo.CallUnary(ctx, req)
}

// CreateSession calls avion.auth.v1.AuthService.CreateSession.
func (c *authServiceClient) CreateSession(ctx context.Context, req *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// GetSession calls avion.auth.v1.AuthService.GetSession.
func (c *authServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// ListSessions calls avion.auth.v1.AuthService.ListSessions.
func (c *authServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// ValidateSession calls avion.auth.v1.AuthService.ValidateSession.
func (c *authServiceClient) ValidateSession(ctx context.Context, req *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error) {
	return c.validateSession.CallUnary(ctx, req)
}

// UpdateSession calls avion.auth.v1.AuthService.UpdateSession.
func (c *authServiceClient) UpdateSession(ctx context.Context, req *connect.Request[v1.UpdateSessionRequest]) (*connect.Response[v1.UpdateSessionResponse], error) {
	return c.updateSession.CallUnary(ctx, req)
}

// ExtendSession calls avion.auth.v1.AuthService.ExtendSession.
func (c *authServiceClient) ExtendSession(ctx context.Context, req *connect.Request[v1.ExtendSessionRequest]) (*connect.Response[v1.ExtendSessionResponse], error) {
	return c.extendSession.CallUnary(ctx, req)
}

// RevokeSession calls avion.auth.v1.AuthService.RevokeSession.
func (c *authServiceClient) RevokeSession(ctx context.Context, req *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return c.revokeSession.CallUnary(ctx, req)
}

// GetSessionStats calls avion.auth.v1.AuthService.GetSessionStats.
func (c *authServiceClient) GetSessionStats(ctx context.Context, req *connect.Request[v1.GetSessionStatsRequest]) (*connect.Response[v1.GetSessionStatsResponse], error) {
	return c.getSessionStats.CallUnary(ctx, req)
}

// RecoverAccount calls avion.auth.v1.AuthService.RecoverAccount.
func (c *authServiceClient) RecoverAccount(ctx context.Context, req *connect.Request[v1.RecoverAccountRequest]) (*connect.Response[v1.RecoverAccountResponse], error) {
	return c.recoverAccount.CallUnary(ctx, req)
}

// ExportAccountData calls avion.auth.v1.AuthService.ExportAccountData.
func (c *authServiceClient) ExportAccountData(ctx context.Context, req *connect.Request[v1.ExportAccountDataRequest]) (*connect.Response[v1.ExportAccountDataResponse], error) {
	return c.exportAccountData.CallUnary(ctx, req)
}

// GetExportStatus calls avion.auth.v1.AuthService.GetExportStatus.
func (c *authServiceClient) GetExportStatus(ctx context.Context, req *connect.Request[v1.GetExportStatusRequest]) (*connect.Response[v1.GetExportStatusResponse], error) {
	return c.getExportStatus.CallUnary(ctx, req)
}

// ImportAccountData calls avion.auth.v1.AuthService.ImportAccountData.
func (c *authServiceClient) ImportAccountData(ctx context.Context, req *connect.Request[v1.ImportAccountDataRequest]) (*connect.Response[v1.ImportAccountDataResponse], error) {
	return c.importAccountData.CallUnary(ctx, req)
}

// GetLoginHistory calls avion.auth.v1.AuthService.GetLoginHistory.
func (c *authServiceClient) GetLoginHistory(ctx context.Context, req *connect.Request[v1.GetLoginHistoryRequest]) (*connect.Response[v1.GetLoginHistoryResponse], error) {
	return c.getLoginHistory.CallUnary(ctx, req)
}

// GetSecurityAuditLog calls avion.auth.v1.AuthService.GetSecurityAuditLog.
func (c *authServiceClient) GetSecurityAuditLog(ctx context.Context, req *connect.Request[v1.GetSecurityAuditLogRequest]) (*connect.Response[v1.GetSecurityAuditLogResponse], error) {
	return c.getSecurityAuditLog.CallUnary(ctx, req)
}

// GetUserPreferences calls avion.auth.v1.AuthService.GetUserPreferences.
func (c *authServiceClient) GetUserPreferences(ctx context.Context, req *connect.Request[v1.GetUserPreferencesRequest]) (*connect.Response[v1.GetUserPreferencesResponse], error) {
	return c.getUserPreferences.CallUnary(ctx, req)
}

// UpdateUserPreferences calls avion.auth.v1.AuthService.UpdateUserPreferences.
func (c *authServiceClient) UpdateUserPreferences(ctx context.Context, req *connect.Request[v1.UpdateUserPreferencesRequest]) (*connect.Response[v1.UpdateUserPreferencesResponse], error) {
	return c.updateUserPreferences.CallUnary(ctx, req)
}

// ResetUserPreferences calls avion.auth.v1.AuthService.ResetUserPreferences.
func (c *authServiceClient) ResetUserPreferences(ctx context.Context, req *connect.Request[v1.ResetUserPreferencesRequest]) (*connect.Response[v1.ResetUserPreferencesResponse], error) {
	return c.resetUserPreferences.CallUnary(ctx, req)
}

// EvaluatePolicy calls avion.auth.v1.AuthService.EvaluatePolicy.
func (c *authServiceClient) EvaluatePolicy(ctx context.Context, req *connect.Request[v1.EvaluatePolicyRequest]) (*connect.Response[v1.EvaluatePolicyResponse], error) {
	return c.evaluatePolicy.CallUnary(ctx, req)
}

// CreatePolicy calls avion.auth.v1.AuthService.CreatePolicy.
func (c *authServiceClient) CreatePolicy(ctx context.Context, req *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// GetPolicy calls avion.auth.v1.AuthService.GetPolicy.
func (c *authServiceClient) GetPolicy(ctx context.Context, req *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error) {
	return c.getPolicy.CallUnary(ctx, req)
}

// UpdatePolicy calls avion.auth.v1.AuthService.UpdatePolicy.
func (c *authServiceClient) UpdatePolicy(ctx context.Context, req *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls avion.auth.v1.AuthService.DeletePolicy.
func (c *authServiceClient) DeletePolicy(ctx context.Context, req *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// ListPolicies calls avion.auth.v1.AuthService.ListPolicies.
func (c *authServiceClient) ListPolicies(ctx context.Context, req *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// AssignPolicy calls avion.auth.v1.AuthService.AssignPolicy.
func (c *authServiceClient) AssignPolicy(ctx context.Context, req *connect.Request[v1.AssignPolicyRequest]) (*connect.Response[v1.AssignPolicyResponse], error) {
	return c.assignPolicy.CallUnary(ctx, req)
}

// UnassignPolicy calls avion.auth.v1.AuthService.UnassignPolicy.
func (c *authServiceClient) UnassignPolicy(ctx context.Context, req *connect.Request[v1.UnassignPolicyRequest]) (*connect.Response[v1.UnassignPolicyResponse], error) {
	return c.unassignPolicy.CallUnary(ctx, req)
}

// ListUserPolicies calls avion.auth.v1.AuthService.ListUserPolicies.
func (c *authServiceClient) ListUserPolicies(ctx context.Context, req *connect.Request[v1.ListUserPoliciesRequest]) (*connect.Response[v1.ListUserPoliciesResponse], error) {
	return c.listUserPolicies.CallUnary(ctx, req)
}

// GenerateJwt calls avion.auth.v1.AuthService.GenerateJwt.
func (c *authServiceClient) GenerateJwt(ctx context.Context, req *connect.Request[v1.GenerateJwtRequest]) (*connect.Response[v1.GenerateJwtResponse], error) {
	return c.generateJwt.CallUnary(ctx, req)
}

// VerifyJwt calls avion.auth.v1.AuthService.VerifyJwt.
func (c *authServiceClient) VerifyJwt(ctx context.Context, req *connect.Request[v1.VerifyJwtRequest]) (*connect.Response[v1.VerifyJwtResponse], error) {
	return c.verifyJwt.CallUnary(ctx, req)
}

// RefreshJwt calls avion.auth.v1.AuthService.RefreshJwt.
func (c *authServiceClient) RefreshJwt(ctx context.Context, req *connect.Request[v1.RefreshJwtRequest]) (*connect.Response[v1.RefreshJwtResponse], error) {
	return c.refreshJwt.CallUnary(ctx, req)
}

// RevokeJwt calls avion.auth.v1.AuthService.RevokeJwt.
func (c *authServiceClient) RevokeJwt(ctx context.Context, req *connect.Request[v1.RevokeJwtRequest]) (*connect.Response[v1.RevokeJwtResponse], error) {
	return c.revokeJwt.CallUnary(ctx, req)
}

// IntrospectJwt calls avion.auth.v1.AuthService.IntrospectJwt.
func (c *authServiceClient) IntrospectJwt(ctx context.Context, req *connect.Request[v1.IntrospectJwtRequest]) (*connect.Response[v1.IntrospectJwtResponse], error) {
	return c.introspectJwt.CallUnary(ctx, req)
}

// GetJwks calls avion.auth.v1.AuthService.GetJwks.
func (c *authServiceClient) GetJwks(ctx context.Context, req *connect.Request[v1.GetJwksRequest]) (*connect.Response[v1.GetJwksResponse], error) {
	return c.getJwks.CallUnary(ctx, req)
}

// GetJwtConfig calls avion.auth.v1.AuthService.GetJwtConfig.
func (c *authServiceClient) GetJwtConfig(ctx context.Context, req *connect.Request[v1.GetJwtConfigRequest]) (*connect.Response[v1.GetJwtConfigResponse], error) {
	return c.getJwtConfig.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the avion.auth.v1.AuthService service.
type AuthServiceHandler interface {
	// 認証関連
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	// ユーザー登録関連
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error)
	// パスワード管理
	RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error)
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// アカウント管理
	ChangeEmail(context.Context, *connect.Request[v1.ChangeEmailRequest]) (*connect.Response[v1.ChangeEmailResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	CancelAccountDeletion(context.Context, *connect.Request[v1.CancelAccountDeletionRequest]) (*connect.Response[v1.CancelAccountDeletionResponse], error)
	// MFA/TOTP関連
	EnableMfa(context.Context, *connect.Request[v1.EnableMfaRequest]) (*connect.Response[v1.EnableMfaResponse], error)
	DisableMfa(context.Context, *connect.Request[v1.DisableMfaRequest]) (*connect.Response[v1.DisableMfaResponse], error)
	SetupTotp(context.Context, *connect.Request[v1.SetupTotpRequest]) (*connect.Response[v1.SetupTotpResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	GenerateBackupCodes(context.Context, *connect.Request[v1.GenerateBackupCodesRequest]) (*connect.Response[v1.GenerateBackupCodesResponse], error)
	VerifyBackupCode(context.Context, *connect.Request[v1.VerifyBackupCodeRequest]) (*connect.Response[v1.VerifyBackupCodeResponse], error)
	ListMfaDevices(context.Context, *connect.Request[v1.ListMfaDevicesRequest]) (*connect.Response[v1.ListMfaDevicesResponse], error)
	GetMfaDevice(context.Context, *connect.Request[v1.GetMfaDeviceRequest]) (*connect.Response[v1.GetMfaDeviceResponse], error)
	UpdateMfaDevice(context.Context, *connect.Request[v1.UpdateMfaDeviceRequest]) (*connect.Response[v1.UpdateMfaDeviceResponse], error)
	MfaChallenge(context.Context, *connect.Request[v1.MfaChallengeRequest]) (*connect.Response[v1.MfaChallengeResponse], error)
	VerifyMfaChallenge(context.Context, *connect.Request[v1.VerifyMfaChallengeRequest]) (*connect.Response[v1.VerifyMfaChallengeResponse], error)
	// Passkey/WebAuthn関連
	RegisterPasskeyOptions(context.Context, *connect.Request[v1.RegisterPasskeyOptionsRequest]) (*connect.Response[v1.RegisterPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	AuthenticatePasskeyOptions(context.Context, *connect.Request[v1.AuthenticatePasskeyOptionsRequest]) (*connect.Response[v1.AuthenticatePasskeyOptionsResponse], error)
	AuthenticatePasskey(context.Context, *connect.Request[v1.AuthenticatePasskeyRequest]) (*connect.Response[v1.AuthenticatePasskeyResponse], error)
	ListPasskeys(context.Context, *connect.Request[v1.ListPasskeysRequest]) (*connect.Response[v1.ListPasskeysResponse], error)
	GetPasskey(context.Context, *connect.Request[v1.GetPasskeyRequest]) (*connect.Response[v1.GetPasskeyResponse], error)
	UpdatePasskey(context.Context, *connect.Request[v1.UpdatePasskeyRequest]) (*connect.Response[v1.UpdatePasskeyResponse], error)
	DeletePasskey(context.Context, *connect.Request[v1.DeletePasskeyRequest]) (*connect.Response[v1.DeletePasskeyResponse], error)
	RevokePasskey(context.Context, *connect.Request[v1.RevokePasskeyRequest]) (*connect.Response[v1.RevokePasskeyResponse], error)
	// OAuth2.0/OIDC関連
	GetOAuthAuthorizationUrl(context.Context, *connect.Request[v1.GetOAuthAuthorizationUrlRequest]) (*connect.Response[v1.GetOAuthAuthorizationUrlResponse], error)
	HandleOAuthCallback(context.Context, *connect.Request[v1.HandleOAuthCallbackRequest]) (*connect.Response[v1.HandleOAuthCallbackResponse], error)
	ConnectOAuthAccount(context.Context, *connect.Request[v1.ConnectOAuthAccountRequest]) (*connect.Response[v1.ConnectOAuthAccountResponse], error)
	DisconnectOAuthAccount(context.Context, *connect.Request[v1.DisconnectOAuthAccountRequest]) (*connect.Response[v1.DisconnectOAuthAccountResponse], error)
	ListOAuthConnections(context.Context, *connect.Request[v1.ListOAuthConnectionsRequest]) (*connect.Response[v1.ListOAuthConnectionsResponse], error)
	GetOAuthConnection(context.Context, *connect.Request[v1.GetOAuthConnectionRequest]) (*connect.Response[v1.GetOAuthConnectionResponse], error)
	RefreshOAuthToken(context.Context, *connect.Request[v1.RefreshOAuthTokenRequest]) (*connect.Response[v1.RefreshOAuthTokenResponse], error)
	ListOAuthProviders(context.Context, *connect.Request[v1.ListOAuthProvidersRequest]) (*connect.Response[v1.ListOAuthProvidersResponse], error)
	GetOAuthUserInfo(context.Context, *connect.Request[v1.GetOAuthUserInfoRequest]) (*connect.Response[v1.GetOAuthUserInfoResponse], error)
	// セッション管理
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error)
	UpdateSession(context.Context, *connect.Request[v1.UpdateSessionRequest]) (*connect.Response[v1.UpdateSessionResponse], error)
	ExtendSession(context.Context, *connect.Request[v1.ExtendSessionRequest]) (*connect.Response[v1.ExtendSessionResponse], error)
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	GetSessionStats(context.Context, *connect.Request[v1.GetSessionStatsRequest]) (*connect.Response[v1.GetSessionStatsResponse], error)
	// アカウント復旧
	RecoverAccount(context.Context, *connect.Request[v1.RecoverAccountRequest]) (*connect.Response[v1.RecoverAccountResponse], error)
	// アカウントエクスポート（GDPR対応）
	ExportAccountData(context.Context, *connect.Request[v1.ExportAccountDataRequest]) (*connect.Response[v1.ExportAccountDataResponse], error)
	GetExportStatus(context.Context, *connect.Request[v1.GetExportStatusRequest]) (*connect.Response[v1.GetExportStatusResponse], error)
	// アカウントインポート
	ImportAccountData(context.Context, *connect.Request[v1.ImportAccountDataRequest]) (*connect.Response[v1.ImportAccountDataResponse], error)
	// ログイン履歴とセキュリティ
	GetLoginHistory(context.Context, *connect.Request[v1.GetLoginHistoryRequest]) (*connect.Response[v1.GetLoginHistoryResponse], error)
	GetSecurityAuditLog(context.Context, *connect.Request[v1.GetSecurityAuditLogRequest]) (*connect.Response[v1.GetSecurityAuditLogResponse], error)
	// ユーザー設定管理
	GetUserPreferences(context.Context, *connect.Request[v1.GetUserPreferencesRequest]) (*connect.Response[v1.GetUserPreferencesResponse], error)
	UpdateUserPreferences(context.Context, *connect.Request[v1.UpdateUserPreferencesRequest]) (*connect.Response[v1.UpdateUserPreferencesResponse], error)
	ResetUserPreferences(context.Context, *connect.Request[v1.ResetUserPreferencesRequest]) (*connect.Response[v1.ResetUserPreferencesResponse], error)
	// ポリシー管理
	EvaluatePolicy(context.Context, *connect.Request[v1.EvaluatePolicyRequest]) (*connect.Response[v1.EvaluatePolicyResponse], error)
	CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error)
	GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error)
	UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error)
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	AssignPolicy(context.Context, *connect.Request[v1.AssignPolicyRequest]) (*connect.Response[v1.AssignPolicyResponse], error)
	UnassignPolicy(context.Context, *connect.Request[v1.UnassignPolicyRequest]) (*connect.Response[v1.UnassignPolicyResponse], error)
	ListUserPolicies(context.Context, *connect.Request[v1.ListUserPoliciesRequest]) (*connect.Response[v1.ListUserPoliciesResponse], error)
	// JWT管理
	GenerateJwt(context.Context, *connect.Request[v1.GenerateJwtRequest]) (*connect.Response[v1.GenerateJwtResponse], error)
	VerifyJwt(context.Context, *connect.Request[v1.VerifyJwtRequest]) (*connect.Response[v1.VerifyJwtResponse], error)
	RefreshJwt(context.Context, *connect.Request[v1.RefreshJwtRequest]) (*connect.Response[v1.RefreshJwtResponse], error)
	RevokeJwt(context.Context, *connect.Request[v1.RevokeJwtRequest]) (*connect.Response[v1.RevokeJwtResponse], error)
	IntrospectJwt(context.Context, *connect.Request[v1.IntrospectJwtRequest]) (*connect.Response[v1.IntrospectJwtResponse], error)
	GetJwks(context.Context, *connect.Request[v1.GetJwksRequest]) (*connect.Response[v1.GetJwksResponse], error)
	GetJwtConfig(context.Context, *connect.Request[v1.GetJwtConfigRequest]) (*connect.Response[v1.GetJwtConfigResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_avion_auth_v1_auth_service_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceValidateTokenHandler := connect.NewUnaryHandler(
		AuthServiceValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateUserHandler := connect.NewUnaryHandler(
		AuthServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(authServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyEmailHandler := connect.NewUnaryHandler(
		AuthServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResendVerificationEmailHandler := connect.NewUnaryHandler(
		AuthServiceResendVerificationEmailProcedure,
		svc.ResendVerificationEmail,
		connect.WithSchema(authServiceMethods.ByName("ResendVerificationEmail")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRequestPasswordResetHandler := connect.NewUnaryHandler(
		AuthServiceRequestPasswordResetProcedure,
		svc.RequestPasswordReset,
		connect.WithSchema(authServiceMethods.ByName("RequestPasswordReset")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetPasswordHandler := connect.NewUnaryHandler(
		AuthServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangeEmailHandler := connect.NewUnaryHandler(
		AuthServiceChangeEmailProcedure,
		svc.ChangeEmail,
		connect.WithSchema(authServiceMethods.ByName("ChangeEmail")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AuthServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(authServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCancelAccountDeletionHandler := connect.NewUnaryHandler(
		AuthServiceCancelAccountDeletionProcedure,
		svc.CancelAccountDeletion,
		connect.WithSchema(authServiceMethods.ByName("CancelAccountDeletion")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceEnableMfaHandler := connect.NewUnaryHandler(
		AuthServiceEnableMfaProcedure,
		svc.EnableMfa,
		connect.WithSchema(authServiceMethods.ByName("EnableMfa")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDisableMfaHandler := connect.NewUnaryHandler(
		AuthServiceDisableMfaProcedure,
		svc.DisableMfa,
		connect.WithSchema(authServiceMethods.ByName("DisableMfa")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSetupTotpHandler := connect.NewUnaryHandler(
		AuthServiceSetupTotpProcedure,
		svc.SetupTotp,
		connect.WithSchema(authServiceMethods.ByName("SetupTotp")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyTotpHandler := connect.NewUnaryHandler(
		AuthServiceVerifyTotpProcedure,
		svc.VerifyTotp,
		connect.WithSchema(authServiceMethods.ByName("VerifyTotp")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGenerateBackupCodesHandler := connect.NewUnaryHandler(
		AuthServiceGenerateBackupCodesProcedure,
		svc.GenerateBackupCodes,
		connect.WithSchema(authServiceMethods.ByName("GenerateBackupCodes")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyBackupCodeHandler := connect.NewUnaryHandler(
		AuthServiceVerifyBackupCodeProcedure,
		svc.VerifyBackupCode,
		connect.WithSchema(authServiceMethods.ByName("VerifyBackupCode")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListMfaDevicesHandler := connect.NewUnaryHandler(
		AuthServiceListMfaDevicesProcedure,
		svc.ListMfaDevices,
		connect.WithSchema(authServiceMethods.ByName("ListMfaDevices")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetMfaDeviceHandler := connect.NewUnaryHandler(
		AuthServiceGetMfaDeviceProcedure,
		svc.GetMfaDevice,
		connect.WithSchema(authServiceMethods.ByName("GetMfaDevice")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateMfaDeviceHandler := connect.NewUnaryHandler(
		AuthServiceUpdateMfaDeviceProcedure,
		svc.UpdateMfaDevice,
		connect.WithSchema(authServiceMethods.ByName("UpdateMfaDevice")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceMfaChallengeHandler := connect.NewUnaryHandler(
		AuthServiceMfaChallengeProcedure,
		svc.MfaChallenge,
		connect.WithSchema(authServiceMethods.ByName("MfaChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyMfaChallengeHandler := connect.NewUnaryHandler(
		AuthServiceVerifyMfaChallengeProcedure,
		svc.VerifyMfaChallenge,
		connect.WithSchema(authServiceMethods.ByName("VerifyMfaChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterPasskeyOptionsHandler := connect.NewUnaryHandler(
		AuthServiceRegisterPasskeyOptionsProcedure,
		svc.RegisterPasskeyOptions,
		connect.WithSchema(authServiceMethods.ByName("RegisterPasskeyOptions")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterPasskeyHandler := connect.NewUnaryHandler(
		AuthServiceRegisterPasskeyProcedure,
		svc.RegisterPasskey,
		connect.WithSchema(authServiceMethods.ByName("RegisterPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAuthenticatePasskeyOptionsHandler := connect.NewUnaryHandler(
		AuthServiceAuthenticatePasskeyOptionsProcedure,
		svc.AuthenticatePasskeyOptions,
		connect.WithSchema(authServiceMethods.ByName("AuthenticatePasskeyOptions")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAuthenticatePasskeyHandler := connect.NewUnaryHandler(
		AuthServiceAuthenticatePasskeyProcedure,
		svc.AuthenticatePasskey,
		connect.WithSchema(authServiceMethods.ByName("AuthenticatePasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListPasskeysHandler := connect.NewUnaryHandler(
		AuthServiceListPasskeysProcedure,
		svc.ListPasskeys,
		connect.WithSchema(authServiceMethods.ByName("ListPasskeys")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetPasskeyHandler := connect.NewUnaryHandler(
		AuthServiceGetPasskeyProcedure,
		svc.GetPasskey,
		connect.WithSchema(authServiceMethods.ByName("GetPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdatePasskeyHandler := connect.NewUnaryHandler(
		AuthServiceUpdatePasskeyProcedure,
		svc.UpdatePasskey,
		connect.WithSchema(authServiceMethods.ByName("UpdatePasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeletePasskeyHandler := connect.NewUnaryHandler(
		AuthServiceDeletePasskeyProcedure,
		svc.DeletePasskey,
		connect.WithSchema(authServiceMethods.ByName("DeletePasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRevokePasskeyHandler := connect.NewUnaryHandler(
		AuthServiceRevokePasskeyProcedure,
		svc.RevokePasskey,
		connect.WithSchema(authServiceMethods.ByName("RevokePasskey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetOAuthAuthorizationUrlHandler := connect.NewUnaryHandler(
		AuthServiceGetOAuthAuthorizationUrlProcedure,
		svc.GetOAuthAuthorizationUrl,
		connect.WithSchema(authServiceMethods.ByName("GetOAuthAuthorizationUrl")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceHandleOAuthCallbackHandler := connect.NewUnaryHandler(
		AuthServiceHandleOAuthCallbackProcedure,
		svc.HandleOAuthCallback,
		connect.WithSchema(authServiceMethods.ByName("HandleOAuthCallback")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceConnectOAuthAccountHandler := connect.NewUnaryHandler(
		AuthServiceConnectOAuthAccountProcedure,
		svc.ConnectOAuthAccount,
		connect.WithSchema(authServiceMethods.ByName("ConnectOAuthAccount")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDisconnectOAuthAccountHandler := connect.NewUnaryHandler(
		AuthServiceDisconnectOAuthAccountProcedure,
		svc.DisconnectOAuthAccount,
		connect.WithSchema(authServiceMethods.ByName("DisconnectOAuthAccount")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListOAuthConnectionsHandler := connect.NewUnaryHandler(
		AuthServiceListOAuthConnectionsProcedure,
		svc.ListOAuthConnections,
		connect.WithSchema(authServiceMethods.ByName("ListOAuthConnections")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetOAuthConnectionHandler := connect.NewUnaryHandler(
		AuthServiceGetOAuthConnectionProcedure,
		svc.GetOAuthConnection,
		connect.WithSchema(authServiceMethods.ByName("GetOAuthConnection")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshOAuthTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshOAuthTokenProcedure,
		svc.RefreshOAuthToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshOAuthToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListOAuthProvidersHandler := connect.NewUnaryHandler(
		AuthServiceListOAuthProvidersProcedure,
		svc.ListOAuthProviders,
		connect.WithSchema(authServiceMethods.ByName("ListOAuthProviders")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetOAuthUserInfoHandler := connect.NewUnaryHandler(
		AuthServiceGetOAuthUserInfoProcedure,
		svc.GetOAuthUserInfo,
		connect.WithSchema(authServiceMethods.ByName("GetOAuthUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateSessionHandler := connect.NewUnaryHandler(
		AuthServiceCreateSessionProcedure,
		svc.CreateSession,
		connect.WithSchema(authServiceMethods.ByName("CreateSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetSessionHandler := connect.NewUnaryHandler(
		AuthServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(authServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListSessionsHandler := connect.NewUnaryHandler(
		AuthServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(authServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceValidateSessionHandler := connect.NewUnaryHandler(
		AuthServiceValidateSessionProcedure,
		svc.ValidateSession,
		connect.WithSchema(authServiceMethods.ByName("ValidateSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateSessionHandler := connect.NewUnaryHandler(
		AuthServiceUpdateSessionProcedure,
		svc.UpdateSession,
		connect.WithSchema(authServiceMethods.ByName("UpdateSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceExtendSessionHandler := connect.NewUnaryHandler(
		AuthServiceExtendSessionProcedure,
		svc.ExtendSession,
		connect.WithSchema(authServiceMethods.ByName("ExtendSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRevokeSessionHandler := connect.NewUnaryHandler(
		AuthServiceRevokeSessionProcedure,
		svc.RevokeSession,
		connect.WithSchema(authServiceMethods.ByName("RevokeSession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetSessionStatsHandler := connect.NewUnaryHandler(
		AuthServiceGetSessionStatsProcedure,
		svc.GetSessionStats,
		connect.WithSchema(authServiceMethods.ByName("GetSessionStats")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRecoverAccountHandler := connect.NewUnaryHandler(
		AuthServiceRecoverAccountProcedure,
		svc.RecoverAccount,
		connect.WithSchema(authServiceMethods.ByName("RecoverAccount")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceExportAccountDataHandler := connect.NewUnaryHandler(
		AuthServiceExportAccountDataProcedure,
		svc.ExportAccountData,
		connect.WithSchema(authServiceMethods.ByName("ExportAccountData")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetExportStatusHandler := connect.NewUnaryHandler(
		AuthServiceGetExportStatusProcedure,
		svc.GetExportStatus,
		connect.WithSchema(authServiceMethods.ByName("GetExportStatus")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceImportAccountDataHandler := connect.NewUnaryHandler(
		AuthServiceImportAccountDataProcedure,
		svc.ImportAccountData,
		connect.WithSchema(authServiceMethods.ByName("ImportAccountData")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetLoginHistoryHandler := connect.NewUnaryHandler(
		AuthServiceGetLoginHistoryProcedure,
		svc.GetLoginHistory,
		connect.WithSchema(authServiceMethods.ByName("GetLoginHistory")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetSecurityAuditLogHandler := connect.NewUnaryHandler(
		AuthServiceGetSecurityAuditLogProcedure,
		svc.GetSecurityAuditLog,
		connect.WithSchema(authServiceMethods.ByName("GetSecurityAuditLog")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetUserPreferencesHandler := connect.NewUnaryHandler(
		AuthServiceGetUserPreferencesProcedure,
		svc.GetUserPreferences,
		connect.WithSchema(authServiceMethods.ByName("GetUserPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateUserPreferencesHandler := connect.NewUnaryHandler(
		AuthServiceUpdateUserPreferencesProcedure,
		svc.UpdateUserPreferences,
		connect.WithSchema(authServiceMethods.ByName("UpdateUserPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetUserPreferencesHandler := connect.NewUnaryHandler(
		AuthServiceResetUserPreferencesProcedure,
		svc.ResetUserPreferences,
		connect.WithSchema(authServiceMethods.ByName("ResetUserPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceEvaluatePolicyHandler := connect.NewUnaryHandler(
		AuthServiceEvaluatePolicyProcedure,
		svc.EvaluatePolicy,
		connect.WithSchema(authServiceMethods.ByName("EvaluatePolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreatePolicyHandler := connect.NewUnaryHandler(
		AuthServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		connect.WithSchema(authServiceMethods.ByName("CreatePolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetPolicyHandler := connect.NewUnaryHandler(
		AuthServiceGetPolicyProcedure,
		svc.GetPolicy,
		connect.WithSchema(authServiceMethods.ByName("GetPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdatePolicyHandler := connect.NewUnaryHandler(
		AuthServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		connect.WithSchema(authServiceMethods.ByName("UpdatePolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeletePolicyHandler := connect.NewUnaryHandler(
		AuthServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		connect.WithSchema(authServiceMethods.ByName("DeletePolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListPoliciesHandler := connect.NewUnaryHandler(
		AuthServiceListPoliciesProcedure,
		svc.ListPolicies,
		connect.WithSchema(authServiceMethods.ByName("ListPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAssignPolicyHandler := connect.NewUnaryHandler(
		AuthServiceAssignPolicyProcedure,
		svc.AssignPolicy,
		connect.WithSchema(authServiceMethods.ByName("AssignPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUnassignPolicyHandler := connect.NewUnaryHandler(
		AuthServiceUnassignPolicyProcedure,
		svc.UnassignPolicy,
		connect.WithSchema(authServiceMethods.ByName("UnassignPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListUserPoliciesHandler := connect.NewUnaryHandler(
		AuthServiceListUserPoliciesProcedure,
		svc.ListUserPolicies,
		connect.WithSchema(authServiceMethods.ByName("ListUserPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGenerateJwtHandler := connect.NewUnaryHandler(
		AuthServiceGenerateJwtProcedure,
		svc.GenerateJwt,
		connect.WithSchema(authServiceMethods.ByName("GenerateJwt")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyJwtHandler := connect.NewUnaryHandler(
		AuthServiceVerifyJwtProcedure,
		svc.VerifyJwt,
		connect.WithSchema(authServiceMethods.ByName("VerifyJwt")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshJwtHandler := connect.NewUnaryHandler(
		AuthServiceRefreshJwtProcedure,
		svc.RefreshJwt,
		connect.WithSchema(authServiceMethods.ByName("RefreshJwt")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRevokeJwtHandler := connect.NewUnaryHandler(
		AuthServiceRevokeJwtProcedure,
		svc.RevokeJwt,
		connect.WithSchema(authServiceMethods.ByName("RevokeJwt")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceIntrospectJwtHandler := connect.NewUnaryHandler(
		AuthServiceIntrospectJwtProcedure,
		svc.IntrospectJwt,
		connect.WithSchema(authServiceMethods.ByName("IntrospectJwt")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetJwksHandler := connect.NewUnaryHandler(
		AuthServiceGetJwksProcedure,
		svc.GetJwks,
		connect.WithSchema(authServiceMethods.ByName("GetJwks")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetJwtConfigHandler := connect.NewUnaryHandler(
		AuthServiceGetJwtConfigProcedure,
		svc.GetJwtConfig,
		connect.WithSchema(authServiceMethods.ByName("GetJwtConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceValidateTokenProcedure:
			authServiceValidateTokenHandler.ServeHTTP(w, r)
		case AuthServiceCreateUserProcedure:
			authServiceCreateUserHandler.ServeHTTP(w, r)
		case AuthServiceVerifyEmailProcedure:
			authServiceVerifyEmailHandler.ServeHTTP(w, r)
		case AuthServiceResendVerificationEmailProcedure:
			authServiceResendVerificationEmailHandler.ServeHTTP(w, r)
		case AuthServiceRequestPasswordResetProcedure:
			authServiceRequestPasswordResetHandler.ServeHTTP(w, r)
		case AuthServiceResetPasswordProcedure:
			authServiceResetPasswordHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordProcedure:
			authServiceChangePasswordHandler.ServeHTTP(w, r)
		case AuthServiceChangeEmailProcedure:
			authServiceChangeEmailHandler.ServeHTTP(w, r)
		case AuthServiceDeleteAccountProcedure:
			authServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AuthServiceCancelAccountDeletionProcedure:
			authServiceCancelAccountDeletionHandler.ServeHTTP(w, r)
		case AuthServiceEnableMfaProcedure:
			authServiceEnableMfaHandler.ServeHTTP(w, r)
		case AuthServiceDisableMfaProcedure:
			authServiceDisableMfaHandler.ServeHTTP(w, r)
		case AuthServiceSetupTotpProcedure:
			authServiceSetupTotpHandler.ServeHTTP(w, r)
		case AuthServiceVerifyTotpProcedure:
			authServiceVerifyTotpHandler.ServeHTTP(w, r)
		case AuthServiceGenerateBackupCodesProcedure:
			authServiceGenerateBackupCodesHandler.ServeHTTP(w, r)
		case AuthServiceVerifyBackupCodeProcedure:
			authServiceVerifyBackupCodeHandler.ServeHTTP(w, r)
		case AuthServiceListMfaDevicesProcedure:
			authServiceListMfaDevicesHandler.ServeHTTP(w, r)
		case AuthServiceGetMfaDeviceProcedure:
			authServiceGetMfaDeviceHandler.ServeHTTP(w, r)
		case AuthServiceUpdateMfaDeviceProcedure:
			authServiceUpdateMfaDeviceHandler.ServeHTTP(w, r)
		case AuthServiceMfaChallengeProcedure:
			authServiceMfaChallengeHandler.ServeHTTP(w, r)
		case AuthServiceVerifyMfaChallengeProcedure:
			authServiceVerifyMfaChallengeHandler.ServeHTTP(w, r)
		case AuthServiceRegisterPasskeyOptionsProcedure:
			authServiceRegisterPasskeyOptionsHandler.ServeHTTP(w, r)
		case AuthServiceRegisterPasskeyProcedure:
			authServiceRegisterPasskeyHandler.ServeHTTP(w, r)
		case AuthServiceAuthenticatePasskeyOptionsProcedure:
			authServiceAuthenticatePasskeyOptionsHandler.ServeHTTP(w, r)
		case AuthServiceAuthenticatePasskeyProcedure:
			authServiceAuthenticatePasskeyHandler.ServeHTTP(w, r)
		case AuthServiceListPasskeysProcedure:
			authServiceListPasskeysHandler.ServeHTTP(w, r)
		case AuthServiceGetPasskeyProcedure:
			authServiceGetPasskeyHandler.ServeHTTP(w, r)
		case AuthServiceUpdatePasskeyProcedure:
			authServiceUpdatePasskeyHandler.ServeHTTP(w, r)
		case AuthServiceDeletePasskeyProcedure:
			authServiceDeletePasskeyHandler.ServeHTTP(w, r)
		case AuthServiceRevokePasskeyProcedure:
			authServiceRevokePasskeyHandler.ServeHTTP(w, r)
		case AuthServiceGetOAuthAuthorizationUrlProcedure:
			authServiceGetOAuthAuthorizationUrlHandler.ServeHTTP(w, r)
		case AuthServiceHandleOAuthCallbackProcedure:
			authServiceHandleOAuthCallbackHandler.ServeHTTP(w, r)
		case AuthServiceConnectOAuthAccountProcedure:
			authServiceConnectOAuthAccountHandler.ServeHTTP(w, r)
		case AuthServiceDisconnectOAuthAccountProcedure:
			authServiceDisconnectOAuthAccountHandler.ServeHTTP(w, r)
		case AuthServiceListOAuthConnectionsProcedure:
			authServiceListOAuthConnectionsHandler.ServeHTTP(w, r)
		case AuthServiceGetOAuthConnectionProcedure:
			authServiceGetOAuthConnectionHandler.ServeHTTP(w, r)
		case AuthServiceRefreshOAuthTokenProcedure:
			authServiceRefreshOAuthTokenHandler.ServeHTTP(w, r)
		case AuthServiceListOAuthProvidersProcedure:
			authServiceListOAuthProvidersHandler.ServeHTTP(w, r)
		case AuthServiceGetOAuthUserInfoProcedure:
			authServiceGetOAuthUserInfoHandler.ServeHTTP(w, r)
		case AuthServiceCreateSessionProcedure:
			authServiceCreateSessionHandler.ServeHTTP(w, r)
		case AuthServiceGetSessionProcedure:
			authServiceGetSessionHandler.ServeHTTP(w, r)
		case AuthServiceListSessionsProcedure:
			authServiceListSessionsHandler.ServeHTTP(w, r)
		case AuthServiceValidateSessionProcedure:
			authServiceValidateSessionHandler.ServeHTTP(w, r)
		case AuthServiceUpdateSessionProcedure:
			authServiceUpdateSessionHandler.ServeHTTP(w, r)
		case AuthServiceExtendSessionProcedure:
			authServiceExtendSessionHandler.ServeHTTP(w, r)
		case AuthServiceRevokeSessionProcedure:
			authServiceRevokeSessionHandler.ServeHTTP(w, r)
		case AuthServiceGetSessionStatsProcedure:
			authServiceGetSessionStatsHandler.ServeHTTP(w, r)
		case AuthServiceRecoverAccountProcedure:
			authServiceRecoverAccountHandler.ServeHTTP(w, r)
		case AuthServiceExportAccountDataProcedure:
			authServiceExportAccountDataHandler.ServeHTTP(w, r)
		case AuthServiceGetExportStatusProcedure:
			authServiceGetExportStatusHandler.ServeHTTP(w, r)
		case AuthServiceImportAccountDataProcedure:
			authServiceImportAccountDataHandler.ServeHTTP(w, r)
		case AuthServiceGetLoginHistoryProcedure:
			authServiceGetLoginHistoryHandler.ServeHTTP(w, r)
		case AuthServiceGetSecurityAuditLogProcedure:
			authServiceGetSecurityAuditLogHandler.ServeHTTP(w, r)
		case AuthServiceGetUserPreferencesProcedure:
			authServiceGetUserPreferencesHandler.ServeHTTP(w, r)
		case AuthServiceUpdateUserPreferencesProcedure:
			authServiceUpdateUserPreferencesHandler.ServeHTTP(w, r)
		case AuthServiceResetUserPreferencesProcedure:
			authServiceResetUserPreferencesHandler.ServeHTTP(w, r)
		case AuthServiceEvaluatePolicyProcedure:
			authServiceEvaluatePolicyHandler.ServeHTTP(w, r)
		case AuthServiceCreatePolicyProcedure:
			authServiceCreatePolicyHandler.ServeHTTP(w, r)
		case AuthServiceGetPolicyProcedure:
			authServiceGetPolicyHandler.ServeHTTP(w, r)
		case AuthServiceUpdatePolicyProcedure:
			authServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case AuthServiceDeletePolicyProcedure:
			authServiceDeletePolicyHandler.ServeHTTP(w, r)
		case AuthServiceListPoliciesProcedure:
			authServiceListPoliciesHandler.ServeHTTP(w, r)
		case AuthServiceAssignPolicyProcedure:
			authServiceAssignPolicyHandler.ServeHTTP(w, r)
		case AuthServiceUnassignPolicyProcedure:
			authServiceUnassignPolicyHandler.ServeHTTP(w, r)
		case AuthServiceListUserPoliciesProcedure:
			authServiceListUserPoliciesHandler.ServeHTTP(w, r)
		case AuthServiceGenerateJwtProcedure:
			authServiceGenerateJwtHandler.ServeHTTP(w, r)
		case AuthServiceVerifyJwtProcedure:
			authServiceVerifyJwtHandler.ServeHTTP(w, r)
		case AuthServiceRefreshJwtProcedure:
			authServiceRefreshJwtHandler.ServeHTTP(w, r)
		case AuthServiceRevokeJwtProcedure:
			authServiceRevokeJwtHandler.ServeHTTP(w, r)
		case AuthServiceIntrospectJwtProcedure:
			authServiceIntrospectJwtHandler.ServeHTTP(w, r)
		case AuthServiceGetJwksProcedure:
			authServiceGetJwksHandler.ServeHTTP(w, r)
		case AuthServiceGetJwtConfigProcedure:
			authServiceGetJwtConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ValidateToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.CreateUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.VerifyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ResendVerificationEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RequestPasswordReset is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ResetPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ChangePassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangeEmail(context.Context, *connect.Request[v1.ChangeEmailRequest]) (*connect.Response[v1.ChangeEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ChangeEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.DeleteAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) CancelAccountDeletion(context.Context, *connect.Request[v1.CancelAccountDeletionRequest]) (*connect.Response[v1.CancelAccountDeletionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.CancelAccountDeletion is not implemented"))
}

func (UnimplementedAuthServiceHandler) EnableMfa(context.Context, *connect.Request[v1.EnableMfaRequest]) (*connect.Response[v1.EnableMfaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.EnableMfa is not implemented"))
}

func (UnimplementedAuthServiceHandler) DisableMfa(context.Context, *connect.Request[v1.DisableMfaRequest]) (*connect.Response[v1.DisableMfaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.DisableMfa is not implemented"))
}

func (UnimplementedAuthServiceHandler) SetupTotp(context.Context, *connect.Request[v1.SetupTotpRequest]) (*connect.Response[v1.SetupTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.SetupTotp is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.VerifyTotp is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateBackupCodes(context.Context, *connect.Request[v1.GenerateBackupCodesRequest]) (*connect.Response[v1.GenerateBackupCodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GenerateBackupCodes is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyBackupCode(context.Context, *connect.Request[v1.VerifyBackupCodeRequest]) (*connect.Response[v1.VerifyBackupCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.VerifyBackupCode is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMfaDevices(context.Context, *connect.Request[v1.ListMfaDevicesRequest]) (*connect.Response[v1.ListMfaDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListMfaDevices is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMfaDevice(context.Context, *connect.Request[v1.GetMfaDeviceRequest]) (*connect.Response[v1.GetMfaDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetMfaDevice is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateMfaDevice(context.Context, *connect.Request[v1.UpdateMfaDeviceRequest]) (*connect.Response[v1.UpdateMfaDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UpdateMfaDevice is not implemented"))
}

func (UnimplementedAuthServiceHandler) MfaChallenge(context.Context, *connect.Request[v1.MfaChallengeRequest]) (*connect.Response[v1.MfaChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.MfaChallenge is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMfaChallenge(context.Context, *connect.Request[v1.VerifyMfaChallengeRequest]) (*connect.Response[v1.VerifyMfaChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.VerifyMfaChallenge is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterPasskeyOptions(context.Context, *connect.Request[v1.RegisterPasskeyOptionsRequest]) (*connect.Response[v1.RegisterPasskeyOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RegisterPasskeyOptions is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RegisterPasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) AuthenticatePasskeyOptions(context.Context, *connect.Request[v1.AuthenticatePasskeyOptionsRequest]) (*connect.Response[v1.AuthenticatePasskeyOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.AuthenticatePasskeyOptions is not implemented"))
}

func (UnimplementedAuthServiceHandler) AuthenticatePasskey(context.Context, *connect.Request[v1.AuthenticatePasskeyRequest]) (*connect.Response[v1.AuthenticatePasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.AuthenticatePasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListPasskeys(context.Context, *connect.Request[v1.ListPasskeysRequest]) (*connect.Response[v1.ListPasskeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListPasskeys is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetPasskey(context.Context, *connect.Request[v1.GetPasskeyRequest]) (*connect.Response[v1.GetPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetPasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdatePasskey(context.Context, *connect.Request[v1.UpdatePasskeyRequest]) (*connect.Response[v1.UpdatePasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UpdatePasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeletePasskey(context.Context, *connect.Request[v1.DeletePasskeyRequest]) (*connect.Response[v1.DeletePasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.DeletePasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokePasskey(context.Context, *connect.Request[v1.RevokePasskeyRequest]) (*connect.Response[v1.RevokePasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RevokePasskey is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetOAuthAuthorizationUrl(context.Context, *connect.Request[v1.GetOAuthAuthorizationUrlRequest]) (*connect.Response[v1.GetOAuthAuthorizationUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetOAuthAuthorizationUrl is not implemented"))
}

func (UnimplementedAuthServiceHandler) HandleOAuthCallback(context.Context, *connect.Request[v1.HandleOAuthCallbackRequest]) (*connect.Response[v1.HandleOAuthCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.HandleOAuthCallback is not implemented"))
}

func (UnimplementedAuthServiceHandler) ConnectOAuthAccount(context.Context, *connect.Request[v1.ConnectOAuthAccountRequest]) (*connect.Response[v1.ConnectOAuthAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ConnectOAuthAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) DisconnectOAuthAccount(context.Context, *connect.Request[v1.DisconnectOAuthAccountRequest]) (*connect.Response[v1.DisconnectOAuthAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.DisconnectOAuthAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListOAuthConnections(context.Context, *connect.Request[v1.ListOAuthConnectionsRequest]) (*connect.Response[v1.ListOAuthConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListOAuthConnections is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetOAuthConnection(context.Context, *connect.Request[v1.GetOAuthConnectionRequest]) (*connect.Response[v1.GetOAuthConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetOAuthConnection is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshOAuthToken(context.Context, *connect.Request[v1.RefreshOAuthTokenRequest]) (*connect.Response[v1.RefreshOAuthTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RefreshOAuthToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListOAuthProviders(context.Context, *connect.Request[v1.ListOAuthProvidersRequest]) (*connect.Response[v1.ListOAuthProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListOAuthProviders is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetOAuthUserInfo(context.Context, *connect.Request[v1.GetOAuthUserInfoRequest]) (*connect.Response[v1.GetOAuthUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetOAuthUserInfo is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.CreateSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListSessions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ValidateSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateSession(context.Context, *connect.Request[v1.UpdateSessionRequest]) (*connect.Response[v1.UpdateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UpdateSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) ExtendSession(context.Context, *connect.Request[v1.ExtendSessionRequest]) (*connect.Response[v1.ExtendSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ExtendSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RevokeSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSessionStats(context.Context, *connect.Request[v1.GetSessionStatsRequest]) (*connect.Response[v1.GetSessionStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetSessionStats is not implemented"))
}

func (UnimplementedAuthServiceHandler) RecoverAccount(context.Context, *connect.Request[v1.RecoverAccountRequest]) (*connect.Response[v1.RecoverAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RecoverAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) ExportAccountData(context.Context, *connect.Request[v1.ExportAccountDataRequest]) (*connect.Response[v1.ExportAccountDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ExportAccountData is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetExportStatus(context.Context, *connect.Request[v1.GetExportStatusRequest]) (*connect.Response[v1.GetExportStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetExportStatus is not implemented"))
}

func (UnimplementedAuthServiceHandler) ImportAccountData(context.Context, *connect.Request[v1.ImportAccountDataRequest]) (*connect.Response[v1.ImportAccountDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ImportAccountData is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetLoginHistory(context.Context, *connect.Request[v1.GetLoginHistoryRequest]) (*connect.Response[v1.GetLoginHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetLoginHistory is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSecurityAuditLog(context.Context, *connect.Request[v1.GetSecurityAuditLogRequest]) (*connect.Response[v1.GetSecurityAuditLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetSecurityAuditLog is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetUserPreferences(context.Context, *connect.Request[v1.GetUserPreferencesRequest]) (*connect.Response[v1.GetUserPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetUserPreferences is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateUserPreferences(context.Context, *connect.Request[v1.UpdateUserPreferencesRequest]) (*connect.Response[v1.UpdateUserPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UpdateUserPreferences is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetUserPreferences(context.Context, *connect.Request[v1.ResetUserPreferencesRequest]) (*connect.Response[v1.ResetUserPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ResetUserPreferences is not implemented"))
}

func (UnimplementedAuthServiceHandler) EvaluatePolicy(context.Context, *connect.Request[v1.EvaluatePolicyRequest]) (*connect.Response[v1.EvaluatePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.EvaluatePolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.CreatePolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UpdatePolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.DeletePolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListPolicies is not implemented"))
}

func (UnimplementedAuthServiceHandler) AssignPolicy(context.Context, *connect.Request[v1.AssignPolicyRequest]) (*connect.Response[v1.AssignPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.AssignPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) UnassignPolicy(context.Context, *connect.Request[v1.UnassignPolicyRequest]) (*connect.Response[v1.UnassignPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.UnassignPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListUserPolicies(context.Context, *connect.Request[v1.ListUserPoliciesRequest]) (*connect.Response[v1.ListUserPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.ListUserPolicies is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateJwt(context.Context, *connect.Request[v1.GenerateJwtRequest]) (*connect.Response[v1.GenerateJwtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GenerateJwt is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyJwt(context.Context, *connect.Request[v1.VerifyJwtRequest]) (*connect.Response[v1.VerifyJwtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.VerifyJwt is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshJwt(context.Context, *connect.Request[v1.RefreshJwtRequest]) (*connect.Response[v1.RefreshJwtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RefreshJwt is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokeJwt(context.Context, *connect.Request[v1.RevokeJwtRequest]) (*connect.Response[v1.RevokeJwtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.RevokeJwt is not implemented"))
}

func (UnimplementedAuthServiceHandler) IntrospectJwt(context.Context, *connect.Request[v1.IntrospectJwtRequest]) (*connect.Response[v1.IntrospectJwtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.IntrospectJwt is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetJwks(context.Context, *connect.Request[v1.GetJwksRequest]) (*connect.Response[v1.GetJwksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetJwks is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetJwtConfig(context.Context, *connect.Request[v1.GetJwtConfigRequest]) (*connect.Response[v1.GetJwtConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.auth.v1.AuthService.GetJwtConfig is not implemented"))
}
