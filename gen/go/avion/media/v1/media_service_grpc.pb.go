// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/media/v1/media_service.proto

package mediav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_CreateUploadSession_FullMethodName = "/avion.media.v1.MediaService/CreateUploadSession"
	MediaService_CompleteUpload_FullMethodName      = "/avion.media.v1.MediaService/CompleteUpload"
	MediaService_CancelUpload_FullMethodName        = "/avion.media.v1.MediaService/CancelUpload"
	MediaService_GetMedia_FullMethodName            = "/avion.media.v1.MediaService/GetMedia"
	MediaService_ListMedia_FullMethodName           = "/avion.media.v1.MediaService/ListMedia"
	MediaService_UpdateMedia_FullMethodName         = "/avion.media.v1.MediaService/UpdateMedia"
	MediaService_DeleteMedia_FullMethodName         = "/avion.media.v1.MediaService/DeleteMedia"
	MediaService_BatchDeleteMedia_FullMethodName    = "/avion.media.v1.MediaService/BatchDeleteMedia"
	MediaService_GenerateThumbnail_FullMethodName   = "/avion.media.v1.MediaService/GenerateThumbnail"
	MediaService_GetThumbnails_FullMethodName       = "/avion.media.v1.MediaService/GetThumbnails"
	MediaService_CreateProcessingJob_FullMethodName = "/avion.media.v1.MediaService/CreateProcessingJob"
	MediaService_GetProcessingJob_FullMethodName    = "/avion.media.v1.MediaService/GetProcessingJob"
	MediaService_ListProcessingJobs_FullMethodName  = "/avion.media.v1.MediaService/ListProcessingJobs"
	MediaService_CancelProcessingJob_FullMethodName = "/avion.media.v1.MediaService/CancelProcessingJob"
	MediaService_GenerateCDNUrl_FullMethodName      = "/avion.media.v1.MediaService/GenerateCDNUrl"
	MediaService_GenerateSignedUrl_FullMethodName   = "/avion.media.v1.MediaService/GenerateSignedUrl"
	MediaService_GetUsageStats_FullMethodName       = "/avion.media.v1.MediaService/GetUsageStats"
	MediaService_GetQuota_FullMethodName            = "/avion.media.v1.MediaService/GetQuota"
	MediaService_UpdateQuota_FullMethodName         = "/avion.media.v1.MediaService/UpdateQuota"
	MediaService_SearchMedia_FullMethodName         = "/avion.media.v1.MediaService/SearchMedia"
	MediaService_DetectDuplicates_FullMethodName    = "/avion.media.v1.MediaService/DetectDuplicates"
	MediaService_UpdateMetadata_FullMethodName      = "/avion.media.v1.MediaService/UpdateMetadata"
	MediaService_AddTags_FullMethodName             = "/avion.media.v1.MediaService/AddTags"
	MediaService_RemoveTags_FullMethodName          = "/avion.media.v1.MediaService/RemoveTags"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// メディアサービス
type MediaServiceClient interface {
	// メディアアップロードセッション開始
	CreateUploadSession(ctx context.Context, in *CreateUploadSessionRequest, opts ...grpc.CallOption) (*CreateUploadSessionResponse, error)
	// メディアアップロード完了
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	// メディアアップロードキャンセル
	CancelUpload(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*CancelUploadResponse, error)
	// メディア取得
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error)
	// メディアリスト取得
	ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (*ListMediaResponse, error)
	// メディア更新
	UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error)
	// メディア削除
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
	// メディアバッチ削除
	BatchDeleteMedia(ctx context.Context, in *BatchDeleteMediaRequest, opts ...grpc.CallOption) (*BatchDeleteMediaResponse, error)
	// サムネイル生成
	GenerateThumbnail(ctx context.Context, in *GenerateThumbnailRequest, opts ...grpc.CallOption) (*GenerateThumbnailResponse, error)
	// サムネイル取得
	GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (*GetThumbnailsResponse, error)
	// メディア処理ジョブ作成
	CreateProcessingJob(ctx context.Context, in *CreateProcessingJobRequest, opts ...grpc.CallOption) (*CreateProcessingJobResponse, error)
	// メディア処理ジョブ状態取得
	GetProcessingJob(ctx context.Context, in *GetProcessingJobRequest, opts ...grpc.CallOption) (*GetProcessingJobResponse, error)
	// メディア処理ジョブリスト取得
	ListProcessingJobs(ctx context.Context, in *ListProcessingJobsRequest, opts ...grpc.CallOption) (*ListProcessingJobsResponse, error)
	// メディア処理ジョブキャンセル
	CancelProcessingJob(ctx context.Context, in *CancelProcessingJobRequest, opts ...grpc.CallOption) (*CancelProcessingJobResponse, error)
	// CDN URL生成
	GenerateCDNUrl(ctx context.Context, in *GenerateCDNUrlRequest, opts ...grpc.CallOption) (*GenerateCDNUrlResponse, error)
	// 署名付きURL生成
	GenerateSignedUrl(ctx context.Context, in *GenerateSignedUrlRequest, opts ...grpc.CallOption) (*GenerateSignedUrlResponse, error)
	// メディア使用統計取得
	GetUsageStats(ctx context.Context, in *GetUsageStatsRequest, opts ...grpc.CallOption) (*GetUsageStatsResponse, error)
	// メディアクォータ取得
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*GetQuotaResponse, error)
	// メディアクォータ更新
	UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error)
	// メディア検索
	SearchMedia(ctx context.Context, in *SearchMediaRequest, opts ...grpc.CallOption) (*SearchMediaResponse, error)
	// 重複メディア検出
	DetectDuplicates(ctx context.Context, in *DetectDuplicatesRequest, opts ...grpc.CallOption) (*DetectDuplicatesResponse, error)
	// メディアメタデータ更新
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error)
	// メディアタグ追加
	AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error)
	// メディアタグ削除
	RemoveTags(ctx context.Context, in *RemoveTagsRequest, opts ...grpc.CallOption) (*RemoveTagsResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) CreateUploadSession(ctx context.Context, in *CreateUploadSessionRequest, opts ...grpc.CallOption) (*CreateUploadSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadSessionResponse)
	err := c.cc.Invoke(ctx, MediaService_CreateUploadSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, MediaService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CancelUpload(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*CancelUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelUploadResponse)
	err := c.cc.Invoke(ctx, MediaService_CancelUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (*ListMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_ListMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_UpdateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) BatchDeleteMedia(ctx context.Context, in *BatchDeleteMediaRequest, opts ...grpc.CallOption) (*BatchDeleteMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_BatchDeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GenerateThumbnail(ctx context.Context, in *GenerateThumbnailRequest, opts ...grpc.CallOption) (*GenerateThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateThumbnailResponse)
	err := c.cc.Invoke(ctx, MediaService_GenerateThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (*GetThumbnailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThumbnailsResponse)
	err := c.cc.Invoke(ctx, MediaService_GetThumbnails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CreateProcessingJob(ctx context.Context, in *CreateProcessingJobRequest, opts ...grpc.CallOption) (*CreateProcessingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProcessingJobResponse)
	err := c.cc.Invoke(ctx, MediaService_CreateProcessingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetProcessingJob(ctx context.Context, in *GetProcessingJobRequest, opts ...grpc.CallOption) (*GetProcessingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessingJobResponse)
	err := c.cc.Invoke(ctx, MediaService_GetProcessingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListProcessingJobs(ctx context.Context, in *ListProcessingJobsRequest, opts ...grpc.CallOption) (*ListProcessingJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcessingJobsResponse)
	err := c.cc.Invoke(ctx, MediaService_ListProcessingJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CancelProcessingJob(ctx context.Context, in *CancelProcessingJobRequest, opts ...grpc.CallOption) (*CancelProcessingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelProcessingJobResponse)
	err := c.cc.Invoke(ctx, MediaService_CancelProcessingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GenerateCDNUrl(ctx context.Context, in *GenerateCDNUrlRequest, opts ...grpc.CallOption) (*GenerateCDNUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCDNUrlResponse)
	err := c.cc.Invoke(ctx, MediaService_GenerateCDNUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GenerateSignedUrl(ctx context.Context, in *GenerateSignedUrlRequest, opts ...grpc.CallOption) (*GenerateSignedUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSignedUrlResponse)
	err := c.cc.Invoke(ctx, MediaService_GenerateSignedUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetUsageStats(ctx context.Context, in *GetUsageStatsRequest, opts ...grpc.CallOption) (*GetUsageStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsageStatsResponse)
	err := c.cc.Invoke(ctx, MediaService_GetUsageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*GetQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuotaResponse)
	err := c.cc.Invoke(ctx, MediaService_GetQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuotaResponse)
	err := c.cc.Invoke(ctx, MediaService_UpdateQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) SearchMedia(ctx context.Context, in *SearchMediaRequest, opts ...grpc.CallOption) (*SearchMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_SearchMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DetectDuplicates(ctx context.Context, in *DetectDuplicatesRequest, opts ...grpc.CallOption) (*DetectDuplicatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectDuplicatesResponse)
	err := c.cc.Invoke(ctx, MediaService_DetectDuplicates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetadataResponse)
	err := c.cc.Invoke(ctx, MediaService_UpdateMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTagsResponse)
	err := c.cc.Invoke(ctx, MediaService_AddTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) RemoveTags(ctx context.Context, in *RemoveTagsRequest, opts ...grpc.CallOption) (*RemoveTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTagsResponse)
	err := c.cc.Invoke(ctx, MediaService_RemoveTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// メディアサービス
type MediaServiceServer interface {
	// メディアアップロードセッション開始
	CreateUploadSession(context.Context, *CreateUploadSessionRequest) (*CreateUploadSessionResponse, error)
	// メディアアップロード完了
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	// メディアアップロードキャンセル
	CancelUpload(context.Context, *CancelUploadRequest) (*CancelUploadResponse, error)
	// メディア取得
	GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error)
	// メディアリスト取得
	ListMedia(context.Context, *ListMediaRequest) (*ListMediaResponse, error)
	// メディア更新
	UpdateMedia(context.Context, *UpdateMediaRequest) (*UpdateMediaResponse, error)
	// メディア削除
	DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	// メディアバッチ削除
	BatchDeleteMedia(context.Context, *BatchDeleteMediaRequest) (*BatchDeleteMediaResponse, error)
	// サムネイル生成
	GenerateThumbnail(context.Context, *GenerateThumbnailRequest) (*GenerateThumbnailResponse, error)
	// サムネイル取得
	GetThumbnails(context.Context, *GetThumbnailsRequest) (*GetThumbnailsResponse, error)
	// メディア処理ジョブ作成
	CreateProcessingJob(context.Context, *CreateProcessingJobRequest) (*CreateProcessingJobResponse, error)
	// メディア処理ジョブ状態取得
	GetProcessingJob(context.Context, *GetProcessingJobRequest) (*GetProcessingJobResponse, error)
	// メディア処理ジョブリスト取得
	ListProcessingJobs(context.Context, *ListProcessingJobsRequest) (*ListProcessingJobsResponse, error)
	// メディア処理ジョブキャンセル
	CancelProcessingJob(context.Context, *CancelProcessingJobRequest) (*CancelProcessingJobResponse, error)
	// CDN URL生成
	GenerateCDNUrl(context.Context, *GenerateCDNUrlRequest) (*GenerateCDNUrlResponse, error)
	// 署名付きURL生成
	GenerateSignedUrl(context.Context, *GenerateSignedUrlRequest) (*GenerateSignedUrlResponse, error)
	// メディア使用統計取得
	GetUsageStats(context.Context, *GetUsageStatsRequest) (*GetUsageStatsResponse, error)
	// メディアクォータ取得
	GetQuota(context.Context, *GetQuotaRequest) (*GetQuotaResponse, error)
	// メディアクォータ更新
	UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error)
	// メディア検索
	SearchMedia(context.Context, *SearchMediaRequest) (*SearchMediaResponse, error)
	// 重複メディア検出
	DetectDuplicates(context.Context, *DetectDuplicatesRequest) (*DetectDuplicatesResponse, error)
	// メディアメタデータ更新
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error)
	// メディアタグ追加
	AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error)
	// メディアタグ削除
	RemoveTags(context.Context, *RemoveTagsRequest) (*RemoveTagsResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) CreateUploadSession(context.Context, *CreateUploadSessionRequest) (*CreateUploadSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadSession not implemented")
}
func (UnimplementedMediaServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedMediaServiceServer) CancelUpload(context.Context, *CancelUploadRequest) (*CancelUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUpload not implemented")
}
func (UnimplementedMediaServiceServer) GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaServiceServer) ListMedia(context.Context, *ListMediaRequest) (*ListMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedia not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMedia(context.Context, *UpdateMediaRequest) (*UpdateMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedia not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) BatchDeleteMedia(context.Context, *BatchDeleteMediaRequest) (*BatchDeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) GenerateThumbnail(context.Context, *GenerateThumbnailRequest) (*GenerateThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateThumbnail not implemented")
}
func (UnimplementedMediaServiceServer) GetThumbnails(context.Context, *GetThumbnailsRequest) (*GetThumbnailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbnails not implemented")
}
func (UnimplementedMediaServiceServer) CreateProcessingJob(context.Context, *CreateProcessingJobRequest) (*CreateProcessingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcessingJob not implemented")
}
func (UnimplementedMediaServiceServer) GetProcessingJob(context.Context, *GetProcessingJobRequest) (*GetProcessingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessingJob not implemented")
}
func (UnimplementedMediaServiceServer) ListProcessingJobs(context.Context, *ListProcessingJobsRequest) (*ListProcessingJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessingJobs not implemented")
}
func (UnimplementedMediaServiceServer) CancelProcessingJob(context.Context, *CancelProcessingJobRequest) (*CancelProcessingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelProcessingJob not implemented")
}
func (UnimplementedMediaServiceServer) GenerateCDNUrl(context.Context, *GenerateCDNUrlRequest) (*GenerateCDNUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCDNUrl not implemented")
}
func (UnimplementedMediaServiceServer) GenerateSignedUrl(context.Context, *GenerateSignedUrlRequest) (*GenerateSignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSignedUrl not implemented")
}
func (UnimplementedMediaServiceServer) GetUsageStats(context.Context, *GetUsageStatsRequest) (*GetUsageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageStats not implemented")
}
func (UnimplementedMediaServiceServer) GetQuota(context.Context, *GetQuotaRequest) (*GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (UnimplementedMediaServiceServer) UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuota not implemented")
}
func (UnimplementedMediaServiceServer) SearchMedia(context.Context, *SearchMediaRequest) (*SearchMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedia not implemented")
}
func (UnimplementedMediaServiceServer) DetectDuplicates(context.Context, *DetectDuplicatesRequest) (*DetectDuplicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectDuplicates not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedMediaServiceServer) AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedMediaServiceServer) RemoveTags(context.Context, *RemoveTagsRequest) (*RemoveTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTags not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_CreateUploadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CreateUploadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CreateUploadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CreateUploadSession(ctx, req.(*CreateUploadSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CancelUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CancelUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CancelUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CancelUpload(ctx, req.(*CancelUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListMedia(ctx, req.(*ListMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMedia(ctx, req.(*UpdateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_BatchDeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).BatchDeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_BatchDeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).BatchDeleteMedia(ctx, req.(*BatchDeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GenerateThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GenerateThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GenerateThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GenerateThumbnail(ctx, req.(*GenerateThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetThumbnails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThumbnailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetThumbnails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetThumbnails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetThumbnails(ctx, req.(*GetThumbnailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CreateProcessingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CreateProcessingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CreateProcessingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CreateProcessingJob(ctx, req.(*CreateProcessingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetProcessingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetProcessingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetProcessingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetProcessingJob(ctx, req.(*GetProcessingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListProcessingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListProcessingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListProcessingJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListProcessingJobs(ctx, req.(*ListProcessingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CancelProcessingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProcessingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CancelProcessingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CancelProcessingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CancelProcessingJob(ctx, req.(*CancelProcessingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GenerateCDNUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCDNUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GenerateCDNUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GenerateCDNUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GenerateCDNUrl(ctx, req.(*GenerateCDNUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GenerateSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GenerateSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GenerateSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GenerateSignedUrl(ctx, req.(*GenerateSignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetUsageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetUsageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetUsageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetUsageStats(ctx, req.(*GetUsageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetQuota(ctx, req.(*GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateQuota(ctx, req.(*UpdateQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_SearchMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).SearchMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_SearchMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).SearchMedia(ctx, req.(*SearchMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DetectDuplicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectDuplicatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DetectDuplicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DetectDuplicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DetectDuplicates(ctx, req.(*DetectDuplicatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).AddTags(ctx, req.(*AddTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_RemoveTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).RemoveTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_RemoveTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).RemoveTags(ctx, req.(*RemoveTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.media.v1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUploadSession",
			Handler:    _MediaService_CreateUploadSession_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _MediaService_CompleteUpload_Handler,
		},
		{
			MethodName: "CancelUpload",
			Handler:    _MediaService_CancelUpload_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _MediaService_GetMedia_Handler,
		},
		{
			MethodName: "ListMedia",
			Handler:    _MediaService_ListMedia_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _MediaService_UpdateMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _MediaService_DeleteMedia_Handler,
		},
		{
			MethodName: "BatchDeleteMedia",
			Handler:    _MediaService_BatchDeleteMedia_Handler,
		},
		{
			MethodName: "GenerateThumbnail",
			Handler:    _MediaService_GenerateThumbnail_Handler,
		},
		{
			MethodName: "GetThumbnails",
			Handler:    _MediaService_GetThumbnails_Handler,
		},
		{
			MethodName: "CreateProcessingJob",
			Handler:    _MediaService_CreateProcessingJob_Handler,
		},
		{
			MethodName: "GetProcessingJob",
			Handler:    _MediaService_GetProcessingJob_Handler,
		},
		{
			MethodName: "ListProcessingJobs",
			Handler:    _MediaService_ListProcessingJobs_Handler,
		},
		{
			MethodName: "CancelProcessingJob",
			Handler:    _MediaService_CancelProcessingJob_Handler,
		},
		{
			MethodName: "GenerateCDNUrl",
			Handler:    _MediaService_GenerateCDNUrl_Handler,
		},
		{
			MethodName: "GenerateSignedUrl",
			Handler:    _MediaService_GenerateSignedUrl_Handler,
		},
		{
			MethodName: "GetUsageStats",
			Handler:    _MediaService_GetUsageStats_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _MediaService_GetQuota_Handler,
		},
		{
			MethodName: "UpdateQuota",
			Handler:    _MediaService_UpdateQuota_Handler,
		},
		{
			MethodName: "SearchMedia",
			Handler:    _MediaService_SearchMedia_Handler,
		},
		{
			MethodName: "DetectDuplicates",
			Handler:    _MediaService_DetectDuplicates_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _MediaService_UpdateMetadata_Handler,
		},
		{
			MethodName: "AddTags",
			Handler:    _MediaService_AddTags_Handler,
		},
		{
			MethodName: "RemoveTags",
			Handler:    _MediaService_RemoveTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/media/v1/media_service.proto",
}
