// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/media/v1/media_service.proto

package mediav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/media/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MediaServiceName is the fully-qualified name of the MediaService service.
	MediaServiceName = "avion.media.v1.MediaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MediaServiceCreateUploadSessionProcedure is the fully-qualified name of the MediaService's
	// CreateUploadSession RPC.
	MediaServiceCreateUploadSessionProcedure = "/avion.media.v1.MediaService/CreateUploadSession"
	// MediaServiceCompleteUploadProcedure is the fully-qualified name of the MediaService's
	// CompleteUpload RPC.
	MediaServiceCompleteUploadProcedure = "/avion.media.v1.MediaService/CompleteUpload"
	// MediaServiceCancelUploadProcedure is the fully-qualified name of the MediaService's CancelUpload
	// RPC.
	MediaServiceCancelUploadProcedure = "/avion.media.v1.MediaService/CancelUpload"
	// MediaServiceGetMediaProcedure is the fully-qualified name of the MediaService's GetMedia RPC.
	MediaServiceGetMediaProcedure = "/avion.media.v1.MediaService/GetMedia"
	// MediaServiceListMediaProcedure is the fully-qualified name of the MediaService's ListMedia RPC.
	MediaServiceListMediaProcedure = "/avion.media.v1.MediaService/ListMedia"
	// MediaServiceUpdateMediaProcedure is the fully-qualified name of the MediaService's UpdateMedia
	// RPC.
	MediaServiceUpdateMediaProcedure = "/avion.media.v1.MediaService/UpdateMedia"
	// MediaServiceDeleteMediaProcedure is the fully-qualified name of the MediaService's DeleteMedia
	// RPC.
	MediaServiceDeleteMediaProcedure = "/avion.media.v1.MediaService/DeleteMedia"
	// MediaServiceBatchDeleteMediaProcedure is the fully-qualified name of the MediaService's
	// BatchDeleteMedia RPC.
	MediaServiceBatchDeleteMediaProcedure = "/avion.media.v1.MediaService/BatchDeleteMedia"
	// MediaServiceGenerateThumbnailProcedure is the fully-qualified name of the MediaService's
	// GenerateThumbnail RPC.
	MediaServiceGenerateThumbnailProcedure = "/avion.media.v1.MediaService/GenerateThumbnail"
	// MediaServiceGetThumbnailsProcedure is the fully-qualified name of the MediaService's
	// GetThumbnails RPC.
	MediaServiceGetThumbnailsProcedure = "/avion.media.v1.MediaService/GetThumbnails"
	// MediaServiceCreateProcessingJobProcedure is the fully-qualified name of the MediaService's
	// CreateProcessingJob RPC.
	MediaServiceCreateProcessingJobProcedure = "/avion.media.v1.MediaService/CreateProcessingJob"
	// MediaServiceGetProcessingJobProcedure is the fully-qualified name of the MediaService's
	// GetProcessingJob RPC.
	MediaServiceGetProcessingJobProcedure = "/avion.media.v1.MediaService/GetProcessingJob"
	// MediaServiceListProcessingJobsProcedure is the fully-qualified name of the MediaService's
	// ListProcessingJobs RPC.
	MediaServiceListProcessingJobsProcedure = "/avion.media.v1.MediaService/ListProcessingJobs"
	// MediaServiceCancelProcessingJobProcedure is the fully-qualified name of the MediaService's
	// CancelProcessingJob RPC.
	MediaServiceCancelProcessingJobProcedure = "/avion.media.v1.MediaService/CancelProcessingJob"
	// MediaServiceGenerateCDNUrlProcedure is the fully-qualified name of the MediaService's
	// GenerateCDNUrl RPC.
	MediaServiceGenerateCDNUrlProcedure = "/avion.media.v1.MediaService/GenerateCDNUrl"
	// MediaServiceGenerateSignedUrlProcedure is the fully-qualified name of the MediaService's
	// GenerateSignedUrl RPC.
	MediaServiceGenerateSignedUrlProcedure = "/avion.media.v1.MediaService/GenerateSignedUrl"
	// MediaServiceGetUsageStatsProcedure is the fully-qualified name of the MediaService's
	// GetUsageStats RPC.
	MediaServiceGetUsageStatsProcedure = "/avion.media.v1.MediaService/GetUsageStats"
	// MediaServiceGetQuotaProcedure is the fully-qualified name of the MediaService's GetQuota RPC.
	MediaServiceGetQuotaProcedure = "/avion.media.v1.MediaService/GetQuota"
	// MediaServiceUpdateQuotaProcedure is the fully-qualified name of the MediaService's UpdateQuota
	// RPC.
	MediaServiceUpdateQuotaProcedure = "/avion.media.v1.MediaService/UpdateQuota"
	// MediaServiceSearchMediaProcedure is the fully-qualified name of the MediaService's SearchMedia
	// RPC.
	MediaServiceSearchMediaProcedure = "/avion.media.v1.MediaService/SearchMedia"
	// MediaServiceDetectDuplicatesProcedure is the fully-qualified name of the MediaService's
	// DetectDuplicates RPC.
	MediaServiceDetectDuplicatesProcedure = "/avion.media.v1.MediaService/DetectDuplicates"
	// MediaServiceUpdateMetadataProcedure is the fully-qualified name of the MediaService's
	// UpdateMetadata RPC.
	MediaServiceUpdateMetadataProcedure = "/avion.media.v1.MediaService/UpdateMetadata"
	// MediaServiceAddTagsProcedure is the fully-qualified name of the MediaService's AddTags RPC.
	MediaServiceAddTagsProcedure = "/avion.media.v1.MediaService/AddTags"
	// MediaServiceRemoveTagsProcedure is the fully-qualified name of the MediaService's RemoveTags RPC.
	MediaServiceRemoveTagsProcedure = "/avion.media.v1.MediaService/RemoveTags"
)

// MediaServiceClient is a client for the avion.media.v1.MediaService service.
type MediaServiceClient interface {
	// メディアアップロードセッション開始
	CreateUploadSession(context.Context, *connect.Request[v1.CreateUploadSessionRequest]) (*connect.Response[v1.CreateUploadSessionResponse], error)
	// メディアアップロード完了
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
	// メディアアップロードキャンセル
	CancelUpload(context.Context, *connect.Request[v1.CancelUploadRequest]) (*connect.Response[v1.CancelUploadResponse], error)
	// メディア取得
	GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error)
	// メディアリスト取得
	ListMedia(context.Context, *connect.Request[v1.ListMediaRequest]) (*connect.Response[v1.ListMediaResponse], error)
	// メディア更新
	UpdateMedia(context.Context, *connect.Request[v1.UpdateMediaRequest]) (*connect.Response[v1.UpdateMediaResponse], error)
	// メディア削除
	DeleteMedia(context.Context, *connect.Request[v1.DeleteMediaRequest]) (*connect.Response[v1.DeleteMediaResponse], error)
	// メディアバッチ削除
	BatchDeleteMedia(context.Context, *connect.Request[v1.BatchDeleteMediaRequest]) (*connect.Response[v1.BatchDeleteMediaResponse], error)
	// サムネイル生成
	GenerateThumbnail(context.Context, *connect.Request[v1.GenerateThumbnailRequest]) (*connect.Response[v1.GenerateThumbnailResponse], error)
	// サムネイル取得
	GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error)
	// メディア処理ジョブ作成
	CreateProcessingJob(context.Context, *connect.Request[v1.CreateProcessingJobRequest]) (*connect.Response[v1.CreateProcessingJobResponse], error)
	// メディア処理ジョブ状態取得
	GetProcessingJob(context.Context, *connect.Request[v1.GetProcessingJobRequest]) (*connect.Response[v1.GetProcessingJobResponse], error)
	// メディア処理ジョブリスト取得
	ListProcessingJobs(context.Context, *connect.Request[v1.ListProcessingJobsRequest]) (*connect.Response[v1.ListProcessingJobsResponse], error)
	// メディア処理ジョブキャンセル
	CancelProcessingJob(context.Context, *connect.Request[v1.CancelProcessingJobRequest]) (*connect.Response[v1.CancelProcessingJobResponse], error)
	// CDN URL生成
	GenerateCDNUrl(context.Context, *connect.Request[v1.GenerateCDNUrlRequest]) (*connect.Response[v1.GenerateCDNUrlResponse], error)
	// 署名付きURL生成
	GenerateSignedUrl(context.Context, *connect.Request[v1.GenerateSignedUrlRequest]) (*connect.Response[v1.GenerateSignedUrlResponse], error)
	// メディア使用統計取得
	GetUsageStats(context.Context, *connect.Request[v1.GetUsageStatsRequest]) (*connect.Response[v1.GetUsageStatsResponse], error)
	// メディアクォータ取得
	GetQuota(context.Context, *connect.Request[v1.GetQuotaRequest]) (*connect.Response[v1.GetQuotaResponse], error)
	// メディアクォータ更新
	UpdateQuota(context.Context, *connect.Request[v1.UpdateQuotaRequest]) (*connect.Response[v1.UpdateQuotaResponse], error)
	// メディア検索
	SearchMedia(context.Context, *connect.Request[v1.SearchMediaRequest]) (*connect.Response[v1.SearchMediaResponse], error)
	// 重複メディア検出
	DetectDuplicates(context.Context, *connect.Request[v1.DetectDuplicatesRequest]) (*connect.Response[v1.DetectDuplicatesResponse], error)
	// メディアメタデータ更新
	UpdateMetadata(context.Context, *connect.Request[v1.UpdateMetadataRequest]) (*connect.Response[v1.UpdateMetadataResponse], error)
	// メディアタグ追加
	AddTags(context.Context, *connect.Request[v1.AddTagsRequest]) (*connect.Response[v1.AddTagsResponse], error)
	// メディアタグ削除
	RemoveTags(context.Context, *connect.Request[v1.RemoveTagsRequest]) (*connect.Response[v1.RemoveTagsResponse], error)
}

// NewMediaServiceClient constructs a client for the avion.media.v1.MediaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMediaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MediaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mediaServiceMethods := v1.File_avion_media_v1_media_service_proto.Services().ByName("MediaService").Methods()
	return &mediaServiceClient{
		createUploadSession: connect.NewClient[v1.CreateUploadSessionRequest, v1.CreateUploadSessionResponse](
			httpClient,
			baseURL+MediaServiceCreateUploadSessionProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("CreateUploadSession")),
			connect.WithClientOptions(opts...),
		),
		completeUpload: connect.NewClient[v1.CompleteUploadRequest, v1.CompleteUploadResponse](
			httpClient,
			baseURL+MediaServiceCompleteUploadProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("CompleteUpload")),
			connect.WithClientOptions(opts...),
		),
		cancelUpload: connect.NewClient[v1.CancelUploadRequest, v1.CancelUploadResponse](
			httpClient,
			baseURL+MediaServiceCancelUploadProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("CancelUpload")),
			connect.WithClientOptions(opts...),
		),
		getMedia: connect.NewClient[v1.GetMediaRequest, v1.GetMediaResponse](
			httpClient,
			baseURL+MediaServiceGetMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetMedia")),
			connect.WithClientOptions(opts...),
		),
		listMedia: connect.NewClient[v1.ListMediaRequest, v1.ListMediaResponse](
			httpClient,
			baseURL+MediaServiceListMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("ListMedia")),
			connect.WithClientOptions(opts...),
		),
		updateMedia: connect.NewClient[v1.UpdateMediaRequest, v1.UpdateMediaResponse](
			httpClient,
			baseURL+MediaServiceUpdateMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("UpdateMedia")),
			connect.WithClientOptions(opts...),
		),
		deleteMedia: connect.NewClient[v1.DeleteMediaRequest, v1.DeleteMediaResponse](
			httpClient,
			baseURL+MediaServiceDeleteMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("DeleteMedia")),
			connect.WithClientOptions(opts...),
		),
		batchDeleteMedia: connect.NewClient[v1.BatchDeleteMediaRequest, v1.BatchDeleteMediaResponse](
			httpClient,
			baseURL+MediaServiceBatchDeleteMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("BatchDeleteMedia")),
			connect.WithClientOptions(opts...),
		),
		generateThumbnail: connect.NewClient[v1.GenerateThumbnailRequest, v1.GenerateThumbnailResponse](
			httpClient,
			baseURL+MediaServiceGenerateThumbnailProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GenerateThumbnail")),
			connect.WithClientOptions(opts...),
		),
		getThumbnails: connect.NewClient[v1.GetThumbnailsRequest, v1.GetThumbnailsResponse](
			httpClient,
			baseURL+MediaServiceGetThumbnailsProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetThumbnails")),
			connect.WithClientOptions(opts...),
		),
		createProcessingJob: connect.NewClient[v1.CreateProcessingJobRequest, v1.CreateProcessingJobResponse](
			httpClient,
			baseURL+MediaServiceCreateProcessingJobProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("CreateProcessingJob")),
			connect.WithClientOptions(opts...),
		),
		getProcessingJob: connect.NewClient[v1.GetProcessingJobRequest, v1.GetProcessingJobResponse](
			httpClient,
			baseURL+MediaServiceGetProcessingJobProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetProcessingJob")),
			connect.WithClientOptions(opts...),
		),
		listProcessingJobs: connect.NewClient[v1.ListProcessingJobsRequest, v1.ListProcessingJobsResponse](
			httpClient,
			baseURL+MediaServiceListProcessingJobsProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("ListProcessingJobs")),
			connect.WithClientOptions(opts...),
		),
		cancelProcessingJob: connect.NewClient[v1.CancelProcessingJobRequest, v1.CancelProcessingJobResponse](
			httpClient,
			baseURL+MediaServiceCancelProcessingJobProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("CancelProcessingJob")),
			connect.WithClientOptions(opts...),
		),
		generateCDNUrl: connect.NewClient[v1.GenerateCDNUrlRequest, v1.GenerateCDNUrlResponse](
			httpClient,
			baseURL+MediaServiceGenerateCDNUrlProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GenerateCDNUrl")),
			connect.WithClientOptions(opts...),
		),
		generateSignedUrl: connect.NewClient[v1.GenerateSignedUrlRequest, v1.GenerateSignedUrlResponse](
			httpClient,
			baseURL+MediaServiceGenerateSignedUrlProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GenerateSignedUrl")),
			connect.WithClientOptions(opts...),
		),
		getUsageStats: connect.NewClient[v1.GetUsageStatsRequest, v1.GetUsageStatsResponse](
			httpClient,
			baseURL+MediaServiceGetUsageStatsProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetUsageStats")),
			connect.WithClientOptions(opts...),
		),
		getQuota: connect.NewClient[v1.GetQuotaRequest, v1.GetQuotaResponse](
			httpClient,
			baseURL+MediaServiceGetQuotaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetQuota")),
			connect.WithClientOptions(opts...),
		),
		updateQuota: connect.NewClient[v1.UpdateQuotaRequest, v1.UpdateQuotaResponse](
			httpClient,
			baseURL+MediaServiceUpdateQuotaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("UpdateQuota")),
			connect.WithClientOptions(opts...),
		),
		searchMedia: connect.NewClient[v1.SearchMediaRequest, v1.SearchMediaResponse](
			httpClient,
			baseURL+MediaServiceSearchMediaProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("SearchMedia")),
			connect.WithClientOptions(opts...),
		),
		detectDuplicates: connect.NewClient[v1.DetectDuplicatesRequest, v1.DetectDuplicatesResponse](
			httpClient,
			baseURL+MediaServiceDetectDuplicatesProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("DetectDuplicates")),
			connect.WithClientOptions(opts...),
		),
		updateMetadata: connect.NewClient[v1.UpdateMetadataRequest, v1.UpdateMetadataResponse](
			httpClient,
			baseURL+MediaServiceUpdateMetadataProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("UpdateMetadata")),
			connect.WithClientOptions(opts...),
		),
		addTags: connect.NewClient[v1.AddTagsRequest, v1.AddTagsResponse](
			httpClient,
			baseURL+MediaServiceAddTagsProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("AddTags")),
			connect.WithClientOptions(opts...),
		),
		removeTags: connect.NewClient[v1.RemoveTagsRequest, v1.RemoveTagsResponse](
			httpClient,
			baseURL+MediaServiceRemoveTagsProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("RemoveTags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mediaServiceClient implements MediaServiceClient.
type mediaServiceClient struct {
	createUploadSession *connect.Client[v1.CreateUploadSessionRequest, v1.CreateUploadSessionResponse]
	completeUpload      *connect.Client[v1.CompleteUploadRequest, v1.CompleteUploadResponse]
	cancelUpload        *connect.Client[v1.CancelUploadRequest, v1.CancelUploadResponse]
	getMedia            *connect.Client[v1.GetMediaRequest, v1.GetMediaResponse]
	listMedia           *connect.Client[v1.ListMediaRequest, v1.ListMediaResponse]
	updateMedia         *connect.Client[v1.UpdateMediaRequest, v1.UpdateMediaResponse]
	deleteMedia         *connect.Client[v1.DeleteMediaRequest, v1.DeleteMediaResponse]
	batchDeleteMedia    *connect.Client[v1.BatchDeleteMediaRequest, v1.BatchDeleteMediaResponse]
	generateThumbnail   *connect.Client[v1.GenerateThumbnailRequest, v1.GenerateThumbnailResponse]
	getThumbnails       *connect.Client[v1.GetThumbnailsRequest, v1.GetThumbnailsResponse]
	createProcessingJob *connect.Client[v1.CreateProcessingJobRequest, v1.CreateProcessingJobResponse]
	getProcessingJob    *connect.Client[v1.GetProcessingJobRequest, v1.GetProcessingJobResponse]
	listProcessingJobs  *connect.Client[v1.ListProcessingJobsRequest, v1.ListProcessingJobsResponse]
	cancelProcessingJob *connect.Client[v1.CancelProcessingJobRequest, v1.CancelProcessingJobResponse]
	generateCDNUrl      *connect.Client[v1.GenerateCDNUrlRequest, v1.GenerateCDNUrlResponse]
	generateSignedUrl   *connect.Client[v1.GenerateSignedUrlRequest, v1.GenerateSignedUrlResponse]
	getUsageStats       *connect.Client[v1.GetUsageStatsRequest, v1.GetUsageStatsResponse]
	getQuota            *connect.Client[v1.GetQuotaRequest, v1.GetQuotaResponse]
	updateQuota         *connect.Client[v1.UpdateQuotaRequest, v1.UpdateQuotaResponse]
	searchMedia         *connect.Client[v1.SearchMediaRequest, v1.SearchMediaResponse]
	detectDuplicates    *connect.Client[v1.DetectDuplicatesRequest, v1.DetectDuplicatesResponse]
	updateMetadata      *connect.Client[v1.UpdateMetadataRequest, v1.UpdateMetadataResponse]
	addTags             *connect.Client[v1.AddTagsRequest, v1.AddTagsResponse]
	removeTags          *connect.Client[v1.RemoveTagsRequest, v1.RemoveTagsResponse]
}

// CreateUploadSession calls avion.media.v1.MediaService.CreateUploadSession.
func (c *mediaServiceClient) CreateUploadSession(ctx context.Context, req *connect.Request[v1.CreateUploadSessionRequest]) (*connect.Response[v1.CreateUploadSessionResponse], error) {
	return c.createUploadSession.CallUnary(ctx, req)
}

// CompleteUpload calls avion.media.v1.MediaService.CompleteUpload.
func (c *mediaServiceClient) CompleteUpload(ctx context.Context, req *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return c.completeUpload.CallUnary(ctx, req)
}

// CancelUpload calls avion.media.v1.MediaService.CancelUpload.
func (c *mediaServiceClient) CancelUpload(ctx context.Context, req *connect.Request[v1.CancelUploadRequest]) (*connect.Response[v1.CancelUploadResponse], error) {
	return c.cancelUpload.CallUnary(ctx, req)
}

// GetMedia calls avion.media.v1.MediaService.GetMedia.
func (c *mediaServiceClient) GetMedia(ctx context.Context, req *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error) {
	return c.getMedia.CallUnary(ctx, req)
}

// ListMedia calls avion.media.v1.MediaService.ListMedia.
func (c *mediaServiceClient) ListMedia(ctx context.Context, req *connect.Request[v1.ListMediaRequest]) (*connect.Response[v1.ListMediaResponse], error) {
	return c.listMedia.CallUnary(ctx, req)
}

// UpdateMedia calls avion.media.v1.MediaService.UpdateMedia.
func (c *mediaServiceClient) UpdateMedia(ctx context.Context, req *connect.Request[v1.UpdateMediaRequest]) (*connect.Response[v1.UpdateMediaResponse], error) {
	return c.updateMedia.CallUnary(ctx, req)
}

// DeleteMedia calls avion.media.v1.MediaService.DeleteMedia.
func (c *mediaServiceClient) DeleteMedia(ctx context.Context, req *connect.Request[v1.DeleteMediaRequest]) (*connect.Response[v1.DeleteMediaResponse], error) {
	return c.deleteMedia.CallUnary(ctx, req)
}

// BatchDeleteMedia calls avion.media.v1.MediaService.BatchDeleteMedia.
func (c *mediaServiceClient) BatchDeleteMedia(ctx context.Context, req *connect.Request[v1.BatchDeleteMediaRequest]) (*connect.Response[v1.BatchDeleteMediaResponse], error) {
	return c.batchDeleteMedia.CallUnary(ctx, req)
}

// GenerateThumbnail calls avion.media.v1.MediaService.GenerateThumbnail.
func (c *mediaServiceClient) GenerateThumbnail(ctx context.Context, req *connect.Request[v1.GenerateThumbnailRequest]) (*connect.Response[v1.GenerateThumbnailResponse], error) {
	return c.generateThumbnail.CallUnary(ctx, req)
}

// GetThumbnails calls avion.media.v1.MediaService.GetThumbnails.
func (c *mediaServiceClient) GetThumbnails(ctx context.Context, req *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error) {
	return c.getThumbnails.CallUnary(ctx, req)
}

// CreateProcessingJob calls avion.media.v1.MediaService.CreateProcessingJob.
func (c *mediaServiceClient) CreateProcessingJob(ctx context.Context, req *connect.Request[v1.CreateProcessingJobRequest]) (*connect.Response[v1.CreateProcessingJobResponse], error) {
	return c.createProcessingJob.CallUnary(ctx, req)
}

// GetProcessingJob calls avion.media.v1.MediaService.GetProcessingJob.
func (c *mediaServiceClient) GetProcessingJob(ctx context.Context, req *connect.Request[v1.GetProcessingJobRequest]) (*connect.Response[v1.GetProcessingJobResponse], error) {
	return c.getProcessingJob.CallUnary(ctx, req)
}

// ListProcessingJobs calls avion.media.v1.MediaService.ListProcessingJobs.
func (c *mediaServiceClient) ListProcessingJobs(ctx context.Context, req *connect.Request[v1.ListProcessingJobsRequest]) (*connect.Response[v1.ListProcessingJobsResponse], error) {
	return c.listProcessingJobs.CallUnary(ctx, req)
}

// CancelProcessingJob calls avion.media.v1.MediaService.CancelProcessingJob.
func (c *mediaServiceClient) CancelProcessingJob(ctx context.Context, req *connect.Request[v1.CancelProcessingJobRequest]) (*connect.Response[v1.CancelProcessingJobResponse], error) {
	return c.cancelProcessingJob.CallUnary(ctx, req)
}

// GenerateCDNUrl calls avion.media.v1.MediaService.GenerateCDNUrl.
func (c *mediaServiceClient) GenerateCDNUrl(ctx context.Context, req *connect.Request[v1.GenerateCDNUrlRequest]) (*connect.Response[v1.GenerateCDNUrlResponse], error) {
	return c.generateCDNUrl.CallUnary(ctx, req)
}

// GenerateSignedUrl calls avion.media.v1.MediaService.GenerateSignedUrl.
func (c *mediaServiceClient) GenerateSignedUrl(ctx context.Context, req *connect.Request[v1.GenerateSignedUrlRequest]) (*connect.Response[v1.GenerateSignedUrlResponse], error) {
	return c.generateSignedUrl.CallUnary(ctx, req)
}

// GetUsageStats calls avion.media.v1.MediaService.GetUsageStats.
func (c *mediaServiceClient) GetUsageStats(ctx context.Context, req *connect.Request[v1.GetUsageStatsRequest]) (*connect.Response[v1.GetUsageStatsResponse], error) {
	return c.getUsageStats.CallUnary(ctx, req)
}

// GetQuota calls avion.media.v1.MediaService.GetQuota.
func (c *mediaServiceClient) GetQuota(ctx context.Context, req *connect.Request[v1.GetQuotaRequest]) (*connect.Response[v1.GetQuotaResponse], error) {
	return c.getQuota.CallUnary(ctx, req)
}

// UpdateQuota calls avion.media.v1.MediaService.UpdateQuota.
func (c *mediaServiceClient) UpdateQuota(ctx context.Context, req *connect.Request[v1.UpdateQuotaRequest]) (*connect.Response[v1.UpdateQuotaResponse], error) {
	return c.updateQuota.CallUnary(ctx, req)
}

// SearchMedia calls avion.media.v1.MediaService.SearchMedia.
func (c *mediaServiceClient) SearchMedia(ctx context.Context, req *connect.Request[v1.SearchMediaRequest]) (*connect.Response[v1.SearchMediaResponse], error) {
	return c.searchMedia.CallUnary(ctx, req)
}

// DetectDuplicates calls avion.media.v1.MediaService.DetectDuplicates.
func (c *mediaServiceClient) DetectDuplicates(ctx context.Context, req *connect.Request[v1.DetectDuplicatesRequest]) (*connect.Response[v1.DetectDuplicatesResponse], error) {
	return c.detectDuplicates.CallUnary(ctx, req)
}

// UpdateMetadata calls avion.media.v1.MediaService.UpdateMetadata.
func (c *mediaServiceClient) UpdateMetadata(ctx context.Context, req *connect.Request[v1.UpdateMetadataRequest]) (*connect.Response[v1.UpdateMetadataResponse], error) {
	return c.updateMetadata.CallUnary(ctx, req)
}

// AddTags calls avion.media.v1.MediaService.AddTags.
func (c *mediaServiceClient) AddTags(ctx context.Context, req *connect.Request[v1.AddTagsRequest]) (*connect.Response[v1.AddTagsResponse], error) {
	return c.addTags.CallUnary(ctx, req)
}

// RemoveTags calls avion.media.v1.MediaService.RemoveTags.
func (c *mediaServiceClient) RemoveTags(ctx context.Context, req *connect.Request[v1.RemoveTagsRequest]) (*connect.Response[v1.RemoveTagsResponse], error) {
	return c.removeTags.CallUnary(ctx, req)
}

// MediaServiceHandler is an implementation of the avion.media.v1.MediaService service.
type MediaServiceHandler interface {
	// メディアアップロードセッション開始
	CreateUploadSession(context.Context, *connect.Request[v1.CreateUploadSessionRequest]) (*connect.Response[v1.CreateUploadSessionResponse], error)
	// メディアアップロード完了
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
	// メディアアップロードキャンセル
	CancelUpload(context.Context, *connect.Request[v1.CancelUploadRequest]) (*connect.Response[v1.CancelUploadResponse], error)
	// メディア取得
	GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error)
	// メディアリスト取得
	ListMedia(context.Context, *connect.Request[v1.ListMediaRequest]) (*connect.Response[v1.ListMediaResponse], error)
	// メディア更新
	UpdateMedia(context.Context, *connect.Request[v1.UpdateMediaRequest]) (*connect.Response[v1.UpdateMediaResponse], error)
	// メディア削除
	DeleteMedia(context.Context, *connect.Request[v1.DeleteMediaRequest]) (*connect.Response[v1.DeleteMediaResponse], error)
	// メディアバッチ削除
	BatchDeleteMedia(context.Context, *connect.Request[v1.BatchDeleteMediaRequest]) (*connect.Response[v1.BatchDeleteMediaResponse], error)
	// サムネイル生成
	GenerateThumbnail(context.Context, *connect.Request[v1.GenerateThumbnailRequest]) (*connect.Response[v1.GenerateThumbnailResponse], error)
	// サムネイル取得
	GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error)
	// メディア処理ジョブ作成
	CreateProcessingJob(context.Context, *connect.Request[v1.CreateProcessingJobRequest]) (*connect.Response[v1.CreateProcessingJobResponse], error)
	// メディア処理ジョブ状態取得
	GetProcessingJob(context.Context, *connect.Request[v1.GetProcessingJobRequest]) (*connect.Response[v1.GetProcessingJobResponse], error)
	// メディア処理ジョブリスト取得
	ListProcessingJobs(context.Context, *connect.Request[v1.ListProcessingJobsRequest]) (*connect.Response[v1.ListProcessingJobsResponse], error)
	// メディア処理ジョブキャンセル
	CancelProcessingJob(context.Context, *connect.Request[v1.CancelProcessingJobRequest]) (*connect.Response[v1.CancelProcessingJobResponse], error)
	// CDN URL生成
	GenerateCDNUrl(context.Context, *connect.Request[v1.GenerateCDNUrlRequest]) (*connect.Response[v1.GenerateCDNUrlResponse], error)
	// 署名付きURL生成
	GenerateSignedUrl(context.Context, *connect.Request[v1.GenerateSignedUrlRequest]) (*connect.Response[v1.GenerateSignedUrlResponse], error)
	// メディア使用統計取得
	GetUsageStats(context.Context, *connect.Request[v1.GetUsageStatsRequest]) (*connect.Response[v1.GetUsageStatsResponse], error)
	// メディアクォータ取得
	GetQuota(context.Context, *connect.Request[v1.GetQuotaRequest]) (*connect.Response[v1.GetQuotaResponse], error)
	// メディアクォータ更新
	UpdateQuota(context.Context, *connect.Request[v1.UpdateQuotaRequest]) (*connect.Response[v1.UpdateQuotaResponse], error)
	// メディア検索
	SearchMedia(context.Context, *connect.Request[v1.SearchMediaRequest]) (*connect.Response[v1.SearchMediaResponse], error)
	// 重複メディア検出
	DetectDuplicates(context.Context, *connect.Request[v1.DetectDuplicatesRequest]) (*connect.Response[v1.DetectDuplicatesResponse], error)
	// メディアメタデータ更新
	UpdateMetadata(context.Context, *connect.Request[v1.UpdateMetadataRequest]) (*connect.Response[v1.UpdateMetadataResponse], error)
	// メディアタグ追加
	AddTags(context.Context, *connect.Request[v1.AddTagsRequest]) (*connect.Response[v1.AddTagsResponse], error)
	// メディアタグ削除
	RemoveTags(context.Context, *connect.Request[v1.RemoveTagsRequest]) (*connect.Response[v1.RemoveTagsResponse], error)
}

// NewMediaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMediaServiceHandler(svc MediaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mediaServiceMethods := v1.File_avion_media_v1_media_service_proto.Services().ByName("MediaService").Methods()
	mediaServiceCreateUploadSessionHandler := connect.NewUnaryHandler(
		MediaServiceCreateUploadSessionProcedure,
		svc.CreateUploadSession,
		connect.WithSchema(mediaServiceMethods.ByName("CreateUploadSession")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceCompleteUploadHandler := connect.NewUnaryHandler(
		MediaServiceCompleteUploadProcedure,
		svc.CompleteUpload,
		connect.WithSchema(mediaServiceMethods.ByName("CompleteUpload")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceCancelUploadHandler := connect.NewUnaryHandler(
		MediaServiceCancelUploadProcedure,
		svc.CancelUpload,
		connect.WithSchema(mediaServiceMethods.ByName("CancelUpload")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGetMediaHandler := connect.NewUnaryHandler(
		MediaServiceGetMediaProcedure,
		svc.GetMedia,
		connect.WithSchema(mediaServiceMethods.ByName("GetMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceListMediaHandler := connect.NewUnaryHandler(
		MediaServiceListMediaProcedure,
		svc.ListMedia,
		connect.WithSchema(mediaServiceMethods.ByName("ListMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceUpdateMediaHandler := connect.NewUnaryHandler(
		MediaServiceUpdateMediaProcedure,
		svc.UpdateMedia,
		connect.WithSchema(mediaServiceMethods.ByName("UpdateMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceDeleteMediaHandler := connect.NewUnaryHandler(
		MediaServiceDeleteMediaProcedure,
		svc.DeleteMedia,
		connect.WithSchema(mediaServiceMethods.ByName("DeleteMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceBatchDeleteMediaHandler := connect.NewUnaryHandler(
		MediaServiceBatchDeleteMediaProcedure,
		svc.BatchDeleteMedia,
		connect.WithSchema(mediaServiceMethods.ByName("BatchDeleteMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGenerateThumbnailHandler := connect.NewUnaryHandler(
		MediaServiceGenerateThumbnailProcedure,
		svc.GenerateThumbnail,
		connect.WithSchema(mediaServiceMethods.ByName("GenerateThumbnail")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGetThumbnailsHandler := connect.NewUnaryHandler(
		MediaServiceGetThumbnailsProcedure,
		svc.GetThumbnails,
		connect.WithSchema(mediaServiceMethods.ByName("GetThumbnails")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceCreateProcessingJobHandler := connect.NewUnaryHandler(
		MediaServiceCreateProcessingJobProcedure,
		svc.CreateProcessingJob,
		connect.WithSchema(mediaServiceMethods.ByName("CreateProcessingJob")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGetProcessingJobHandler := connect.NewUnaryHandler(
		MediaServiceGetProcessingJobProcedure,
		svc.GetProcessingJob,
		connect.WithSchema(mediaServiceMethods.ByName("GetProcessingJob")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceListProcessingJobsHandler := connect.NewUnaryHandler(
		MediaServiceListProcessingJobsProcedure,
		svc.ListProcessingJobs,
		connect.WithSchema(mediaServiceMethods.ByName("ListProcessingJobs")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceCancelProcessingJobHandler := connect.NewUnaryHandler(
		MediaServiceCancelProcessingJobProcedure,
		svc.CancelProcessingJob,
		connect.WithSchema(mediaServiceMethods.ByName("CancelProcessingJob")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGenerateCDNUrlHandler := connect.NewUnaryHandler(
		MediaServiceGenerateCDNUrlProcedure,
		svc.GenerateCDNUrl,
		connect.WithSchema(mediaServiceMethods.ByName("GenerateCDNUrl")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGenerateSignedUrlHandler := connect.NewUnaryHandler(
		MediaServiceGenerateSignedUrlProcedure,
		svc.GenerateSignedUrl,
		connect.WithSchema(mediaServiceMethods.ByName("GenerateSignedUrl")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGetUsageStatsHandler := connect.NewUnaryHandler(
		MediaServiceGetUsageStatsProcedure,
		svc.GetUsageStats,
		connect.WithSchema(mediaServiceMethods.ByName("GetUsageStats")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceGetQuotaHandler := connect.NewUnaryHandler(
		MediaServiceGetQuotaProcedure,
		svc.GetQuota,
		connect.WithSchema(mediaServiceMethods.ByName("GetQuota")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceUpdateQuotaHandler := connect.NewUnaryHandler(
		MediaServiceUpdateQuotaProcedure,
		svc.UpdateQuota,
		connect.WithSchema(mediaServiceMethods.ByName("UpdateQuota")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceSearchMediaHandler := connect.NewUnaryHandler(
		MediaServiceSearchMediaProcedure,
		svc.SearchMedia,
		connect.WithSchema(mediaServiceMethods.ByName("SearchMedia")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceDetectDuplicatesHandler := connect.NewUnaryHandler(
		MediaServiceDetectDuplicatesProcedure,
		svc.DetectDuplicates,
		connect.WithSchema(mediaServiceMethods.ByName("DetectDuplicates")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceUpdateMetadataHandler := connect.NewUnaryHandler(
		MediaServiceUpdateMetadataProcedure,
		svc.UpdateMetadata,
		connect.WithSchema(mediaServiceMethods.ByName("UpdateMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceAddTagsHandler := connect.NewUnaryHandler(
		MediaServiceAddTagsProcedure,
		svc.AddTags,
		connect.WithSchema(mediaServiceMethods.ByName("AddTags")),
		connect.WithHandlerOptions(opts...),
	)
	mediaServiceRemoveTagsHandler := connect.NewUnaryHandler(
		MediaServiceRemoveTagsProcedure,
		svc.RemoveTags,
		connect.WithSchema(mediaServiceMethods.ByName("RemoveTags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.media.v1.MediaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MediaServiceCreateUploadSessionProcedure:
			mediaServiceCreateUploadSessionHandler.ServeHTTP(w, r)
		case MediaServiceCompleteUploadProcedure:
			mediaServiceCompleteUploadHandler.ServeHTTP(w, r)
		case MediaServiceCancelUploadProcedure:
			mediaServiceCancelUploadHandler.ServeHTTP(w, r)
		case MediaServiceGetMediaProcedure:
			mediaServiceGetMediaHandler.ServeHTTP(w, r)
		case MediaServiceListMediaProcedure:
			mediaServiceListMediaHandler.ServeHTTP(w, r)
		case MediaServiceUpdateMediaProcedure:
			mediaServiceUpdateMediaHandler.ServeHTTP(w, r)
		case MediaServiceDeleteMediaProcedure:
			mediaServiceDeleteMediaHandler.ServeHTTP(w, r)
		case MediaServiceBatchDeleteMediaProcedure:
			mediaServiceBatchDeleteMediaHandler.ServeHTTP(w, r)
		case MediaServiceGenerateThumbnailProcedure:
			mediaServiceGenerateThumbnailHandler.ServeHTTP(w, r)
		case MediaServiceGetThumbnailsProcedure:
			mediaServiceGetThumbnailsHandler.ServeHTTP(w, r)
		case MediaServiceCreateProcessingJobProcedure:
			mediaServiceCreateProcessingJobHandler.ServeHTTP(w, r)
		case MediaServiceGetProcessingJobProcedure:
			mediaServiceGetProcessingJobHandler.ServeHTTP(w, r)
		case MediaServiceListProcessingJobsProcedure:
			mediaServiceListProcessingJobsHandler.ServeHTTP(w, r)
		case MediaServiceCancelProcessingJobProcedure:
			mediaServiceCancelProcessingJobHandler.ServeHTTP(w, r)
		case MediaServiceGenerateCDNUrlProcedure:
			mediaServiceGenerateCDNUrlHandler.ServeHTTP(w, r)
		case MediaServiceGenerateSignedUrlProcedure:
			mediaServiceGenerateSignedUrlHandler.ServeHTTP(w, r)
		case MediaServiceGetUsageStatsProcedure:
			mediaServiceGetUsageStatsHandler.ServeHTTP(w, r)
		case MediaServiceGetQuotaProcedure:
			mediaServiceGetQuotaHandler.ServeHTTP(w, r)
		case MediaServiceUpdateQuotaProcedure:
			mediaServiceUpdateQuotaHandler.ServeHTTP(w, r)
		case MediaServiceSearchMediaProcedure:
			mediaServiceSearchMediaHandler.ServeHTTP(w, r)
		case MediaServiceDetectDuplicatesProcedure:
			mediaServiceDetectDuplicatesHandler.ServeHTTP(w, r)
		case MediaServiceUpdateMetadataProcedure:
			mediaServiceUpdateMetadataHandler.ServeHTTP(w, r)
		case MediaServiceAddTagsProcedure:
			mediaServiceAddTagsHandler.ServeHTTP(w, r)
		case MediaServiceRemoveTagsProcedure:
			mediaServiceRemoveTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMediaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMediaServiceHandler struct{}

func (UnimplementedMediaServiceHandler) CreateUploadSession(context.Context, *connect.Request[v1.CreateUploadSessionRequest]) (*connect.Response[v1.CreateUploadSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.CreateUploadSession is not implemented"))
}

func (UnimplementedMediaServiceHandler) CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.CompleteUpload is not implemented"))
}

func (UnimplementedMediaServiceHandler) CancelUpload(context.Context, *connect.Request[v1.CancelUploadRequest]) (*connect.Response[v1.CancelUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.CancelUpload is not implemented"))
}

func (UnimplementedMediaServiceHandler) GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GetMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) ListMedia(context.Context, *connect.Request[v1.ListMediaRequest]) (*connect.Response[v1.ListMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.ListMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) UpdateMedia(context.Context, *connect.Request[v1.UpdateMediaRequest]) (*connect.Response[v1.UpdateMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.UpdateMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) DeleteMedia(context.Context, *connect.Request[v1.DeleteMediaRequest]) (*connect.Response[v1.DeleteMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.DeleteMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) BatchDeleteMedia(context.Context, *connect.Request[v1.BatchDeleteMediaRequest]) (*connect.Response[v1.BatchDeleteMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.BatchDeleteMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) GenerateThumbnail(context.Context, *connect.Request[v1.GenerateThumbnailRequest]) (*connect.Response[v1.GenerateThumbnailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GenerateThumbnail is not implemented"))
}

func (UnimplementedMediaServiceHandler) GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GetThumbnails is not implemented"))
}

func (UnimplementedMediaServiceHandler) CreateProcessingJob(context.Context, *connect.Request[v1.CreateProcessingJobRequest]) (*connect.Response[v1.CreateProcessingJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.CreateProcessingJob is not implemented"))
}

func (UnimplementedMediaServiceHandler) GetProcessingJob(context.Context, *connect.Request[v1.GetProcessingJobRequest]) (*connect.Response[v1.GetProcessingJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GetProcessingJob is not implemented"))
}

func (UnimplementedMediaServiceHandler) ListProcessingJobs(context.Context, *connect.Request[v1.ListProcessingJobsRequest]) (*connect.Response[v1.ListProcessingJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.ListProcessingJobs is not implemented"))
}

func (UnimplementedMediaServiceHandler) CancelProcessingJob(context.Context, *connect.Request[v1.CancelProcessingJobRequest]) (*connect.Response[v1.CancelProcessingJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.CancelProcessingJob is not implemented"))
}

func (UnimplementedMediaServiceHandler) GenerateCDNUrl(context.Context, *connect.Request[v1.GenerateCDNUrlRequest]) (*connect.Response[v1.GenerateCDNUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GenerateCDNUrl is not implemented"))
}

func (UnimplementedMediaServiceHandler) GenerateSignedUrl(context.Context, *connect.Request[v1.GenerateSignedUrlRequest]) (*connect.Response[v1.GenerateSignedUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GenerateSignedUrl is not implemented"))
}

func (UnimplementedMediaServiceHandler) GetUsageStats(context.Context, *connect.Request[v1.GetUsageStatsRequest]) (*connect.Response[v1.GetUsageStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GetUsageStats is not implemented"))
}

func (UnimplementedMediaServiceHandler) GetQuota(context.Context, *connect.Request[v1.GetQuotaRequest]) (*connect.Response[v1.GetQuotaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.GetQuota is not implemented"))
}

func (UnimplementedMediaServiceHandler) UpdateQuota(context.Context, *connect.Request[v1.UpdateQuotaRequest]) (*connect.Response[v1.UpdateQuotaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.UpdateQuota is not implemented"))
}

func (UnimplementedMediaServiceHandler) SearchMedia(context.Context, *connect.Request[v1.SearchMediaRequest]) (*connect.Response[v1.SearchMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.SearchMedia is not implemented"))
}

func (UnimplementedMediaServiceHandler) DetectDuplicates(context.Context, *connect.Request[v1.DetectDuplicatesRequest]) (*connect.Response[v1.DetectDuplicatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.DetectDuplicates is not implemented"))
}

func (UnimplementedMediaServiceHandler) UpdateMetadata(context.Context, *connect.Request[v1.UpdateMetadataRequest]) (*connect.Response[v1.UpdateMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.UpdateMetadata is not implemented"))
}

func (UnimplementedMediaServiceHandler) AddTags(context.Context, *connect.Request[v1.AddTagsRequest]) (*connect.Response[v1.AddTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.AddTags is not implemented"))
}

func (UnimplementedMediaServiceHandler) RemoveTags(context.Context, *connect.Request[v1.RemoveTagsRequest]) (*connect.Response[v1.RemoveTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.media.v1.MediaService.RemoveTags is not implemented"))
}
