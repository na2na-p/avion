// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/search/v1/search_service.proto

package searchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchService_Search_FullMethodName              = "/avion.search.v1.SearchService/Search"
	SearchService_Autocomplete_FullMethodName        = "/avion.search.v1.SearchService/Autocomplete"
	SearchService_GetTrending_FullMethodName         = "/avion.search.v1.SearchService/GetTrending"
	SearchService_GetRelatedSearches_FullMethodName  = "/avion.search.v1.SearchService/GetRelatedSearches"
	SearchService_GetSearchHistory_FullMethodName    = "/avion.search.v1.SearchService/GetSearchHistory"
	SearchService_DeleteSearchHistory_FullMethodName = "/avion.search.v1.SearchService/DeleteSearchHistory"
	SearchService_CreateSavedSearch_FullMethodName   = "/avion.search.v1.SearchService/CreateSavedSearch"
	SearchService_ListSavedSearches_FullMethodName   = "/avion.search.v1.SearchService/ListSavedSearches"
	SearchService_DeleteSavedSearch_FullMethodName   = "/avion.search.v1.SearchService/DeleteSavedSearch"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 検索サービス
type SearchServiceClient interface {
	// 汎用検索
	// ユーザー、Drop、ハッシュタグを横断的に検索
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// オートコンプリート
	// 検索クエリ入力中のサジェスト表示
	Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error)
	// トレンド取得
	// 現在のトレンドハッシュタグ、トピック、ユーザーを取得
	GetTrending(ctx context.Context, in *GetTrendingRequest, opts ...grpc.CallOption) (*GetTrendingResponse, error)
	// 関連検索取得
	// 指定したクエリに関連する検索候補を取得
	GetRelatedSearches(ctx context.Context, in *GetRelatedSearchesRequest, opts ...grpc.CallOption) (*GetRelatedSearchesResponse, error)
	// 検索履歴取得
	// ユーザーの検索履歴を取得
	GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error)
	// 検索履歴削除
	// ユーザーの検索履歴を削除
	DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error)
	// 保存済み検索作成
	// 検索条件を保存して後で再利用可能にする
	CreateSavedSearch(ctx context.Context, in *CreateSavedSearchRequest, opts ...grpc.CallOption) (*CreateSavedSearchResponse, error)
	// 保存済み検索一覧取得
	// ユーザーの保存済み検索を一覧取得
	ListSavedSearches(ctx context.Context, in *ListSavedSearchesRequest, opts ...grpc.CallOption) (*ListSavedSearchesResponse, error)
	// 保存済み検索削除
	// 保存済み検索を削除
	DeleteSavedSearch(ctx context.Context, in *DeleteSavedSearchRequest, opts ...grpc.CallOption) (*DeleteSavedSearchResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SearchService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutocompleteResponse)
	err := c.cc.Invoke(ctx, SearchService_Autocomplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetTrending(ctx context.Context, in *GetTrendingRequest, opts ...grpc.CallOption) (*GetTrendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrendingResponse)
	err := c.cc.Invoke(ctx, SearchService_GetTrending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetRelatedSearches(ctx context.Context, in *GetRelatedSearchesRequest, opts ...grpc.CallOption) (*GetRelatedSearchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelatedSearchesResponse)
	err := c.cc.Invoke(ctx, SearchService_GetRelatedSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchHistoryResponse)
	err := c.cc.Invoke(ctx, SearchService_GetSearchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSearchHistoryResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteSearchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) CreateSavedSearch(ctx context.Context, in *CreateSavedSearchRequest, opts ...grpc.CallOption) (*CreateSavedSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSavedSearchResponse)
	err := c.cc.Invoke(ctx, SearchService_CreateSavedSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) ListSavedSearches(ctx context.Context, in *ListSavedSearchesRequest, opts ...grpc.CallOption) (*ListSavedSearchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSavedSearchesResponse)
	err := c.cc.Invoke(ctx, SearchService_ListSavedSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteSavedSearch(ctx context.Context, in *DeleteSavedSearchRequest, opts ...grpc.CallOption) (*DeleteSavedSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSavedSearchResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteSavedSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility.
//
// 検索サービス
type SearchServiceServer interface {
	// 汎用検索
	// ユーザー、Drop、ハッシュタグを横断的に検索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// オートコンプリート
	// 検索クエリ入力中のサジェスト表示
	Autocomplete(context.Context, *AutocompleteRequest) (*AutocompleteResponse, error)
	// トレンド取得
	// 現在のトレンドハッシュタグ、トピック、ユーザーを取得
	GetTrending(context.Context, *GetTrendingRequest) (*GetTrendingResponse, error)
	// 関連検索取得
	// 指定したクエリに関連する検索候補を取得
	GetRelatedSearches(context.Context, *GetRelatedSearchesRequest) (*GetRelatedSearchesResponse, error)
	// 検索履歴取得
	// ユーザーの検索履歴を取得
	GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error)
	// 検索履歴削除
	// ユーザーの検索履歴を削除
	DeleteSearchHistory(context.Context, *DeleteSearchHistoryRequest) (*DeleteSearchHistoryResponse, error)
	// 保存済み検索作成
	// 検索条件を保存して後で再利用可能にする
	CreateSavedSearch(context.Context, *CreateSavedSearchRequest) (*CreateSavedSearchResponse, error)
	// 保存済み検索一覧取得
	// ユーザーの保存済み検索を一覧取得
	ListSavedSearches(context.Context, *ListSavedSearchesRequest) (*ListSavedSearchesResponse, error)
	// 保存済み検索削除
	// 保存済み検索を削除
	DeleteSavedSearch(context.Context, *DeleteSavedSearchRequest) (*DeleteSavedSearchResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServiceServer struct{}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) Autocomplete(context.Context, *AutocompleteRequest) (*AutocompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Autocomplete not implemented")
}
func (UnimplementedSearchServiceServer) GetTrending(context.Context, *GetTrendingRequest) (*GetTrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrending not implemented")
}
func (UnimplementedSearchServiceServer) GetRelatedSearches(context.Context, *GetRelatedSearchesRequest) (*GetRelatedSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedSearches not implemented")
}
func (UnimplementedSearchServiceServer) GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) DeleteSearchHistory(context.Context, *DeleteSearchHistoryRequest) (*DeleteSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) CreateSavedSearch(context.Context, *CreateSavedSearchRequest) (*CreateSavedSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSavedSearch not implemented")
}
func (UnimplementedSearchServiceServer) ListSavedSearches(context.Context, *ListSavedSearchesRequest) (*ListSavedSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSavedSearches not implemented")
}
func (UnimplementedSearchServiceServer) DeleteSavedSearch(context.Context, *DeleteSavedSearchRequest) (*DeleteSavedSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedSearch not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}
func (UnimplementedSearchServiceServer) testEmbeddedByValue()                       {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Autocomplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Autocomplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Autocomplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Autocomplete(ctx, req.(*AutocompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetTrending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetTrending(ctx, req.(*GetTrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetRelatedSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetRelatedSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetRelatedSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetRelatedSearches(ctx, req.(*GetRelatedSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetSearchHistory(ctx, req.(*GetSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteSearchHistory(ctx, req.(*DeleteSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_CreateSavedSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSavedSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).CreateSavedSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_CreateSavedSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).CreateSavedSearch(ctx, req.(*CreateSavedSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_ListSavedSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSavedSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).ListSavedSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_ListSavedSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).ListSavedSearches(ctx, req.(*ListSavedSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteSavedSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteSavedSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteSavedSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteSavedSearch(ctx, req.(*DeleteSavedSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.search.v1.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "Autocomplete",
			Handler:    _SearchService_Autocomplete_Handler,
		},
		{
			MethodName: "GetTrending",
			Handler:    _SearchService_GetTrending_Handler,
		},
		{
			MethodName: "GetRelatedSearches",
			Handler:    _SearchService_GetRelatedSearches_Handler,
		},
		{
			MethodName: "GetSearchHistory",
			Handler:    _SearchService_GetSearchHistory_Handler,
		},
		{
			MethodName: "DeleteSearchHistory",
			Handler:    _SearchService_DeleteSearchHistory_Handler,
		},
		{
			MethodName: "CreateSavedSearch",
			Handler:    _SearchService_CreateSavedSearch_Handler,
		},
		{
			MethodName: "ListSavedSearches",
			Handler:    _SearchService_ListSavedSearches_Handler,
		},
		{
			MethodName: "DeleteSavedSearch",
			Handler:    _SearchService_DeleteSavedSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/search/v1/search_service.proto",
}

const (
	UserSearchService_SearchUsers_FullMethodName            = "/avion.search.v1.UserSearchService/SearchUsers"
	UserSearchService_SearchSimilarUsers_FullMethodName     = "/avion.search.v1.UserSearchService/SearchSimilarUsers"
	UserSearchService_GetUserRecommendations_FullMethodName = "/avion.search.v1.UserSearchService/GetUserRecommendations"
)

// UserSearchServiceClient is the client API for UserSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ユーザー検索サービス
type UserSearchServiceClient interface {
	// ユーザー検索
	// ユーザー名、表示名、自己紹介文から検索
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// 類似ユーザー検索
	// 指定ユーザーに類似したユーザーを検索
	SearchSimilarUsers(ctx context.Context, in *SearchSimilarUsersRequest, opts ...grpc.CallOption) (*SearchSimilarUsersResponse, error)
	// ユーザー推薦
	// ユーザーの興味・関心に基づいて推薦
	GetUserRecommendations(ctx context.Context, in *GetUserRecommendationsRequest, opts ...grpc.CallOption) (*GetUserRecommendationsResponse, error)
}

type userSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSearchServiceClient(cc grpc.ClientConnInterface) UserSearchServiceClient {
	return &userSearchServiceClient{cc}
}

func (c *userSearchServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, UserSearchService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSearchServiceClient) SearchSimilarUsers(ctx context.Context, in *SearchSimilarUsersRequest, opts ...grpc.CallOption) (*SearchSimilarUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSimilarUsersResponse)
	err := c.cc.Invoke(ctx, UserSearchService_SearchSimilarUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSearchServiceClient) GetUserRecommendations(ctx context.Context, in *GetUserRecommendationsRequest, opts ...grpc.CallOption) (*GetUserRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRecommendationsResponse)
	err := c.cc.Invoke(ctx, UserSearchService_GetUserRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSearchServiceServer is the server API for UserSearchService service.
// All implementations must embed UnimplementedUserSearchServiceServer
// for forward compatibility.
//
// ユーザー検索サービス
type UserSearchServiceServer interface {
	// ユーザー検索
	// ユーザー名、表示名、自己紹介文から検索
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// 類似ユーザー検索
	// 指定ユーザーに類似したユーザーを検索
	SearchSimilarUsers(context.Context, *SearchSimilarUsersRequest) (*SearchSimilarUsersResponse, error)
	// ユーザー推薦
	// ユーザーの興味・関心に基づいて推薦
	GetUserRecommendations(context.Context, *GetUserRecommendationsRequest) (*GetUserRecommendationsResponse, error)
	mustEmbedUnimplementedUserSearchServiceServer()
}

// UnimplementedUserSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserSearchServiceServer struct{}

func (UnimplementedUserSearchServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserSearchServiceServer) SearchSimilarUsers(context.Context, *SearchSimilarUsersRequest) (*SearchSimilarUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSimilarUsers not implemented")
}
func (UnimplementedUserSearchServiceServer) GetUserRecommendations(context.Context, *GetUserRecommendationsRequest) (*GetUserRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecommendations not implemented")
}
func (UnimplementedUserSearchServiceServer) mustEmbedUnimplementedUserSearchServiceServer() {}
func (UnimplementedUserSearchServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSearchServiceServer will
// result in compilation errors.
type UnsafeUserSearchServiceServer interface {
	mustEmbedUnimplementedUserSearchServiceServer()
}

func RegisterUserSearchServiceServer(s grpc.ServiceRegistrar, srv UserSearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserSearchService_ServiceDesc, srv)
}

func _UserSearchService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSearchServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSearchService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSearchServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSearchService_SearchSimilarUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSimilarUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSearchServiceServer).SearchSimilarUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSearchService_SearchSimilarUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSearchServiceServer).SearchSimilarUsers(ctx, req.(*SearchSimilarUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSearchService_GetUserRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSearchServiceServer).GetUserRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSearchService_GetUserRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSearchServiceServer).GetUserRecommendations(ctx, req.(*GetUserRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSearchService_ServiceDesc is the grpc.ServiceDesc for UserSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.search.v1.UserSearchService",
	HandlerType: (*UserSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserSearchService_SearchUsers_Handler,
		},
		{
			MethodName: "SearchSimilarUsers",
			Handler:    _UserSearchService_SearchSimilarUsers_Handler,
		},
		{
			MethodName: "GetUserRecommendations",
			Handler:    _UserSearchService_GetUserRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/search/v1/search_service.proto",
}

const (
	DropSearchService_SearchDrops_FullMethodName        = "/avion.search.v1.DropSearchService/SearchDrops"
	DropSearchService_SearchMediaDrops_FullMethodName   = "/avion.search.v1.DropSearchService/SearchMediaDrops"
	DropSearchService_SearchSimilarDrops_FullMethodName = "/avion.search.v1.DropSearchService/SearchSimilarDrops"
)

// DropSearchServiceClient is the client API for DropSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Drop検索サービス
type DropSearchServiceClient interface {
	// Drop検索
	// Drop内容から全文検索
	SearchDrops(ctx context.Context, in *SearchDropsRequest, opts ...grpc.CallOption) (*SearchDropsResponse, error)
	// メディア検索
	// メディアを含むDropを検索
	SearchMediaDrops(ctx context.Context, in *SearchMediaDropsRequest, opts ...grpc.CallOption) (*SearchMediaDropsResponse, error)
	// 類似Drop検索
	// 指定Dropに類似した内容のDropを検索
	SearchSimilarDrops(ctx context.Context, in *SearchSimilarDropsRequest, opts ...grpc.CallOption) (*SearchSimilarDropsResponse, error)
}

type dropSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDropSearchServiceClient(cc grpc.ClientConnInterface) DropSearchServiceClient {
	return &dropSearchServiceClient{cc}
}

func (c *dropSearchServiceClient) SearchDrops(ctx context.Context, in *SearchDropsRequest, opts ...grpc.CallOption) (*SearchDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDropsResponse)
	err := c.cc.Invoke(ctx, DropSearchService_SearchDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropSearchServiceClient) SearchMediaDrops(ctx context.Context, in *SearchMediaDropsRequest, opts ...grpc.CallOption) (*SearchMediaDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMediaDropsResponse)
	err := c.cc.Invoke(ctx, DropSearchService_SearchMediaDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropSearchServiceClient) SearchSimilarDrops(ctx context.Context, in *SearchSimilarDropsRequest, opts ...grpc.CallOption) (*SearchSimilarDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSimilarDropsResponse)
	err := c.cc.Invoke(ctx, DropSearchService_SearchSimilarDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropSearchServiceServer is the server API for DropSearchService service.
// All implementations must embed UnimplementedDropSearchServiceServer
// for forward compatibility.
//
// Drop検索サービス
type DropSearchServiceServer interface {
	// Drop検索
	// Drop内容から全文検索
	SearchDrops(context.Context, *SearchDropsRequest) (*SearchDropsResponse, error)
	// メディア検索
	// メディアを含むDropを検索
	SearchMediaDrops(context.Context, *SearchMediaDropsRequest) (*SearchMediaDropsResponse, error)
	// 類似Drop検索
	// 指定Dropに類似した内容のDropを検索
	SearchSimilarDrops(context.Context, *SearchSimilarDropsRequest) (*SearchSimilarDropsResponse, error)
	mustEmbedUnimplementedDropSearchServiceServer()
}

// UnimplementedDropSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropSearchServiceServer struct{}

func (UnimplementedDropSearchServiceServer) SearchDrops(context.Context, *SearchDropsRequest) (*SearchDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDrops not implemented")
}
func (UnimplementedDropSearchServiceServer) SearchMediaDrops(context.Context, *SearchMediaDropsRequest) (*SearchMediaDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMediaDrops not implemented")
}
func (UnimplementedDropSearchServiceServer) SearchSimilarDrops(context.Context, *SearchSimilarDropsRequest) (*SearchSimilarDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSimilarDrops not implemented")
}
func (UnimplementedDropSearchServiceServer) mustEmbedUnimplementedDropSearchServiceServer() {}
func (UnimplementedDropSearchServiceServer) testEmbeddedByValue()                           {}

// UnsafeDropSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropSearchServiceServer will
// result in compilation errors.
type UnsafeDropSearchServiceServer interface {
	mustEmbedUnimplementedDropSearchServiceServer()
}

func RegisterDropSearchServiceServer(s grpc.ServiceRegistrar, srv DropSearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedDropSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DropSearchService_ServiceDesc, srv)
}

func _DropSearchService_SearchDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropSearchServiceServer).SearchDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropSearchService_SearchDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropSearchServiceServer).SearchDrops(ctx, req.(*SearchDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropSearchService_SearchMediaDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMediaDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropSearchServiceServer).SearchMediaDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropSearchService_SearchMediaDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropSearchServiceServer).SearchMediaDrops(ctx, req.(*SearchMediaDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropSearchService_SearchSimilarDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSimilarDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropSearchServiceServer).SearchSimilarDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropSearchService_SearchSimilarDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropSearchServiceServer).SearchSimilarDrops(ctx, req.(*SearchSimilarDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropSearchService_ServiceDesc is the grpc.ServiceDesc for DropSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.search.v1.DropSearchService",
	HandlerType: (*DropSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchDrops",
			Handler:    _DropSearchService_SearchDrops_Handler,
		},
		{
			MethodName: "SearchMediaDrops",
			Handler:    _DropSearchService_SearchMediaDrops_Handler,
		},
		{
			MethodName: "SearchSimilarDrops",
			Handler:    _DropSearchService_SearchSimilarDrops_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/search/v1/search_service.proto",
}

const (
	HashtagSearchService_SearchHashtags_FullMethodName       = "/avion.search.v1.HashtagSearchService/SearchHashtags"
	HashtagSearchService_SearchDropsByHashtag_FullMethodName = "/avion.search.v1.HashtagSearchService/SearchDropsByHashtag"
	HashtagSearchService_GetRelatedHashtags_FullMethodName   = "/avion.search.v1.HashtagSearchService/GetRelatedHashtags"
	HashtagSearchService_GetHashtagStats_FullMethodName      = "/avion.search.v1.HashtagSearchService/GetHashtagStats"
)

// HashtagSearchServiceClient is the client API for HashtagSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ハッシュタグ検索サービス
type HashtagSearchServiceClient interface {
	// ハッシュタグ検索
	// ハッシュタグを検索
	SearchHashtags(ctx context.Context, in *SearchHashtagsRequest, opts ...grpc.CallOption) (*SearchHashtagsResponse, error)
	// ハッシュタグ付きDrop検索
	// 特定のハッシュタグを含むDropを検索
	SearchDropsByHashtag(ctx context.Context, in *SearchDropsByHashtagRequest, opts ...grpc.CallOption) (*SearchDropsByHashtagResponse, error)
	// 関連ハッシュタグ取得
	// 指定ハッシュタグに関連するハッシュタグを取得
	GetRelatedHashtags(ctx context.Context, in *GetRelatedHashtagsRequest, opts ...grpc.CallOption) (*GetRelatedHashtagsResponse, error)
	// ハッシュタグ統計取得
	// ハッシュタグの使用統計を取得
	GetHashtagStats(ctx context.Context, in *GetHashtagStatsRequest, opts ...grpc.CallOption) (*GetHashtagStatsResponse, error)
}

type hashtagSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagSearchServiceClient(cc grpc.ClientConnInterface) HashtagSearchServiceClient {
	return &hashtagSearchServiceClient{cc}
}

func (c *hashtagSearchServiceClient) SearchHashtags(ctx context.Context, in *SearchHashtagsRequest, opts ...grpc.CallOption) (*SearchHashtagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchHashtagsResponse)
	err := c.cc.Invoke(ctx, HashtagSearchService_SearchHashtags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagSearchServiceClient) SearchDropsByHashtag(ctx context.Context, in *SearchDropsByHashtagRequest, opts ...grpc.CallOption) (*SearchDropsByHashtagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDropsByHashtagResponse)
	err := c.cc.Invoke(ctx, HashtagSearchService_SearchDropsByHashtag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagSearchServiceClient) GetRelatedHashtags(ctx context.Context, in *GetRelatedHashtagsRequest, opts ...grpc.CallOption) (*GetRelatedHashtagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelatedHashtagsResponse)
	err := c.cc.Invoke(ctx, HashtagSearchService_GetRelatedHashtags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagSearchServiceClient) GetHashtagStats(ctx context.Context, in *GetHashtagStatsRequest, opts ...grpc.CallOption) (*GetHashtagStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHashtagStatsResponse)
	err := c.cc.Invoke(ctx, HashtagSearchService_GetHashtagStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagSearchServiceServer is the server API for HashtagSearchService service.
// All implementations must embed UnimplementedHashtagSearchServiceServer
// for forward compatibility.
//
// ハッシュタグ検索サービス
type HashtagSearchServiceServer interface {
	// ハッシュタグ検索
	// ハッシュタグを検索
	SearchHashtags(context.Context, *SearchHashtagsRequest) (*SearchHashtagsResponse, error)
	// ハッシュタグ付きDrop検索
	// 特定のハッシュタグを含むDropを検索
	SearchDropsByHashtag(context.Context, *SearchDropsByHashtagRequest) (*SearchDropsByHashtagResponse, error)
	// 関連ハッシュタグ取得
	// 指定ハッシュタグに関連するハッシュタグを取得
	GetRelatedHashtags(context.Context, *GetRelatedHashtagsRequest) (*GetRelatedHashtagsResponse, error)
	// ハッシュタグ統計取得
	// ハッシュタグの使用統計を取得
	GetHashtagStats(context.Context, *GetHashtagStatsRequest) (*GetHashtagStatsResponse, error)
	mustEmbedUnimplementedHashtagSearchServiceServer()
}

// UnimplementedHashtagSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHashtagSearchServiceServer struct{}

func (UnimplementedHashtagSearchServiceServer) SearchHashtags(context.Context, *SearchHashtagsRequest) (*SearchHashtagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHashtags not implemented")
}
func (UnimplementedHashtagSearchServiceServer) SearchDropsByHashtag(context.Context, *SearchDropsByHashtagRequest) (*SearchDropsByHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDropsByHashtag not implemented")
}
func (UnimplementedHashtagSearchServiceServer) GetRelatedHashtags(context.Context, *GetRelatedHashtagsRequest) (*GetRelatedHashtagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedHashtags not implemented")
}
func (UnimplementedHashtagSearchServiceServer) GetHashtagStats(context.Context, *GetHashtagStatsRequest) (*GetHashtagStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtagStats not implemented")
}
func (UnimplementedHashtagSearchServiceServer) mustEmbedUnimplementedHashtagSearchServiceServer() {}
func (UnimplementedHashtagSearchServiceServer) testEmbeddedByValue()                              {}

// UnsafeHashtagSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagSearchServiceServer will
// result in compilation errors.
type UnsafeHashtagSearchServiceServer interface {
	mustEmbedUnimplementedHashtagSearchServiceServer()
}

func RegisterHashtagSearchServiceServer(s grpc.ServiceRegistrar, srv HashtagSearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedHashtagSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HashtagSearchService_ServiceDesc, srv)
}

func _HashtagSearchService_SearchHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHashtagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagSearchServiceServer).SearchHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashtagSearchService_SearchHashtags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagSearchServiceServer).SearchHashtags(ctx, req.(*SearchHashtagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagSearchService_SearchDropsByHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDropsByHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagSearchServiceServer).SearchDropsByHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashtagSearchService_SearchDropsByHashtag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagSearchServiceServer).SearchDropsByHashtag(ctx, req.(*SearchDropsByHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagSearchService_GetRelatedHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedHashtagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagSearchServiceServer).GetRelatedHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashtagSearchService_GetRelatedHashtags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagSearchServiceServer).GetRelatedHashtags(ctx, req.(*GetRelatedHashtagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagSearchService_GetHashtagStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagSearchServiceServer).GetHashtagStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashtagSearchService_GetHashtagStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagSearchServiceServer).GetHashtagStats(ctx, req.(*GetHashtagStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashtagSearchService_ServiceDesc is the grpc.ServiceDesc for HashtagSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashtagSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.search.v1.HashtagSearchService",
	HandlerType: (*HashtagSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchHashtags",
			Handler:    _HashtagSearchService_SearchHashtags_Handler,
		},
		{
			MethodName: "SearchDropsByHashtag",
			Handler:    _HashtagSearchService_SearchDropsByHashtag_Handler,
		},
		{
			MethodName: "GetRelatedHashtags",
			Handler:    _HashtagSearchService_GetRelatedHashtags_Handler,
		},
		{
			MethodName: "GetHashtagStats",
			Handler:    _HashtagSearchService_GetHashtagStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/search/v1/search_service.proto",
}

const (
	SearchIndexService_UpdateIndex_FullMethodName     = "/avion.search.v1.SearchIndexService/UpdateIndex"
	SearchIndexService_DeleteFromIndex_FullMethodName = "/avion.search.v1.SearchIndexService/DeleteFromIndex"
	SearchIndexService_RebuildIndex_FullMethodName    = "/avion.search.v1.SearchIndexService/RebuildIndex"
	SearchIndexService_GetIndexStats_FullMethodName   = "/avion.search.v1.SearchIndexService/GetIndexStats"
	SearchIndexService_OptimizeIndex_FullMethodName   = "/avion.search.v1.SearchIndexService/OptimizeIndex"
)

// SearchIndexServiceClient is the client API for SearchIndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// インデックス管理サービス（管理者用）
type SearchIndexServiceClient interface {
	// インデックス更新
	// 指定されたコンテンツのインデックスを更新
	UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*UpdateIndexResponse, error)
	// インデックス削除
	// 指定されたコンテンツのインデックスを削除
	DeleteFromIndex(ctx context.Context, in *DeleteFromIndexRequest, opts ...grpc.CallOption) (*DeleteFromIndexResponse, error)
	// インデックス再構築
	// 全体または部分的なインデックスの再構築
	RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error)
	// インデックス統計取得
	// インデックスの統計情報を取得
	GetIndexStats(ctx context.Context, in *GetIndexStatsRequest, opts ...grpc.CallOption) (*GetIndexStatsResponse, error)
	// インデックス最適化
	// インデックスの最適化を実行
	OptimizeIndex(ctx context.Context, in *OptimizeIndexRequest, opts ...grpc.CallOption) (*OptimizeIndexResponse, error)
}

type searchIndexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchIndexServiceClient(cc grpc.ClientConnInterface) SearchIndexServiceClient {
	return &searchIndexServiceClient{cc}
}

func (c *searchIndexServiceClient) UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*UpdateIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIndexResponse)
	err := c.cc.Invoke(ctx, SearchIndexService_UpdateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchIndexServiceClient) DeleteFromIndex(ctx context.Context, in *DeleteFromIndexRequest, opts ...grpc.CallOption) (*DeleteFromIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFromIndexResponse)
	err := c.cc.Invoke(ctx, SearchIndexService_DeleteFromIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchIndexServiceClient) RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebuildIndexResponse)
	err := c.cc.Invoke(ctx, SearchIndexService_RebuildIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchIndexServiceClient) GetIndexStats(ctx context.Context, in *GetIndexStatsRequest, opts ...grpc.CallOption) (*GetIndexStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndexStatsResponse)
	err := c.cc.Invoke(ctx, SearchIndexService_GetIndexStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchIndexServiceClient) OptimizeIndex(ctx context.Context, in *OptimizeIndexRequest, opts ...grpc.CallOption) (*OptimizeIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizeIndexResponse)
	err := c.cc.Invoke(ctx, SearchIndexService_OptimizeIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchIndexServiceServer is the server API for SearchIndexService service.
// All implementations must embed UnimplementedSearchIndexServiceServer
// for forward compatibility.
//
// インデックス管理サービス（管理者用）
type SearchIndexServiceServer interface {
	// インデックス更新
	// 指定されたコンテンツのインデックスを更新
	UpdateIndex(context.Context, *UpdateIndexRequest) (*UpdateIndexResponse, error)
	// インデックス削除
	// 指定されたコンテンツのインデックスを削除
	DeleteFromIndex(context.Context, *DeleteFromIndexRequest) (*DeleteFromIndexResponse, error)
	// インデックス再構築
	// 全体または部分的なインデックスの再構築
	RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error)
	// インデックス統計取得
	// インデックスの統計情報を取得
	GetIndexStats(context.Context, *GetIndexStatsRequest) (*GetIndexStatsResponse, error)
	// インデックス最適化
	// インデックスの最適化を実行
	OptimizeIndex(context.Context, *OptimizeIndexRequest) (*OptimizeIndexResponse, error)
	mustEmbedUnimplementedSearchIndexServiceServer()
}

// UnimplementedSearchIndexServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchIndexServiceServer struct{}

func (UnimplementedSearchIndexServiceServer) UpdateIndex(context.Context, *UpdateIndexRequest) (*UpdateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndex not implemented")
}
func (UnimplementedSearchIndexServiceServer) DeleteFromIndex(context.Context, *DeleteFromIndexRequest) (*DeleteFromIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromIndex not implemented")
}
func (UnimplementedSearchIndexServiceServer) RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildIndex not implemented")
}
func (UnimplementedSearchIndexServiceServer) GetIndexStats(context.Context, *GetIndexStatsRequest) (*GetIndexStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexStats not implemented")
}
func (UnimplementedSearchIndexServiceServer) OptimizeIndex(context.Context, *OptimizeIndexRequest) (*OptimizeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeIndex not implemented")
}
func (UnimplementedSearchIndexServiceServer) mustEmbedUnimplementedSearchIndexServiceServer() {}
func (UnimplementedSearchIndexServiceServer) testEmbeddedByValue()                            {}

// UnsafeSearchIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchIndexServiceServer will
// result in compilation errors.
type UnsafeSearchIndexServiceServer interface {
	mustEmbedUnimplementedSearchIndexServiceServer()
}

func RegisterSearchIndexServiceServer(s grpc.ServiceRegistrar, srv SearchIndexServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchIndexServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchIndexService_ServiceDesc, srv)
}

func _SearchIndexService_UpdateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexServiceServer).UpdateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexService_UpdateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexServiceServer).UpdateIndex(ctx, req.(*UpdateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchIndexService_DeleteFromIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexServiceServer).DeleteFromIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexService_DeleteFromIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexServiceServer).DeleteFromIndex(ctx, req.(*DeleteFromIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchIndexService_RebuildIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexServiceServer).RebuildIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexService_RebuildIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexServiceServer).RebuildIndex(ctx, req.(*RebuildIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchIndexService_GetIndexStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexServiceServer).GetIndexStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexService_GetIndexStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexServiceServer).GetIndexStats(ctx, req.(*GetIndexStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchIndexService_OptimizeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexServiceServer).OptimizeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexService_OptimizeIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexServiceServer).OptimizeIndex(ctx, req.(*OptimizeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchIndexService_ServiceDesc is the grpc.ServiceDesc for SearchIndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchIndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.search.v1.SearchIndexService",
	HandlerType: (*SearchIndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateIndex",
			Handler:    _SearchIndexService_UpdateIndex_Handler,
		},
		{
			MethodName: "DeleteFromIndex",
			Handler:    _SearchIndexService_DeleteFromIndex_Handler,
		},
		{
			MethodName: "RebuildIndex",
			Handler:    _SearchIndexService_RebuildIndex_Handler,
		},
		{
			MethodName: "GetIndexStats",
			Handler:    _SearchIndexService_GetIndexStats_Handler,
		},
		{
			MethodName: "OptimizeIndex",
			Handler:    _SearchIndexService_OptimizeIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/search/v1/search_service.proto",
}
