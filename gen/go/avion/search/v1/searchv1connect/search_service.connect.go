// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/search/v1/search_service.proto

package searchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/search/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SearchServiceName is the fully-qualified name of the SearchService service.
	SearchServiceName = "avion.search.v1.SearchService"
	// UserSearchServiceName is the fully-qualified name of the UserSearchService service.
	UserSearchServiceName = "avion.search.v1.UserSearchService"
	// DropSearchServiceName is the fully-qualified name of the DropSearchService service.
	DropSearchServiceName = "avion.search.v1.DropSearchService"
	// HashtagSearchServiceName is the fully-qualified name of the HashtagSearchService service.
	HashtagSearchServiceName = "avion.search.v1.HashtagSearchService"
	// SearchIndexServiceName is the fully-qualified name of the SearchIndexService service.
	SearchIndexServiceName = "avion.search.v1.SearchIndexService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SearchServiceSearchProcedure is the fully-qualified name of the SearchService's Search RPC.
	SearchServiceSearchProcedure = "/avion.search.v1.SearchService/Search"
	// SearchServiceAutocompleteProcedure is the fully-qualified name of the SearchService's
	// Autocomplete RPC.
	SearchServiceAutocompleteProcedure = "/avion.search.v1.SearchService/Autocomplete"
	// SearchServiceGetTrendingProcedure is the fully-qualified name of the SearchService's GetTrending
	// RPC.
	SearchServiceGetTrendingProcedure = "/avion.search.v1.SearchService/GetTrending"
	// SearchServiceGetRelatedSearchesProcedure is the fully-qualified name of the SearchService's
	// GetRelatedSearches RPC.
	SearchServiceGetRelatedSearchesProcedure = "/avion.search.v1.SearchService/GetRelatedSearches"
	// SearchServiceGetSearchHistoryProcedure is the fully-qualified name of the SearchService's
	// GetSearchHistory RPC.
	SearchServiceGetSearchHistoryProcedure = "/avion.search.v1.SearchService/GetSearchHistory"
	// SearchServiceDeleteSearchHistoryProcedure is the fully-qualified name of the SearchService's
	// DeleteSearchHistory RPC.
	SearchServiceDeleteSearchHistoryProcedure = "/avion.search.v1.SearchService/DeleteSearchHistory"
	// SearchServiceCreateSavedSearchProcedure is the fully-qualified name of the SearchService's
	// CreateSavedSearch RPC.
	SearchServiceCreateSavedSearchProcedure = "/avion.search.v1.SearchService/CreateSavedSearch"
	// SearchServiceListSavedSearchesProcedure is the fully-qualified name of the SearchService's
	// ListSavedSearches RPC.
	SearchServiceListSavedSearchesProcedure = "/avion.search.v1.SearchService/ListSavedSearches"
	// SearchServiceDeleteSavedSearchProcedure is the fully-qualified name of the SearchService's
	// DeleteSavedSearch RPC.
	SearchServiceDeleteSavedSearchProcedure = "/avion.search.v1.SearchService/DeleteSavedSearch"
	// UserSearchServiceSearchUsersProcedure is the fully-qualified name of the UserSearchService's
	// SearchUsers RPC.
	UserSearchServiceSearchUsersProcedure = "/avion.search.v1.UserSearchService/SearchUsers"
	// UserSearchServiceSearchSimilarUsersProcedure is the fully-qualified name of the
	// UserSearchService's SearchSimilarUsers RPC.
	UserSearchServiceSearchSimilarUsersProcedure = "/avion.search.v1.UserSearchService/SearchSimilarUsers"
	// UserSearchServiceGetUserRecommendationsProcedure is the fully-qualified name of the
	// UserSearchService's GetUserRecommendations RPC.
	UserSearchServiceGetUserRecommendationsProcedure = "/avion.search.v1.UserSearchService/GetUserRecommendations"
	// DropSearchServiceSearchDropsProcedure is the fully-qualified name of the DropSearchService's
	// SearchDrops RPC.
	DropSearchServiceSearchDropsProcedure = "/avion.search.v1.DropSearchService/SearchDrops"
	// DropSearchServiceSearchMediaDropsProcedure is the fully-qualified name of the DropSearchService's
	// SearchMediaDrops RPC.
	DropSearchServiceSearchMediaDropsProcedure = "/avion.search.v1.DropSearchService/SearchMediaDrops"
	// DropSearchServiceSearchSimilarDropsProcedure is the fully-qualified name of the
	// DropSearchService's SearchSimilarDrops RPC.
	DropSearchServiceSearchSimilarDropsProcedure = "/avion.search.v1.DropSearchService/SearchSimilarDrops"
	// HashtagSearchServiceSearchHashtagsProcedure is the fully-qualified name of the
	// HashtagSearchService's SearchHashtags RPC.
	HashtagSearchServiceSearchHashtagsProcedure = "/avion.search.v1.HashtagSearchService/SearchHashtags"
	// HashtagSearchServiceSearchDropsByHashtagProcedure is the fully-qualified name of the
	// HashtagSearchService's SearchDropsByHashtag RPC.
	HashtagSearchServiceSearchDropsByHashtagProcedure = "/avion.search.v1.HashtagSearchService/SearchDropsByHashtag"
	// HashtagSearchServiceGetRelatedHashtagsProcedure is the fully-qualified name of the
	// HashtagSearchService's GetRelatedHashtags RPC.
	HashtagSearchServiceGetRelatedHashtagsProcedure = "/avion.search.v1.HashtagSearchService/GetRelatedHashtags"
	// HashtagSearchServiceGetHashtagStatsProcedure is the fully-qualified name of the
	// HashtagSearchService's GetHashtagStats RPC.
	HashtagSearchServiceGetHashtagStatsProcedure = "/avion.search.v1.HashtagSearchService/GetHashtagStats"
	// SearchIndexServiceUpdateIndexProcedure is the fully-qualified name of the SearchIndexService's
	// UpdateIndex RPC.
	SearchIndexServiceUpdateIndexProcedure = "/avion.search.v1.SearchIndexService/UpdateIndex"
	// SearchIndexServiceDeleteFromIndexProcedure is the fully-qualified name of the
	// SearchIndexService's DeleteFromIndex RPC.
	SearchIndexServiceDeleteFromIndexProcedure = "/avion.search.v1.SearchIndexService/DeleteFromIndex"
	// SearchIndexServiceRebuildIndexProcedure is the fully-qualified name of the SearchIndexService's
	// RebuildIndex RPC.
	SearchIndexServiceRebuildIndexProcedure = "/avion.search.v1.SearchIndexService/RebuildIndex"
	// SearchIndexServiceGetIndexStatsProcedure is the fully-qualified name of the SearchIndexService's
	// GetIndexStats RPC.
	SearchIndexServiceGetIndexStatsProcedure = "/avion.search.v1.SearchIndexService/GetIndexStats"
	// SearchIndexServiceOptimizeIndexProcedure is the fully-qualified name of the SearchIndexService's
	// OptimizeIndex RPC.
	SearchIndexServiceOptimizeIndexProcedure = "/avion.search.v1.SearchIndexService/OptimizeIndex"
)

// SearchServiceClient is a client for the avion.search.v1.SearchService service.
type SearchServiceClient interface {
	// 汎用検索
	// ユーザー、Drop、ハッシュタグを横断的に検索
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// オートコンプリート
	// 検索クエリ入力中のサジェスト表示
	Autocomplete(context.Context, *connect.Request[v1.AutocompleteRequest]) (*connect.Response[v1.AutocompleteResponse], error)
	// トレンド取得
	// 現在のトレンドハッシュタグ、トピック、ユーザーを取得
	GetTrending(context.Context, *connect.Request[v1.GetTrendingRequest]) (*connect.Response[v1.GetTrendingResponse], error)
	// 関連検索取得
	// 指定したクエリに関連する検索候補を取得
	GetRelatedSearches(context.Context, *connect.Request[v1.GetRelatedSearchesRequest]) (*connect.Response[v1.GetRelatedSearchesResponse], error)
	// 検索履歴取得
	// ユーザーの検索履歴を取得
	GetSearchHistory(context.Context, *connect.Request[v1.GetSearchHistoryRequest]) (*connect.Response[v1.GetSearchHistoryResponse], error)
	// 検索履歴削除
	// ユーザーの検索履歴を削除
	DeleteSearchHistory(context.Context, *connect.Request[v1.DeleteSearchHistoryRequest]) (*connect.Response[v1.DeleteSearchHistoryResponse], error)
	// 保存済み検索作成
	// 検索条件を保存して後で再利用可能にする
	CreateSavedSearch(context.Context, *connect.Request[v1.CreateSavedSearchRequest]) (*connect.Response[v1.CreateSavedSearchResponse], error)
	// 保存済み検索一覧取得
	// ユーザーの保存済み検索を一覧取得
	ListSavedSearches(context.Context, *connect.Request[v1.ListSavedSearchesRequest]) (*connect.Response[v1.ListSavedSearchesResponse], error)
	// 保存済み検索削除
	// 保存済み検索を削除
	DeleteSavedSearch(context.Context, *connect.Request[v1.DeleteSavedSearchRequest]) (*connect.Response[v1.DeleteSavedSearchResponse], error)
}

// NewSearchServiceClient constructs a client for the avion.search.v1.SearchService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSearchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SearchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	searchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("SearchService").Methods()
	return &searchServiceClient{
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+SearchServiceSearchProcedure,
			connect.WithSchema(searchServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		autocomplete: connect.NewClient[v1.AutocompleteRequest, v1.AutocompleteResponse](
			httpClient,
			baseURL+SearchServiceAutocompleteProcedure,
			connect.WithSchema(searchServiceMethods.ByName("Autocomplete")),
			connect.WithClientOptions(opts...),
		),
		getTrending: connect.NewClient[v1.GetTrendingRequest, v1.GetTrendingResponse](
			httpClient,
			baseURL+SearchServiceGetTrendingProcedure,
			connect.WithSchema(searchServiceMethods.ByName("GetTrending")),
			connect.WithClientOptions(opts...),
		),
		getRelatedSearches: connect.NewClient[v1.GetRelatedSearchesRequest, v1.GetRelatedSearchesResponse](
			httpClient,
			baseURL+SearchServiceGetRelatedSearchesProcedure,
			connect.WithSchema(searchServiceMethods.ByName("GetRelatedSearches")),
			connect.WithClientOptions(opts...),
		),
		getSearchHistory: connect.NewClient[v1.GetSearchHistoryRequest, v1.GetSearchHistoryResponse](
			httpClient,
			baseURL+SearchServiceGetSearchHistoryProcedure,
			connect.WithSchema(searchServiceMethods.ByName("GetSearchHistory")),
			connect.WithClientOptions(opts...),
		),
		deleteSearchHistory: connect.NewClient[v1.DeleteSearchHistoryRequest, v1.DeleteSearchHistoryResponse](
			httpClient,
			baseURL+SearchServiceDeleteSearchHistoryProcedure,
			connect.WithSchema(searchServiceMethods.ByName("DeleteSearchHistory")),
			connect.WithClientOptions(opts...),
		),
		createSavedSearch: connect.NewClient[v1.CreateSavedSearchRequest, v1.CreateSavedSearchResponse](
			httpClient,
			baseURL+SearchServiceCreateSavedSearchProcedure,
			connect.WithSchema(searchServiceMethods.ByName("CreateSavedSearch")),
			connect.WithClientOptions(opts...),
		),
		listSavedSearches: connect.NewClient[v1.ListSavedSearchesRequest, v1.ListSavedSearchesResponse](
			httpClient,
			baseURL+SearchServiceListSavedSearchesProcedure,
			connect.WithSchema(searchServiceMethods.ByName("ListSavedSearches")),
			connect.WithClientOptions(opts...),
		),
		deleteSavedSearch: connect.NewClient[v1.DeleteSavedSearchRequest, v1.DeleteSavedSearchResponse](
			httpClient,
			baseURL+SearchServiceDeleteSavedSearchProcedure,
			connect.WithSchema(searchServiceMethods.ByName("DeleteSavedSearch")),
			connect.WithClientOptions(opts...),
		),
	}
}

// searchServiceClient implements SearchServiceClient.
type searchServiceClient struct {
	search              *connect.Client[v1.SearchRequest, v1.SearchResponse]
	autocomplete        *connect.Client[v1.AutocompleteRequest, v1.AutocompleteResponse]
	getTrending         *connect.Client[v1.GetTrendingRequest, v1.GetTrendingResponse]
	getRelatedSearches  *connect.Client[v1.GetRelatedSearchesRequest, v1.GetRelatedSearchesResponse]
	getSearchHistory    *connect.Client[v1.GetSearchHistoryRequest, v1.GetSearchHistoryResponse]
	deleteSearchHistory *connect.Client[v1.DeleteSearchHistoryRequest, v1.DeleteSearchHistoryResponse]
	createSavedSearch   *connect.Client[v1.CreateSavedSearchRequest, v1.CreateSavedSearchResponse]
	listSavedSearches   *connect.Client[v1.ListSavedSearchesRequest, v1.ListSavedSearchesResponse]
	deleteSavedSearch   *connect.Client[v1.DeleteSavedSearchRequest, v1.DeleteSavedSearchResponse]
}

// Search calls avion.search.v1.SearchService.Search.
func (c *searchServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// Autocomplete calls avion.search.v1.SearchService.Autocomplete.
func (c *searchServiceClient) Autocomplete(ctx context.Context, req *connect.Request[v1.AutocompleteRequest]) (*connect.Response[v1.AutocompleteResponse], error) {
	return c.autocomplete.CallUnary(ctx, req)
}

// GetTrending calls avion.search.v1.SearchService.GetTrending.
func (c *searchServiceClient) GetTrending(ctx context.Context, req *connect.Request[v1.GetTrendingRequest]) (*connect.Response[v1.GetTrendingResponse], error) {
	return c.getTrending.CallUnary(ctx, req)
}

// GetRelatedSearches calls avion.search.v1.SearchService.GetRelatedSearches.
func (c *searchServiceClient) GetRelatedSearches(ctx context.Context, req *connect.Request[v1.GetRelatedSearchesRequest]) (*connect.Response[v1.GetRelatedSearchesResponse], error) {
	return c.getRelatedSearches.CallUnary(ctx, req)
}

// GetSearchHistory calls avion.search.v1.SearchService.GetSearchHistory.
func (c *searchServiceClient) GetSearchHistory(ctx context.Context, req *connect.Request[v1.GetSearchHistoryRequest]) (*connect.Response[v1.GetSearchHistoryResponse], error) {
	return c.getSearchHistory.CallUnary(ctx, req)
}

// DeleteSearchHistory calls avion.search.v1.SearchService.DeleteSearchHistory.
func (c *searchServiceClient) DeleteSearchHistory(ctx context.Context, req *connect.Request[v1.DeleteSearchHistoryRequest]) (*connect.Response[v1.DeleteSearchHistoryResponse], error) {
	return c.deleteSearchHistory.CallUnary(ctx, req)
}

// CreateSavedSearch calls avion.search.v1.SearchService.CreateSavedSearch.
func (c *searchServiceClient) CreateSavedSearch(ctx context.Context, req *connect.Request[v1.CreateSavedSearchRequest]) (*connect.Response[v1.CreateSavedSearchResponse], error) {
	return c.createSavedSearch.CallUnary(ctx, req)
}

// ListSavedSearches calls avion.search.v1.SearchService.ListSavedSearches.
func (c *searchServiceClient) ListSavedSearches(ctx context.Context, req *connect.Request[v1.ListSavedSearchesRequest]) (*connect.Response[v1.ListSavedSearchesResponse], error) {
	return c.listSavedSearches.CallUnary(ctx, req)
}

// DeleteSavedSearch calls avion.search.v1.SearchService.DeleteSavedSearch.
func (c *searchServiceClient) DeleteSavedSearch(ctx context.Context, req *connect.Request[v1.DeleteSavedSearchRequest]) (*connect.Response[v1.DeleteSavedSearchResponse], error) {
	return c.deleteSavedSearch.CallUnary(ctx, req)
}

// SearchServiceHandler is an implementation of the avion.search.v1.SearchService service.
type SearchServiceHandler interface {
	// 汎用検索
	// ユーザー、Drop、ハッシュタグを横断的に検索
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// オートコンプリート
	// 検索クエリ入力中のサジェスト表示
	Autocomplete(context.Context, *connect.Request[v1.AutocompleteRequest]) (*connect.Response[v1.AutocompleteResponse], error)
	// トレンド取得
	// 現在のトレンドハッシュタグ、トピック、ユーザーを取得
	GetTrending(context.Context, *connect.Request[v1.GetTrendingRequest]) (*connect.Response[v1.GetTrendingResponse], error)
	// 関連検索取得
	// 指定したクエリに関連する検索候補を取得
	GetRelatedSearches(context.Context, *connect.Request[v1.GetRelatedSearchesRequest]) (*connect.Response[v1.GetRelatedSearchesResponse], error)
	// 検索履歴取得
	// ユーザーの検索履歴を取得
	GetSearchHistory(context.Context, *connect.Request[v1.GetSearchHistoryRequest]) (*connect.Response[v1.GetSearchHistoryResponse], error)
	// 検索履歴削除
	// ユーザーの検索履歴を削除
	DeleteSearchHistory(context.Context, *connect.Request[v1.DeleteSearchHistoryRequest]) (*connect.Response[v1.DeleteSearchHistoryResponse], error)
	// 保存済み検索作成
	// 検索条件を保存して後で再利用可能にする
	CreateSavedSearch(context.Context, *connect.Request[v1.CreateSavedSearchRequest]) (*connect.Response[v1.CreateSavedSearchResponse], error)
	// 保存済み検索一覧取得
	// ユーザーの保存済み検索を一覧取得
	ListSavedSearches(context.Context, *connect.Request[v1.ListSavedSearchesRequest]) (*connect.Response[v1.ListSavedSearchesResponse], error)
	// 保存済み検索削除
	// 保存済み検索を削除
	DeleteSavedSearch(context.Context, *connect.Request[v1.DeleteSavedSearchRequest]) (*connect.Response[v1.DeleteSavedSearchResponse], error)
}

// NewSearchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSearchServiceHandler(svc SearchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	searchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("SearchService").Methods()
	searchServiceSearchHandler := connect.NewUnaryHandler(
		SearchServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(searchServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceAutocompleteHandler := connect.NewUnaryHandler(
		SearchServiceAutocompleteProcedure,
		svc.Autocomplete,
		connect.WithSchema(searchServiceMethods.ByName("Autocomplete")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceGetTrendingHandler := connect.NewUnaryHandler(
		SearchServiceGetTrendingProcedure,
		svc.GetTrending,
		connect.WithSchema(searchServiceMethods.ByName("GetTrending")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceGetRelatedSearchesHandler := connect.NewUnaryHandler(
		SearchServiceGetRelatedSearchesProcedure,
		svc.GetRelatedSearches,
		connect.WithSchema(searchServiceMethods.ByName("GetRelatedSearches")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceGetSearchHistoryHandler := connect.NewUnaryHandler(
		SearchServiceGetSearchHistoryProcedure,
		svc.GetSearchHistory,
		connect.WithSchema(searchServiceMethods.ByName("GetSearchHistory")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceDeleteSearchHistoryHandler := connect.NewUnaryHandler(
		SearchServiceDeleteSearchHistoryProcedure,
		svc.DeleteSearchHistory,
		connect.WithSchema(searchServiceMethods.ByName("DeleteSearchHistory")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceCreateSavedSearchHandler := connect.NewUnaryHandler(
		SearchServiceCreateSavedSearchProcedure,
		svc.CreateSavedSearch,
		connect.WithSchema(searchServiceMethods.ByName("CreateSavedSearch")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceListSavedSearchesHandler := connect.NewUnaryHandler(
		SearchServiceListSavedSearchesProcedure,
		svc.ListSavedSearches,
		connect.WithSchema(searchServiceMethods.ByName("ListSavedSearches")),
		connect.WithHandlerOptions(opts...),
	)
	searchServiceDeleteSavedSearchHandler := connect.NewUnaryHandler(
		SearchServiceDeleteSavedSearchProcedure,
		svc.DeleteSavedSearch,
		connect.WithSchema(searchServiceMethods.ByName("DeleteSavedSearch")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.search.v1.SearchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SearchServiceSearchProcedure:
			searchServiceSearchHandler.ServeHTTP(w, r)
		case SearchServiceAutocompleteProcedure:
			searchServiceAutocompleteHandler.ServeHTTP(w, r)
		case SearchServiceGetTrendingProcedure:
			searchServiceGetTrendingHandler.ServeHTTP(w, r)
		case SearchServiceGetRelatedSearchesProcedure:
			searchServiceGetRelatedSearchesHandler.ServeHTTP(w, r)
		case SearchServiceGetSearchHistoryProcedure:
			searchServiceGetSearchHistoryHandler.ServeHTTP(w, r)
		case SearchServiceDeleteSearchHistoryProcedure:
			searchServiceDeleteSearchHistoryHandler.ServeHTTP(w, r)
		case SearchServiceCreateSavedSearchProcedure:
			searchServiceCreateSavedSearchHandler.ServeHTTP(w, r)
		case SearchServiceListSavedSearchesProcedure:
			searchServiceListSavedSearchesHandler.ServeHTTP(w, r)
		case SearchServiceDeleteSavedSearchProcedure:
			searchServiceDeleteSavedSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSearchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSearchServiceHandler struct{}

func (UnimplementedSearchServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.Search is not implemented"))
}

func (UnimplementedSearchServiceHandler) Autocomplete(context.Context, *connect.Request[v1.AutocompleteRequest]) (*connect.Response[v1.AutocompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.Autocomplete is not implemented"))
}

func (UnimplementedSearchServiceHandler) GetTrending(context.Context, *connect.Request[v1.GetTrendingRequest]) (*connect.Response[v1.GetTrendingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.GetTrending is not implemented"))
}

func (UnimplementedSearchServiceHandler) GetRelatedSearches(context.Context, *connect.Request[v1.GetRelatedSearchesRequest]) (*connect.Response[v1.GetRelatedSearchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.GetRelatedSearches is not implemented"))
}

func (UnimplementedSearchServiceHandler) GetSearchHistory(context.Context, *connect.Request[v1.GetSearchHistoryRequest]) (*connect.Response[v1.GetSearchHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.GetSearchHistory is not implemented"))
}

func (UnimplementedSearchServiceHandler) DeleteSearchHistory(context.Context, *connect.Request[v1.DeleteSearchHistoryRequest]) (*connect.Response[v1.DeleteSearchHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.DeleteSearchHistory is not implemented"))
}

func (UnimplementedSearchServiceHandler) CreateSavedSearch(context.Context, *connect.Request[v1.CreateSavedSearchRequest]) (*connect.Response[v1.CreateSavedSearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.CreateSavedSearch is not implemented"))
}

func (UnimplementedSearchServiceHandler) ListSavedSearches(context.Context, *connect.Request[v1.ListSavedSearchesRequest]) (*connect.Response[v1.ListSavedSearchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.ListSavedSearches is not implemented"))
}

func (UnimplementedSearchServiceHandler) DeleteSavedSearch(context.Context, *connect.Request[v1.DeleteSavedSearchRequest]) (*connect.Response[v1.DeleteSavedSearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchService.DeleteSavedSearch is not implemented"))
}

// UserSearchServiceClient is a client for the avion.search.v1.UserSearchService service.
type UserSearchServiceClient interface {
	// ユーザー検索
	// ユーザー名、表示名、自己紹介文から検索
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	// 類似ユーザー検索
	// 指定ユーザーに類似したユーザーを検索
	SearchSimilarUsers(context.Context, *connect.Request[v1.SearchSimilarUsersRequest]) (*connect.Response[v1.SearchSimilarUsersResponse], error)
	// ユーザー推薦
	// ユーザーの興味・関心に基づいて推薦
	GetUserRecommendations(context.Context, *connect.Request[v1.GetUserRecommendationsRequest]) (*connect.Response[v1.GetUserRecommendationsResponse], error)
}

// NewUserSearchServiceClient constructs a client for the avion.search.v1.UserSearchService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserSearchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserSearchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("UserSearchService").Methods()
	return &userSearchServiceClient{
		searchUsers: connect.NewClient[v1.SearchUsersRequest, v1.SearchUsersResponse](
			httpClient,
			baseURL+UserSearchServiceSearchUsersProcedure,
			connect.WithSchema(userSearchServiceMethods.ByName("SearchUsers")),
			connect.WithClientOptions(opts...),
		),
		searchSimilarUsers: connect.NewClient[v1.SearchSimilarUsersRequest, v1.SearchSimilarUsersResponse](
			httpClient,
			baseURL+UserSearchServiceSearchSimilarUsersProcedure,
			connect.WithSchema(userSearchServiceMethods.ByName("SearchSimilarUsers")),
			connect.WithClientOptions(opts...),
		),
		getUserRecommendations: connect.NewClient[v1.GetUserRecommendationsRequest, v1.GetUserRecommendationsResponse](
			httpClient,
			baseURL+UserSearchServiceGetUserRecommendationsProcedure,
			connect.WithSchema(userSearchServiceMethods.ByName("GetUserRecommendations")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userSearchServiceClient implements UserSearchServiceClient.
type userSearchServiceClient struct {
	searchUsers            *connect.Client[v1.SearchUsersRequest, v1.SearchUsersResponse]
	searchSimilarUsers     *connect.Client[v1.SearchSimilarUsersRequest, v1.SearchSimilarUsersResponse]
	getUserRecommendations *connect.Client[v1.GetUserRecommendationsRequest, v1.GetUserRecommendationsResponse]
}

// SearchUsers calls avion.search.v1.UserSearchService.SearchUsers.
func (c *userSearchServiceClient) SearchUsers(ctx context.Context, req *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// SearchSimilarUsers calls avion.search.v1.UserSearchService.SearchSimilarUsers.
func (c *userSearchServiceClient) SearchSimilarUsers(ctx context.Context, req *connect.Request[v1.SearchSimilarUsersRequest]) (*connect.Response[v1.SearchSimilarUsersResponse], error) {
	return c.searchSimilarUsers.CallUnary(ctx, req)
}

// GetUserRecommendations calls avion.search.v1.UserSearchService.GetUserRecommendations.
func (c *userSearchServiceClient) GetUserRecommendations(ctx context.Context, req *connect.Request[v1.GetUserRecommendationsRequest]) (*connect.Response[v1.GetUserRecommendationsResponse], error) {
	return c.getUserRecommendations.CallUnary(ctx, req)
}

// UserSearchServiceHandler is an implementation of the avion.search.v1.UserSearchService service.
type UserSearchServiceHandler interface {
	// ユーザー検索
	// ユーザー名、表示名、自己紹介文から検索
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	// 類似ユーザー検索
	// 指定ユーザーに類似したユーザーを検索
	SearchSimilarUsers(context.Context, *connect.Request[v1.SearchSimilarUsersRequest]) (*connect.Response[v1.SearchSimilarUsersResponse], error)
	// ユーザー推薦
	// ユーザーの興味・関心に基づいて推薦
	GetUserRecommendations(context.Context, *connect.Request[v1.GetUserRecommendationsRequest]) (*connect.Response[v1.GetUserRecommendationsResponse], error)
}

// NewUserSearchServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserSearchServiceHandler(svc UserSearchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("UserSearchService").Methods()
	userSearchServiceSearchUsersHandler := connect.NewUnaryHandler(
		UserSearchServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(userSearchServiceMethods.ByName("SearchUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userSearchServiceSearchSimilarUsersHandler := connect.NewUnaryHandler(
		UserSearchServiceSearchSimilarUsersProcedure,
		svc.SearchSimilarUsers,
		connect.WithSchema(userSearchServiceMethods.ByName("SearchSimilarUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userSearchServiceGetUserRecommendationsHandler := connect.NewUnaryHandler(
		UserSearchServiceGetUserRecommendationsProcedure,
		svc.GetUserRecommendations,
		connect.WithSchema(userSearchServiceMethods.ByName("GetUserRecommendations")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.search.v1.UserSearchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserSearchServiceSearchUsersProcedure:
			userSearchServiceSearchUsersHandler.ServeHTTP(w, r)
		case UserSearchServiceSearchSimilarUsersProcedure:
			userSearchServiceSearchSimilarUsersHandler.ServeHTTP(w, r)
		case UserSearchServiceGetUserRecommendationsProcedure:
			userSearchServiceGetUserRecommendationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserSearchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserSearchServiceHandler struct{}

func (UnimplementedUserSearchServiceHandler) SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.UserSearchService.SearchUsers is not implemented"))
}

func (UnimplementedUserSearchServiceHandler) SearchSimilarUsers(context.Context, *connect.Request[v1.SearchSimilarUsersRequest]) (*connect.Response[v1.SearchSimilarUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.UserSearchService.SearchSimilarUsers is not implemented"))
}

func (UnimplementedUserSearchServiceHandler) GetUserRecommendations(context.Context, *connect.Request[v1.GetUserRecommendationsRequest]) (*connect.Response[v1.GetUserRecommendationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.UserSearchService.GetUserRecommendations is not implemented"))
}

// DropSearchServiceClient is a client for the avion.search.v1.DropSearchService service.
type DropSearchServiceClient interface {
	// Drop検索
	// Drop内容から全文検索
	SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error)
	// メディア検索
	// メディアを含むDropを検索
	SearchMediaDrops(context.Context, *connect.Request[v1.SearchMediaDropsRequest]) (*connect.Response[v1.SearchMediaDropsResponse], error)
	// 類似Drop検索
	// 指定Dropに類似した内容のDropを検索
	SearchSimilarDrops(context.Context, *connect.Request[v1.SearchSimilarDropsRequest]) (*connect.Response[v1.SearchSimilarDropsResponse], error)
}

// NewDropSearchServiceClient constructs a client for the avion.search.v1.DropSearchService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDropSearchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DropSearchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dropSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("DropSearchService").Methods()
	return &dropSearchServiceClient{
		searchDrops: connect.NewClient[v1.SearchDropsRequest, v1.SearchDropsResponse](
			httpClient,
			baseURL+DropSearchServiceSearchDropsProcedure,
			connect.WithSchema(dropSearchServiceMethods.ByName("SearchDrops")),
			connect.WithClientOptions(opts...),
		),
		searchMediaDrops: connect.NewClient[v1.SearchMediaDropsRequest, v1.SearchMediaDropsResponse](
			httpClient,
			baseURL+DropSearchServiceSearchMediaDropsProcedure,
			connect.WithSchema(dropSearchServiceMethods.ByName("SearchMediaDrops")),
			connect.WithClientOptions(opts...),
		),
		searchSimilarDrops: connect.NewClient[v1.SearchSimilarDropsRequest, v1.SearchSimilarDropsResponse](
			httpClient,
			baseURL+DropSearchServiceSearchSimilarDropsProcedure,
			connect.WithSchema(dropSearchServiceMethods.ByName("SearchSimilarDrops")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dropSearchServiceClient implements DropSearchServiceClient.
type dropSearchServiceClient struct {
	searchDrops        *connect.Client[v1.SearchDropsRequest, v1.SearchDropsResponse]
	searchMediaDrops   *connect.Client[v1.SearchMediaDropsRequest, v1.SearchMediaDropsResponse]
	searchSimilarDrops *connect.Client[v1.SearchSimilarDropsRequest, v1.SearchSimilarDropsResponse]
}

// SearchDrops calls avion.search.v1.DropSearchService.SearchDrops.
func (c *dropSearchServiceClient) SearchDrops(ctx context.Context, req *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error) {
	return c.searchDrops.CallUnary(ctx, req)
}

// SearchMediaDrops calls avion.search.v1.DropSearchService.SearchMediaDrops.
func (c *dropSearchServiceClient) SearchMediaDrops(ctx context.Context, req *connect.Request[v1.SearchMediaDropsRequest]) (*connect.Response[v1.SearchMediaDropsResponse], error) {
	return c.searchMediaDrops.CallUnary(ctx, req)
}

// SearchSimilarDrops calls avion.search.v1.DropSearchService.SearchSimilarDrops.
func (c *dropSearchServiceClient) SearchSimilarDrops(ctx context.Context, req *connect.Request[v1.SearchSimilarDropsRequest]) (*connect.Response[v1.SearchSimilarDropsResponse], error) {
	return c.searchSimilarDrops.CallUnary(ctx, req)
}

// DropSearchServiceHandler is an implementation of the avion.search.v1.DropSearchService service.
type DropSearchServiceHandler interface {
	// Drop検索
	// Drop内容から全文検索
	SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error)
	// メディア検索
	// メディアを含むDropを検索
	SearchMediaDrops(context.Context, *connect.Request[v1.SearchMediaDropsRequest]) (*connect.Response[v1.SearchMediaDropsResponse], error)
	// 類似Drop検索
	// 指定Dropに類似した内容のDropを検索
	SearchSimilarDrops(context.Context, *connect.Request[v1.SearchSimilarDropsRequest]) (*connect.Response[v1.SearchSimilarDropsResponse], error)
}

// NewDropSearchServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDropSearchServiceHandler(svc DropSearchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dropSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("DropSearchService").Methods()
	dropSearchServiceSearchDropsHandler := connect.NewUnaryHandler(
		DropSearchServiceSearchDropsProcedure,
		svc.SearchDrops,
		connect.WithSchema(dropSearchServiceMethods.ByName("SearchDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropSearchServiceSearchMediaDropsHandler := connect.NewUnaryHandler(
		DropSearchServiceSearchMediaDropsProcedure,
		svc.SearchMediaDrops,
		connect.WithSchema(dropSearchServiceMethods.ByName("SearchMediaDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropSearchServiceSearchSimilarDropsHandler := connect.NewUnaryHandler(
		DropSearchServiceSearchSimilarDropsProcedure,
		svc.SearchSimilarDrops,
		connect.WithSchema(dropSearchServiceMethods.ByName("SearchSimilarDrops")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.search.v1.DropSearchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DropSearchServiceSearchDropsProcedure:
			dropSearchServiceSearchDropsHandler.ServeHTTP(w, r)
		case DropSearchServiceSearchMediaDropsProcedure:
			dropSearchServiceSearchMediaDropsHandler.ServeHTTP(w, r)
		case DropSearchServiceSearchSimilarDropsProcedure:
			dropSearchServiceSearchSimilarDropsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDropSearchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDropSearchServiceHandler struct{}

func (UnimplementedDropSearchServiceHandler) SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.DropSearchService.SearchDrops is not implemented"))
}

func (UnimplementedDropSearchServiceHandler) SearchMediaDrops(context.Context, *connect.Request[v1.SearchMediaDropsRequest]) (*connect.Response[v1.SearchMediaDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.DropSearchService.SearchMediaDrops is not implemented"))
}

func (UnimplementedDropSearchServiceHandler) SearchSimilarDrops(context.Context, *connect.Request[v1.SearchSimilarDropsRequest]) (*connect.Response[v1.SearchSimilarDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.DropSearchService.SearchSimilarDrops is not implemented"))
}

// HashtagSearchServiceClient is a client for the avion.search.v1.HashtagSearchService service.
type HashtagSearchServiceClient interface {
	// ハッシュタグ検索
	// ハッシュタグを検索
	SearchHashtags(context.Context, *connect.Request[v1.SearchHashtagsRequest]) (*connect.Response[v1.SearchHashtagsResponse], error)
	// ハッシュタグ付きDrop検索
	// 特定のハッシュタグを含むDropを検索
	SearchDropsByHashtag(context.Context, *connect.Request[v1.SearchDropsByHashtagRequest]) (*connect.Response[v1.SearchDropsByHashtagResponse], error)
	// 関連ハッシュタグ取得
	// 指定ハッシュタグに関連するハッシュタグを取得
	GetRelatedHashtags(context.Context, *connect.Request[v1.GetRelatedHashtagsRequest]) (*connect.Response[v1.GetRelatedHashtagsResponse], error)
	// ハッシュタグ統計取得
	// ハッシュタグの使用統計を取得
	GetHashtagStats(context.Context, *connect.Request[v1.GetHashtagStatsRequest]) (*connect.Response[v1.GetHashtagStatsResponse], error)
}

// NewHashtagSearchServiceClient constructs a client for the avion.search.v1.HashtagSearchService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHashtagSearchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HashtagSearchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hashtagSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("HashtagSearchService").Methods()
	return &hashtagSearchServiceClient{
		searchHashtags: connect.NewClient[v1.SearchHashtagsRequest, v1.SearchHashtagsResponse](
			httpClient,
			baseURL+HashtagSearchServiceSearchHashtagsProcedure,
			connect.WithSchema(hashtagSearchServiceMethods.ByName("SearchHashtags")),
			connect.WithClientOptions(opts...),
		),
		searchDropsByHashtag: connect.NewClient[v1.SearchDropsByHashtagRequest, v1.SearchDropsByHashtagResponse](
			httpClient,
			baseURL+HashtagSearchServiceSearchDropsByHashtagProcedure,
			connect.WithSchema(hashtagSearchServiceMethods.ByName("SearchDropsByHashtag")),
			connect.WithClientOptions(opts...),
		),
		getRelatedHashtags: connect.NewClient[v1.GetRelatedHashtagsRequest, v1.GetRelatedHashtagsResponse](
			httpClient,
			baseURL+HashtagSearchServiceGetRelatedHashtagsProcedure,
			connect.WithSchema(hashtagSearchServiceMethods.ByName("GetRelatedHashtags")),
			connect.WithClientOptions(opts...),
		),
		getHashtagStats: connect.NewClient[v1.GetHashtagStatsRequest, v1.GetHashtagStatsResponse](
			httpClient,
			baseURL+HashtagSearchServiceGetHashtagStatsProcedure,
			connect.WithSchema(hashtagSearchServiceMethods.ByName("GetHashtagStats")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hashtagSearchServiceClient implements HashtagSearchServiceClient.
type hashtagSearchServiceClient struct {
	searchHashtags       *connect.Client[v1.SearchHashtagsRequest, v1.SearchHashtagsResponse]
	searchDropsByHashtag *connect.Client[v1.SearchDropsByHashtagRequest, v1.SearchDropsByHashtagResponse]
	getRelatedHashtags   *connect.Client[v1.GetRelatedHashtagsRequest, v1.GetRelatedHashtagsResponse]
	getHashtagStats      *connect.Client[v1.GetHashtagStatsRequest, v1.GetHashtagStatsResponse]
}

// SearchHashtags calls avion.search.v1.HashtagSearchService.SearchHashtags.
func (c *hashtagSearchServiceClient) SearchHashtags(ctx context.Context, req *connect.Request[v1.SearchHashtagsRequest]) (*connect.Response[v1.SearchHashtagsResponse], error) {
	return c.searchHashtags.CallUnary(ctx, req)
}

// SearchDropsByHashtag calls avion.search.v1.HashtagSearchService.SearchDropsByHashtag.
func (c *hashtagSearchServiceClient) SearchDropsByHashtag(ctx context.Context, req *connect.Request[v1.SearchDropsByHashtagRequest]) (*connect.Response[v1.SearchDropsByHashtagResponse], error) {
	return c.searchDropsByHashtag.CallUnary(ctx, req)
}

// GetRelatedHashtags calls avion.search.v1.HashtagSearchService.GetRelatedHashtags.
func (c *hashtagSearchServiceClient) GetRelatedHashtags(ctx context.Context, req *connect.Request[v1.GetRelatedHashtagsRequest]) (*connect.Response[v1.GetRelatedHashtagsResponse], error) {
	return c.getRelatedHashtags.CallUnary(ctx, req)
}

// GetHashtagStats calls avion.search.v1.HashtagSearchService.GetHashtagStats.
func (c *hashtagSearchServiceClient) GetHashtagStats(ctx context.Context, req *connect.Request[v1.GetHashtagStatsRequest]) (*connect.Response[v1.GetHashtagStatsResponse], error) {
	return c.getHashtagStats.CallUnary(ctx, req)
}

// HashtagSearchServiceHandler is an implementation of the avion.search.v1.HashtagSearchService
// service.
type HashtagSearchServiceHandler interface {
	// ハッシュタグ検索
	// ハッシュタグを検索
	SearchHashtags(context.Context, *connect.Request[v1.SearchHashtagsRequest]) (*connect.Response[v1.SearchHashtagsResponse], error)
	// ハッシュタグ付きDrop検索
	// 特定のハッシュタグを含むDropを検索
	SearchDropsByHashtag(context.Context, *connect.Request[v1.SearchDropsByHashtagRequest]) (*connect.Response[v1.SearchDropsByHashtagResponse], error)
	// 関連ハッシュタグ取得
	// 指定ハッシュタグに関連するハッシュタグを取得
	GetRelatedHashtags(context.Context, *connect.Request[v1.GetRelatedHashtagsRequest]) (*connect.Response[v1.GetRelatedHashtagsResponse], error)
	// ハッシュタグ統計取得
	// ハッシュタグの使用統計を取得
	GetHashtagStats(context.Context, *connect.Request[v1.GetHashtagStatsRequest]) (*connect.Response[v1.GetHashtagStatsResponse], error)
}

// NewHashtagSearchServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHashtagSearchServiceHandler(svc HashtagSearchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hashtagSearchServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("HashtagSearchService").Methods()
	hashtagSearchServiceSearchHashtagsHandler := connect.NewUnaryHandler(
		HashtagSearchServiceSearchHashtagsProcedure,
		svc.SearchHashtags,
		connect.WithSchema(hashtagSearchServiceMethods.ByName("SearchHashtags")),
		connect.WithHandlerOptions(opts...),
	)
	hashtagSearchServiceSearchDropsByHashtagHandler := connect.NewUnaryHandler(
		HashtagSearchServiceSearchDropsByHashtagProcedure,
		svc.SearchDropsByHashtag,
		connect.WithSchema(hashtagSearchServiceMethods.ByName("SearchDropsByHashtag")),
		connect.WithHandlerOptions(opts...),
	)
	hashtagSearchServiceGetRelatedHashtagsHandler := connect.NewUnaryHandler(
		HashtagSearchServiceGetRelatedHashtagsProcedure,
		svc.GetRelatedHashtags,
		connect.WithSchema(hashtagSearchServiceMethods.ByName("GetRelatedHashtags")),
		connect.WithHandlerOptions(opts...),
	)
	hashtagSearchServiceGetHashtagStatsHandler := connect.NewUnaryHandler(
		HashtagSearchServiceGetHashtagStatsProcedure,
		svc.GetHashtagStats,
		connect.WithSchema(hashtagSearchServiceMethods.ByName("GetHashtagStats")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.search.v1.HashtagSearchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HashtagSearchServiceSearchHashtagsProcedure:
			hashtagSearchServiceSearchHashtagsHandler.ServeHTTP(w, r)
		case HashtagSearchServiceSearchDropsByHashtagProcedure:
			hashtagSearchServiceSearchDropsByHashtagHandler.ServeHTTP(w, r)
		case HashtagSearchServiceGetRelatedHashtagsProcedure:
			hashtagSearchServiceGetRelatedHashtagsHandler.ServeHTTP(w, r)
		case HashtagSearchServiceGetHashtagStatsProcedure:
			hashtagSearchServiceGetHashtagStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHashtagSearchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHashtagSearchServiceHandler struct{}

func (UnimplementedHashtagSearchServiceHandler) SearchHashtags(context.Context, *connect.Request[v1.SearchHashtagsRequest]) (*connect.Response[v1.SearchHashtagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.HashtagSearchService.SearchHashtags is not implemented"))
}

func (UnimplementedHashtagSearchServiceHandler) SearchDropsByHashtag(context.Context, *connect.Request[v1.SearchDropsByHashtagRequest]) (*connect.Response[v1.SearchDropsByHashtagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.HashtagSearchService.SearchDropsByHashtag is not implemented"))
}

func (UnimplementedHashtagSearchServiceHandler) GetRelatedHashtags(context.Context, *connect.Request[v1.GetRelatedHashtagsRequest]) (*connect.Response[v1.GetRelatedHashtagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.HashtagSearchService.GetRelatedHashtags is not implemented"))
}

func (UnimplementedHashtagSearchServiceHandler) GetHashtagStats(context.Context, *connect.Request[v1.GetHashtagStatsRequest]) (*connect.Response[v1.GetHashtagStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.HashtagSearchService.GetHashtagStats is not implemented"))
}

// SearchIndexServiceClient is a client for the avion.search.v1.SearchIndexService service.
type SearchIndexServiceClient interface {
	// インデックス更新
	// 指定されたコンテンツのインデックスを更新
	UpdateIndex(context.Context, *connect.Request[v1.UpdateIndexRequest]) (*connect.Response[v1.UpdateIndexResponse], error)
	// インデックス削除
	// 指定されたコンテンツのインデックスを削除
	DeleteFromIndex(context.Context, *connect.Request[v1.DeleteFromIndexRequest]) (*connect.Response[v1.DeleteFromIndexResponse], error)
	// インデックス再構築
	// 全体または部分的なインデックスの再構築
	RebuildIndex(context.Context, *connect.Request[v1.RebuildIndexRequest]) (*connect.Response[v1.RebuildIndexResponse], error)
	// インデックス統計取得
	// インデックスの統計情報を取得
	GetIndexStats(context.Context, *connect.Request[v1.GetIndexStatsRequest]) (*connect.Response[v1.GetIndexStatsResponse], error)
	// インデックス最適化
	// インデックスの最適化を実行
	OptimizeIndex(context.Context, *connect.Request[v1.OptimizeIndexRequest]) (*connect.Response[v1.OptimizeIndexResponse], error)
}

// NewSearchIndexServiceClient constructs a client for the avion.search.v1.SearchIndexService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSearchIndexServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SearchIndexServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	searchIndexServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("SearchIndexService").Methods()
	return &searchIndexServiceClient{
		updateIndex: connect.NewClient[v1.UpdateIndexRequest, v1.UpdateIndexResponse](
			httpClient,
			baseURL+SearchIndexServiceUpdateIndexProcedure,
			connect.WithSchema(searchIndexServiceMethods.ByName("UpdateIndex")),
			connect.WithClientOptions(opts...),
		),
		deleteFromIndex: connect.NewClient[v1.DeleteFromIndexRequest, v1.DeleteFromIndexResponse](
			httpClient,
			baseURL+SearchIndexServiceDeleteFromIndexProcedure,
			connect.WithSchema(searchIndexServiceMethods.ByName("DeleteFromIndex")),
			connect.WithClientOptions(opts...),
		),
		rebuildIndex: connect.NewClient[v1.RebuildIndexRequest, v1.RebuildIndexResponse](
			httpClient,
			baseURL+SearchIndexServiceRebuildIndexProcedure,
			connect.WithSchema(searchIndexServiceMethods.ByName("RebuildIndex")),
			connect.WithClientOptions(opts...),
		),
		getIndexStats: connect.NewClient[v1.GetIndexStatsRequest, v1.GetIndexStatsResponse](
			httpClient,
			baseURL+SearchIndexServiceGetIndexStatsProcedure,
			connect.WithSchema(searchIndexServiceMethods.ByName("GetIndexStats")),
			connect.WithClientOptions(opts...),
		),
		optimizeIndex: connect.NewClient[v1.OptimizeIndexRequest, v1.OptimizeIndexResponse](
			httpClient,
			baseURL+SearchIndexServiceOptimizeIndexProcedure,
			connect.WithSchema(searchIndexServiceMethods.ByName("OptimizeIndex")),
			connect.WithClientOptions(opts...),
		),
	}
}

// searchIndexServiceClient implements SearchIndexServiceClient.
type searchIndexServiceClient struct {
	updateIndex     *connect.Client[v1.UpdateIndexRequest, v1.UpdateIndexResponse]
	deleteFromIndex *connect.Client[v1.DeleteFromIndexRequest, v1.DeleteFromIndexResponse]
	rebuildIndex    *connect.Client[v1.RebuildIndexRequest, v1.RebuildIndexResponse]
	getIndexStats   *connect.Client[v1.GetIndexStatsRequest, v1.GetIndexStatsResponse]
	optimizeIndex   *connect.Client[v1.OptimizeIndexRequest, v1.OptimizeIndexResponse]
}

// UpdateIndex calls avion.search.v1.SearchIndexService.UpdateIndex.
func (c *searchIndexServiceClient) UpdateIndex(ctx context.Context, req *connect.Request[v1.UpdateIndexRequest]) (*connect.Response[v1.UpdateIndexResponse], error) {
	return c.updateIndex.CallUnary(ctx, req)
}

// DeleteFromIndex calls avion.search.v1.SearchIndexService.DeleteFromIndex.
func (c *searchIndexServiceClient) DeleteFromIndex(ctx context.Context, req *connect.Request[v1.DeleteFromIndexRequest]) (*connect.Response[v1.DeleteFromIndexResponse], error) {
	return c.deleteFromIndex.CallUnary(ctx, req)
}

// RebuildIndex calls avion.search.v1.SearchIndexService.RebuildIndex.
func (c *searchIndexServiceClient) RebuildIndex(ctx context.Context, req *connect.Request[v1.RebuildIndexRequest]) (*connect.Response[v1.RebuildIndexResponse], error) {
	return c.rebuildIndex.CallUnary(ctx, req)
}

// GetIndexStats calls avion.search.v1.SearchIndexService.GetIndexStats.
func (c *searchIndexServiceClient) GetIndexStats(ctx context.Context, req *connect.Request[v1.GetIndexStatsRequest]) (*connect.Response[v1.GetIndexStatsResponse], error) {
	return c.getIndexStats.CallUnary(ctx, req)
}

// OptimizeIndex calls avion.search.v1.SearchIndexService.OptimizeIndex.
func (c *searchIndexServiceClient) OptimizeIndex(ctx context.Context, req *connect.Request[v1.OptimizeIndexRequest]) (*connect.Response[v1.OptimizeIndexResponse], error) {
	return c.optimizeIndex.CallUnary(ctx, req)
}

// SearchIndexServiceHandler is an implementation of the avion.search.v1.SearchIndexService service.
type SearchIndexServiceHandler interface {
	// インデックス更新
	// 指定されたコンテンツのインデックスを更新
	UpdateIndex(context.Context, *connect.Request[v1.UpdateIndexRequest]) (*connect.Response[v1.UpdateIndexResponse], error)
	// インデックス削除
	// 指定されたコンテンツのインデックスを削除
	DeleteFromIndex(context.Context, *connect.Request[v1.DeleteFromIndexRequest]) (*connect.Response[v1.DeleteFromIndexResponse], error)
	// インデックス再構築
	// 全体または部分的なインデックスの再構築
	RebuildIndex(context.Context, *connect.Request[v1.RebuildIndexRequest]) (*connect.Response[v1.RebuildIndexResponse], error)
	// インデックス統計取得
	// インデックスの統計情報を取得
	GetIndexStats(context.Context, *connect.Request[v1.GetIndexStatsRequest]) (*connect.Response[v1.GetIndexStatsResponse], error)
	// インデックス最適化
	// インデックスの最適化を実行
	OptimizeIndex(context.Context, *connect.Request[v1.OptimizeIndexRequest]) (*connect.Response[v1.OptimizeIndexResponse], error)
}

// NewSearchIndexServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSearchIndexServiceHandler(svc SearchIndexServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	searchIndexServiceMethods := v1.File_avion_search_v1_search_service_proto.Services().ByName("SearchIndexService").Methods()
	searchIndexServiceUpdateIndexHandler := connect.NewUnaryHandler(
		SearchIndexServiceUpdateIndexProcedure,
		svc.UpdateIndex,
		connect.WithSchema(searchIndexServiceMethods.ByName("UpdateIndex")),
		connect.WithHandlerOptions(opts...),
	)
	searchIndexServiceDeleteFromIndexHandler := connect.NewUnaryHandler(
		SearchIndexServiceDeleteFromIndexProcedure,
		svc.DeleteFromIndex,
		connect.WithSchema(searchIndexServiceMethods.ByName("DeleteFromIndex")),
		connect.WithHandlerOptions(opts...),
	)
	searchIndexServiceRebuildIndexHandler := connect.NewUnaryHandler(
		SearchIndexServiceRebuildIndexProcedure,
		svc.RebuildIndex,
		connect.WithSchema(searchIndexServiceMethods.ByName("RebuildIndex")),
		connect.WithHandlerOptions(opts...),
	)
	searchIndexServiceGetIndexStatsHandler := connect.NewUnaryHandler(
		SearchIndexServiceGetIndexStatsProcedure,
		svc.GetIndexStats,
		connect.WithSchema(searchIndexServiceMethods.ByName("GetIndexStats")),
		connect.WithHandlerOptions(opts...),
	)
	searchIndexServiceOptimizeIndexHandler := connect.NewUnaryHandler(
		SearchIndexServiceOptimizeIndexProcedure,
		svc.OptimizeIndex,
		connect.WithSchema(searchIndexServiceMethods.ByName("OptimizeIndex")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.search.v1.SearchIndexService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SearchIndexServiceUpdateIndexProcedure:
			searchIndexServiceUpdateIndexHandler.ServeHTTP(w, r)
		case SearchIndexServiceDeleteFromIndexProcedure:
			searchIndexServiceDeleteFromIndexHandler.ServeHTTP(w, r)
		case SearchIndexServiceRebuildIndexProcedure:
			searchIndexServiceRebuildIndexHandler.ServeHTTP(w, r)
		case SearchIndexServiceGetIndexStatsProcedure:
			searchIndexServiceGetIndexStatsHandler.ServeHTTP(w, r)
		case SearchIndexServiceOptimizeIndexProcedure:
			searchIndexServiceOptimizeIndexHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSearchIndexServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSearchIndexServiceHandler struct{}

func (UnimplementedSearchIndexServiceHandler) UpdateIndex(context.Context, *connect.Request[v1.UpdateIndexRequest]) (*connect.Response[v1.UpdateIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchIndexService.UpdateIndex is not implemented"))
}

func (UnimplementedSearchIndexServiceHandler) DeleteFromIndex(context.Context, *connect.Request[v1.DeleteFromIndexRequest]) (*connect.Response[v1.DeleteFromIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchIndexService.DeleteFromIndex is not implemented"))
}

func (UnimplementedSearchIndexServiceHandler) RebuildIndex(context.Context, *connect.Request[v1.RebuildIndexRequest]) (*connect.Response[v1.RebuildIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchIndexService.RebuildIndex is not implemented"))
}

func (UnimplementedSearchIndexServiceHandler) GetIndexStats(context.Context, *connect.Request[v1.GetIndexStatsRequest]) (*connect.Response[v1.GetIndexStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchIndexService.GetIndexStats is not implemented"))
}

func (UnimplementedSearchIndexServiceHandler) OptimizeIndex(context.Context, *connect.Request[v1.OptimizeIndexRequest]) (*connect.Response[v1.OptimizeIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.search.v1.SearchIndexService.OptimizeIndex is not implemented"))
}
