// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/timeline/v1/timeline_service.proto

package timelinev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/timeline/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TimelineServiceName is the fully-qualified name of the TimelineService service.
	TimelineServiceName = "avion.timeline.v1.TimelineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TimelineServiceGetHomeTimelineProcedure is the fully-qualified name of the TimelineService's
	// GetHomeTimeline RPC.
	TimelineServiceGetHomeTimelineProcedure = "/avion.timeline.v1.TimelineService/GetHomeTimeline"
	// TimelineServiceGetUserTimelineProcedure is the fully-qualified name of the TimelineService's
	// GetUserTimeline RPC.
	TimelineServiceGetUserTimelineProcedure = "/avion.timeline.v1.TimelineService/GetUserTimeline"
	// TimelineServiceGetPublicTimelineProcedure is the fully-qualified name of the TimelineService's
	// GetPublicTimeline RPC.
	TimelineServiceGetPublicTimelineProcedure = "/avion.timeline.v1.TimelineService/GetPublicTimeline"
	// TimelineServiceGetListTimelineProcedure is the fully-qualified name of the TimelineService's
	// GetListTimeline RPC.
	TimelineServiceGetListTimelineProcedure = "/avion.timeline.v1.TimelineService/GetListTimeline"
	// TimelineServiceGetHashtagTimelineProcedure is the fully-qualified name of the TimelineService's
	// GetHashtagTimeline RPC.
	TimelineServiceGetHashtagTimelineProcedure = "/avion.timeline.v1.TimelineService/GetHashtagTimeline"
	// TimelineServiceAddToTimelineProcedure is the fully-qualified name of the TimelineService's
	// AddToTimeline RPC.
	TimelineServiceAddToTimelineProcedure = "/avion.timeline.v1.TimelineService/AddToTimeline"
	// TimelineServiceRemoveFromTimelineProcedure is the fully-qualified name of the TimelineService's
	// RemoveFromTimeline RPC.
	TimelineServiceRemoveFromTimelineProcedure = "/avion.timeline.v1.TimelineService/RemoveFromTimeline"
	// TimelineServiceMarkAsReadProcedure is the fully-qualified name of the TimelineService's
	// MarkAsRead RPC.
	TimelineServiceMarkAsReadProcedure = "/avion.timeline.v1.TimelineService/MarkAsRead"
	// TimelineServiceGetTimelineStatisticsProcedure is the fully-qualified name of the
	// TimelineService's GetTimelineStatistics RPC.
	TimelineServiceGetTimelineStatisticsProcedure = "/avion.timeline.v1.TimelineService/GetTimelineStatistics"
	// TimelineServiceGetTimelineSettingsProcedure is the fully-qualified name of the TimelineService's
	// GetTimelineSettings RPC.
	TimelineServiceGetTimelineSettingsProcedure = "/avion.timeline.v1.TimelineService/GetTimelineSettings"
	// TimelineServiceUpdateTimelineSettingsProcedure is the fully-qualified name of the
	// TimelineService's UpdateTimelineSettings RPC.
	TimelineServiceUpdateTimelineSettingsProcedure = "/avion.timeline.v1.TimelineService/UpdateTimelineSettings"
	// TimelineServiceBatchAddToTimelineProcedure is the fully-qualified name of the TimelineService's
	// BatchAddToTimeline RPC.
	TimelineServiceBatchAddToTimelineProcedure = "/avion.timeline.v1.TimelineService/BatchAddToTimeline"
	// TimelineServiceClearTimelineProcedure is the fully-qualified name of the TimelineService's
	// ClearTimeline RPC.
	TimelineServiceClearTimelineProcedure = "/avion.timeline.v1.TimelineService/ClearTimeline"
	// TimelineServiceRebuildTimelineProcedure is the fully-qualified name of the TimelineService's
	// RebuildTimeline RPC.
	TimelineServiceRebuildTimelineProcedure = "/avion.timeline.v1.TimelineService/RebuildTimeline"
	// TimelineServiceStreamTimelineUpdatesProcedure is the fully-qualified name of the
	// TimelineService's StreamTimelineUpdates RPC.
	TimelineServiceStreamTimelineUpdatesProcedure = "/avion.timeline.v1.TimelineService/StreamTimelineUpdates"
	// TimelineServiceStreamMultipleTimelinesProcedure is the fully-qualified name of the
	// TimelineService's StreamMultipleTimelines RPC.
	TimelineServiceStreamMultipleTimelinesProcedure = "/avion.timeline.v1.TimelineService/StreamMultipleTimelines"
)

// TimelineServiceClient is a client for the avion.timeline.v1.TimelineService service.
type TimelineServiceClient interface {
	// ホームタイムラインを取得
	GetHomeTimeline(context.Context, *connect.Request[v1.GetHomeTimelineRequest]) (*connect.Response[v1.GetHomeTimelineResponse], error)
	// ユーザータイムラインを取得
	GetUserTimeline(context.Context, *connect.Request[v1.GetUserTimelineRequest]) (*connect.Response[v1.GetUserTimelineResponse], error)
	// パブリックタイムラインを取得
	GetPublicTimeline(context.Context, *connect.Request[v1.GetPublicTimelineRequest]) (*connect.Response[v1.GetPublicTimelineResponse], error)
	// リストタイムラインを取得
	GetListTimeline(context.Context, *connect.Request[v1.GetListTimelineRequest]) (*connect.Response[v1.GetListTimelineResponse], error)
	// ハッシュタグタイムラインを取得
	GetHashtagTimeline(context.Context, *connect.Request[v1.GetHashtagTimelineRequest]) (*connect.Response[v1.GetHashtagTimelineResponse], error)
	// タイムラインに追加
	AddToTimeline(context.Context, *connect.Request[v1.AddToTimelineRequest]) (*connect.Response[v1.AddToTimelineResponse], error)
	// タイムラインから削除
	RemoveFromTimeline(context.Context, *connect.Request[v1.RemoveFromTimelineRequest]) (*connect.Response[v1.RemoveFromTimelineResponse], error)
	// 既読マーク
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// タイムライン統計情報を取得
	GetTimelineStatistics(context.Context, *connect.Request[v1.GetTimelineStatisticsRequest]) (*connect.Response[v1.GetTimelineStatisticsResponse], error)
	// タイムライン設定を取得
	GetTimelineSettings(context.Context, *connect.Request[v1.GetTimelineSettingsRequest]) (*connect.Response[v1.GetTimelineSettingsResponse], error)
	// タイムライン設定を更新
	UpdateTimelineSettings(context.Context, *connect.Request[v1.UpdateTimelineSettingsRequest]) (*connect.Response[v1.UpdateTimelineSettingsResponse], error)
	// バッチでタイムラインに追加（内部用）
	BatchAddToTimeline(context.Context, *connect.Request[v1.BatchAddToTimelineRequest]) (*connect.Response[v1.BatchAddToTimelineResponse], error)
	// タイムラインをクリア
	ClearTimeline(context.Context, *connect.Request[v1.ClearTimelineRequest]) (*connect.Response[v1.ClearTimelineResponse], error)
	// タイムラインを再構築（内部用）
	RebuildTimeline(context.Context, *connect.Request[v1.RebuildTimelineRequest]) (*connect.Response[v1.RebuildTimelineResponse], error)
	// リアルタイムタイムライン更新のストリーミング
	StreamTimelineUpdates(context.Context, *connect.Request[v1.StreamTimelineUpdatesRequest]) (*connect.ServerStreamForClient[v1.StreamTimelineUpdatesResponse], error)
	// 複数タイムラインの同時ストリーミング
	StreamMultipleTimelines(context.Context, *connect.Request[v1.StreamMultipleTimelinesRequest]) (*connect.ServerStreamForClient[v1.StreamMultipleTimelinesResponse], error)
}

// NewTimelineServiceClient constructs a client for the avion.timeline.v1.TimelineService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimelineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TimelineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	timelineServiceMethods := v1.File_avion_timeline_v1_timeline_service_proto.Services().ByName("TimelineService").Methods()
	return &timelineServiceClient{
		getHomeTimeline: connect.NewClient[v1.GetHomeTimelineRequest, v1.GetHomeTimelineResponse](
			httpClient,
			baseURL+TimelineServiceGetHomeTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetHomeTimeline")),
			connect.WithClientOptions(opts...),
		),
		getUserTimeline: connect.NewClient[v1.GetUserTimelineRequest, v1.GetUserTimelineResponse](
			httpClient,
			baseURL+TimelineServiceGetUserTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetUserTimeline")),
			connect.WithClientOptions(opts...),
		),
		getPublicTimeline: connect.NewClient[v1.GetPublicTimelineRequest, v1.GetPublicTimelineResponse](
			httpClient,
			baseURL+TimelineServiceGetPublicTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetPublicTimeline")),
			connect.WithClientOptions(opts...),
		),
		getListTimeline: connect.NewClient[v1.GetListTimelineRequest, v1.GetListTimelineResponse](
			httpClient,
			baseURL+TimelineServiceGetListTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetListTimeline")),
			connect.WithClientOptions(opts...),
		),
		getHashtagTimeline: connect.NewClient[v1.GetHashtagTimelineRequest, v1.GetHashtagTimelineResponse](
			httpClient,
			baseURL+TimelineServiceGetHashtagTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetHashtagTimeline")),
			connect.WithClientOptions(opts...),
		),
		addToTimeline: connect.NewClient[v1.AddToTimelineRequest, v1.AddToTimelineResponse](
			httpClient,
			baseURL+TimelineServiceAddToTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("AddToTimeline")),
			connect.WithClientOptions(opts...),
		),
		removeFromTimeline: connect.NewClient[v1.RemoveFromTimelineRequest, v1.RemoveFromTimelineResponse](
			httpClient,
			baseURL+TimelineServiceRemoveFromTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("RemoveFromTimeline")),
			connect.WithClientOptions(opts...),
		),
		markAsRead: connect.NewClient[v1.MarkAsReadRequest, v1.MarkAsReadResponse](
			httpClient,
			baseURL+TimelineServiceMarkAsReadProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("MarkAsRead")),
			connect.WithClientOptions(opts...),
		),
		getTimelineStatistics: connect.NewClient[v1.GetTimelineStatisticsRequest, v1.GetTimelineStatisticsResponse](
			httpClient,
			baseURL+TimelineServiceGetTimelineStatisticsProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetTimelineStatistics")),
			connect.WithClientOptions(opts...),
		),
		getTimelineSettings: connect.NewClient[v1.GetTimelineSettingsRequest, v1.GetTimelineSettingsResponse](
			httpClient,
			baseURL+TimelineServiceGetTimelineSettingsProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("GetTimelineSettings")),
			connect.WithClientOptions(opts...),
		),
		updateTimelineSettings: connect.NewClient[v1.UpdateTimelineSettingsRequest, v1.UpdateTimelineSettingsResponse](
			httpClient,
			baseURL+TimelineServiceUpdateTimelineSettingsProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("UpdateTimelineSettings")),
			connect.WithClientOptions(opts...),
		),
		batchAddToTimeline: connect.NewClient[v1.BatchAddToTimelineRequest, v1.BatchAddToTimelineResponse](
			httpClient,
			baseURL+TimelineServiceBatchAddToTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("BatchAddToTimeline")),
			connect.WithClientOptions(opts...),
		),
		clearTimeline: connect.NewClient[v1.ClearTimelineRequest, v1.ClearTimelineResponse](
			httpClient,
			baseURL+TimelineServiceClearTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("ClearTimeline")),
			connect.WithClientOptions(opts...),
		),
		rebuildTimeline: connect.NewClient[v1.RebuildTimelineRequest, v1.RebuildTimelineResponse](
			httpClient,
			baseURL+TimelineServiceRebuildTimelineProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("RebuildTimeline")),
			connect.WithClientOptions(opts...),
		),
		streamTimelineUpdates: connect.NewClient[v1.StreamTimelineUpdatesRequest, v1.StreamTimelineUpdatesResponse](
			httpClient,
			baseURL+TimelineServiceStreamTimelineUpdatesProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("StreamTimelineUpdates")),
			connect.WithClientOptions(opts...),
		),
		streamMultipleTimelines: connect.NewClient[v1.StreamMultipleTimelinesRequest, v1.StreamMultipleTimelinesResponse](
			httpClient,
			baseURL+TimelineServiceStreamMultipleTimelinesProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("StreamMultipleTimelines")),
			connect.WithClientOptions(opts...),
		),
	}
}

// timelineServiceClient implements TimelineServiceClient.
type timelineServiceClient struct {
	getHomeTimeline         *connect.Client[v1.GetHomeTimelineRequest, v1.GetHomeTimelineResponse]
	getUserTimeline         *connect.Client[v1.GetUserTimelineRequest, v1.GetUserTimelineResponse]
	getPublicTimeline       *connect.Client[v1.GetPublicTimelineRequest, v1.GetPublicTimelineResponse]
	getListTimeline         *connect.Client[v1.GetListTimelineRequest, v1.GetListTimelineResponse]
	getHashtagTimeline      *connect.Client[v1.GetHashtagTimelineRequest, v1.GetHashtagTimelineResponse]
	addToTimeline           *connect.Client[v1.AddToTimelineRequest, v1.AddToTimelineResponse]
	removeFromTimeline      *connect.Client[v1.RemoveFromTimelineRequest, v1.RemoveFromTimelineResponse]
	markAsRead              *connect.Client[v1.MarkAsReadRequest, v1.MarkAsReadResponse]
	getTimelineStatistics   *connect.Client[v1.GetTimelineStatisticsRequest, v1.GetTimelineStatisticsResponse]
	getTimelineSettings     *connect.Client[v1.GetTimelineSettingsRequest, v1.GetTimelineSettingsResponse]
	updateTimelineSettings  *connect.Client[v1.UpdateTimelineSettingsRequest, v1.UpdateTimelineSettingsResponse]
	batchAddToTimeline      *connect.Client[v1.BatchAddToTimelineRequest, v1.BatchAddToTimelineResponse]
	clearTimeline           *connect.Client[v1.ClearTimelineRequest, v1.ClearTimelineResponse]
	rebuildTimeline         *connect.Client[v1.RebuildTimelineRequest, v1.RebuildTimelineResponse]
	streamTimelineUpdates   *connect.Client[v1.StreamTimelineUpdatesRequest, v1.StreamTimelineUpdatesResponse]
	streamMultipleTimelines *connect.Client[v1.StreamMultipleTimelinesRequest, v1.StreamMultipleTimelinesResponse]
}

// GetHomeTimeline calls avion.timeline.v1.TimelineService.GetHomeTimeline.
func (c *timelineServiceClient) GetHomeTimeline(ctx context.Context, req *connect.Request[v1.GetHomeTimelineRequest]) (*connect.Response[v1.GetHomeTimelineResponse], error) {
	return c.getHomeTimeline.CallUnary(ctx, req)
}

// GetUserTimeline calls avion.timeline.v1.TimelineService.GetUserTimeline.
func (c *timelineServiceClient) GetUserTimeline(ctx context.Context, req *connect.Request[v1.GetUserTimelineRequest]) (*connect.Response[v1.GetUserTimelineResponse], error) {
	return c.getUserTimeline.CallUnary(ctx, req)
}

// GetPublicTimeline calls avion.timeline.v1.TimelineService.GetPublicTimeline.
func (c *timelineServiceClient) GetPublicTimeline(ctx context.Context, req *connect.Request[v1.GetPublicTimelineRequest]) (*connect.Response[v1.GetPublicTimelineResponse], error) {
	return c.getPublicTimeline.CallUnary(ctx, req)
}

// GetListTimeline calls avion.timeline.v1.TimelineService.GetListTimeline.
func (c *timelineServiceClient) GetListTimeline(ctx context.Context, req *connect.Request[v1.GetListTimelineRequest]) (*connect.Response[v1.GetListTimelineResponse], error) {
	return c.getListTimeline.CallUnary(ctx, req)
}

// GetHashtagTimeline calls avion.timeline.v1.TimelineService.GetHashtagTimeline.
func (c *timelineServiceClient) GetHashtagTimeline(ctx context.Context, req *connect.Request[v1.GetHashtagTimelineRequest]) (*connect.Response[v1.GetHashtagTimelineResponse], error) {
	return c.getHashtagTimeline.CallUnary(ctx, req)
}

// AddToTimeline calls avion.timeline.v1.TimelineService.AddToTimeline.
func (c *timelineServiceClient) AddToTimeline(ctx context.Context, req *connect.Request[v1.AddToTimelineRequest]) (*connect.Response[v1.AddToTimelineResponse], error) {
	return c.addToTimeline.CallUnary(ctx, req)
}

// RemoveFromTimeline calls avion.timeline.v1.TimelineService.RemoveFromTimeline.
func (c *timelineServiceClient) RemoveFromTimeline(ctx context.Context, req *connect.Request[v1.RemoveFromTimelineRequest]) (*connect.Response[v1.RemoveFromTimelineResponse], error) {
	return c.removeFromTimeline.CallUnary(ctx, req)
}

// MarkAsRead calls avion.timeline.v1.TimelineService.MarkAsRead.
func (c *timelineServiceClient) MarkAsRead(ctx context.Context, req *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return c.markAsRead.CallUnary(ctx, req)
}

// GetTimelineStatistics calls avion.timeline.v1.TimelineService.GetTimelineStatistics.
func (c *timelineServiceClient) GetTimelineStatistics(ctx context.Context, req *connect.Request[v1.GetTimelineStatisticsRequest]) (*connect.Response[v1.GetTimelineStatisticsResponse], error) {
	return c.getTimelineStatistics.CallUnary(ctx, req)
}

// GetTimelineSettings calls avion.timeline.v1.TimelineService.GetTimelineSettings.
func (c *timelineServiceClient) GetTimelineSettings(ctx context.Context, req *connect.Request[v1.GetTimelineSettingsRequest]) (*connect.Response[v1.GetTimelineSettingsResponse], error) {
	return c.getTimelineSettings.CallUnary(ctx, req)
}

// UpdateTimelineSettings calls avion.timeline.v1.TimelineService.UpdateTimelineSettings.
func (c *timelineServiceClient) UpdateTimelineSettings(ctx context.Context, req *connect.Request[v1.UpdateTimelineSettingsRequest]) (*connect.Response[v1.UpdateTimelineSettingsResponse], error) {
	return c.updateTimelineSettings.CallUnary(ctx, req)
}

// BatchAddToTimeline calls avion.timeline.v1.TimelineService.BatchAddToTimeline.
func (c *timelineServiceClient) BatchAddToTimeline(ctx context.Context, req *connect.Request[v1.BatchAddToTimelineRequest]) (*connect.Response[v1.BatchAddToTimelineResponse], error) {
	return c.batchAddToTimeline.CallUnary(ctx, req)
}

// ClearTimeline calls avion.timeline.v1.TimelineService.ClearTimeline.
func (c *timelineServiceClient) ClearTimeline(ctx context.Context, req *connect.Request[v1.ClearTimelineRequest]) (*connect.Response[v1.ClearTimelineResponse], error) {
	return c.clearTimeline.CallUnary(ctx, req)
}

// RebuildTimeline calls avion.timeline.v1.TimelineService.RebuildTimeline.
func (c *timelineServiceClient) RebuildTimeline(ctx context.Context, req *connect.Request[v1.RebuildTimelineRequest]) (*connect.Response[v1.RebuildTimelineResponse], error) {
	return c.rebuildTimeline.CallUnary(ctx, req)
}

// StreamTimelineUpdates calls avion.timeline.v1.TimelineService.StreamTimelineUpdates.
func (c *timelineServiceClient) StreamTimelineUpdates(ctx context.Context, req *connect.Request[v1.StreamTimelineUpdatesRequest]) (*connect.ServerStreamForClient[v1.StreamTimelineUpdatesResponse], error) {
	return c.streamTimelineUpdates.CallServerStream(ctx, req)
}

// StreamMultipleTimelines calls avion.timeline.v1.TimelineService.StreamMultipleTimelines.
func (c *timelineServiceClient) StreamMultipleTimelines(ctx context.Context, req *connect.Request[v1.StreamMultipleTimelinesRequest]) (*connect.ServerStreamForClient[v1.StreamMultipleTimelinesResponse], error) {
	return c.streamMultipleTimelines.CallServerStream(ctx, req)
}

// TimelineServiceHandler is an implementation of the avion.timeline.v1.TimelineService service.
type TimelineServiceHandler interface {
	// ホームタイムラインを取得
	GetHomeTimeline(context.Context, *connect.Request[v1.GetHomeTimelineRequest]) (*connect.Response[v1.GetHomeTimelineResponse], error)
	// ユーザータイムラインを取得
	GetUserTimeline(context.Context, *connect.Request[v1.GetUserTimelineRequest]) (*connect.Response[v1.GetUserTimelineResponse], error)
	// パブリックタイムラインを取得
	GetPublicTimeline(context.Context, *connect.Request[v1.GetPublicTimelineRequest]) (*connect.Response[v1.GetPublicTimelineResponse], error)
	// リストタイムラインを取得
	GetListTimeline(context.Context, *connect.Request[v1.GetListTimelineRequest]) (*connect.Response[v1.GetListTimelineResponse], error)
	// ハッシュタグタイムラインを取得
	GetHashtagTimeline(context.Context, *connect.Request[v1.GetHashtagTimelineRequest]) (*connect.Response[v1.GetHashtagTimelineResponse], error)
	// タイムラインに追加
	AddToTimeline(context.Context, *connect.Request[v1.AddToTimelineRequest]) (*connect.Response[v1.AddToTimelineResponse], error)
	// タイムラインから削除
	RemoveFromTimeline(context.Context, *connect.Request[v1.RemoveFromTimelineRequest]) (*connect.Response[v1.RemoveFromTimelineResponse], error)
	// 既読マーク
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
	// タイムライン統計情報を取得
	GetTimelineStatistics(context.Context, *connect.Request[v1.GetTimelineStatisticsRequest]) (*connect.Response[v1.GetTimelineStatisticsResponse], error)
	// タイムライン設定を取得
	GetTimelineSettings(context.Context, *connect.Request[v1.GetTimelineSettingsRequest]) (*connect.Response[v1.GetTimelineSettingsResponse], error)
	// タイムライン設定を更新
	UpdateTimelineSettings(context.Context, *connect.Request[v1.UpdateTimelineSettingsRequest]) (*connect.Response[v1.UpdateTimelineSettingsResponse], error)
	// バッチでタイムラインに追加（内部用）
	BatchAddToTimeline(context.Context, *connect.Request[v1.BatchAddToTimelineRequest]) (*connect.Response[v1.BatchAddToTimelineResponse], error)
	// タイムラインをクリア
	ClearTimeline(context.Context, *connect.Request[v1.ClearTimelineRequest]) (*connect.Response[v1.ClearTimelineResponse], error)
	// タイムラインを再構築（内部用）
	RebuildTimeline(context.Context, *connect.Request[v1.RebuildTimelineRequest]) (*connect.Response[v1.RebuildTimelineResponse], error)
	// リアルタイムタイムライン更新のストリーミング
	StreamTimelineUpdates(context.Context, *connect.Request[v1.StreamTimelineUpdatesRequest], *connect.ServerStream[v1.StreamTimelineUpdatesResponse]) error
	// 複数タイムラインの同時ストリーミング
	StreamMultipleTimelines(context.Context, *connect.Request[v1.StreamMultipleTimelinesRequest], *connect.ServerStream[v1.StreamMultipleTimelinesResponse]) error
}

// NewTimelineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimelineServiceHandler(svc TimelineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	timelineServiceMethods := v1.File_avion_timeline_v1_timeline_service_proto.Services().ByName("TimelineService").Methods()
	timelineServiceGetHomeTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceGetHomeTimelineProcedure,
		svc.GetHomeTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("GetHomeTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetUserTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceGetUserTimelineProcedure,
		svc.GetUserTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("GetUserTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetPublicTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceGetPublicTimelineProcedure,
		svc.GetPublicTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("GetPublicTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetListTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceGetListTimelineProcedure,
		svc.GetListTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("GetListTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetHashtagTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceGetHashtagTimelineProcedure,
		svc.GetHashtagTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("GetHashtagTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceAddToTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceAddToTimelineProcedure,
		svc.AddToTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("AddToTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceRemoveFromTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceRemoveFromTimelineProcedure,
		svc.RemoveFromTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("RemoveFromTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceMarkAsReadHandler := connect.NewUnaryHandler(
		TimelineServiceMarkAsReadProcedure,
		svc.MarkAsRead,
		connect.WithSchema(timelineServiceMethods.ByName("MarkAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetTimelineStatisticsHandler := connect.NewUnaryHandler(
		TimelineServiceGetTimelineStatisticsProcedure,
		svc.GetTimelineStatistics,
		connect.WithSchema(timelineServiceMethods.ByName("GetTimelineStatistics")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceGetTimelineSettingsHandler := connect.NewUnaryHandler(
		TimelineServiceGetTimelineSettingsProcedure,
		svc.GetTimelineSettings,
		connect.WithSchema(timelineServiceMethods.ByName("GetTimelineSettings")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceUpdateTimelineSettingsHandler := connect.NewUnaryHandler(
		TimelineServiceUpdateTimelineSettingsProcedure,
		svc.UpdateTimelineSettings,
		connect.WithSchema(timelineServiceMethods.ByName("UpdateTimelineSettings")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceBatchAddToTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceBatchAddToTimelineProcedure,
		svc.BatchAddToTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("BatchAddToTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceClearTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceClearTimelineProcedure,
		svc.ClearTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("ClearTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceRebuildTimelineHandler := connect.NewUnaryHandler(
		TimelineServiceRebuildTimelineProcedure,
		svc.RebuildTimeline,
		connect.WithSchema(timelineServiceMethods.ByName("RebuildTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceStreamTimelineUpdatesHandler := connect.NewServerStreamHandler(
		TimelineServiceStreamTimelineUpdatesProcedure,
		svc.StreamTimelineUpdates,
		connect.WithSchema(timelineServiceMethods.ByName("StreamTimelineUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceStreamMultipleTimelinesHandler := connect.NewServerStreamHandler(
		TimelineServiceStreamMultipleTimelinesProcedure,
		svc.StreamMultipleTimelines,
		connect.WithSchema(timelineServiceMethods.ByName("StreamMultipleTimelines")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.timeline.v1.TimelineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TimelineServiceGetHomeTimelineProcedure:
			timelineServiceGetHomeTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceGetUserTimelineProcedure:
			timelineServiceGetUserTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceGetPublicTimelineProcedure:
			timelineServiceGetPublicTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceGetListTimelineProcedure:
			timelineServiceGetListTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceGetHashtagTimelineProcedure:
			timelineServiceGetHashtagTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceAddToTimelineProcedure:
			timelineServiceAddToTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceRemoveFromTimelineProcedure:
			timelineServiceRemoveFromTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceMarkAsReadProcedure:
			timelineServiceMarkAsReadHandler.ServeHTTP(w, r)
		case TimelineServiceGetTimelineStatisticsProcedure:
			timelineServiceGetTimelineStatisticsHandler.ServeHTTP(w, r)
		case TimelineServiceGetTimelineSettingsProcedure:
			timelineServiceGetTimelineSettingsHandler.ServeHTTP(w, r)
		case TimelineServiceUpdateTimelineSettingsProcedure:
			timelineServiceUpdateTimelineSettingsHandler.ServeHTTP(w, r)
		case TimelineServiceBatchAddToTimelineProcedure:
			timelineServiceBatchAddToTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceClearTimelineProcedure:
			timelineServiceClearTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceRebuildTimelineProcedure:
			timelineServiceRebuildTimelineHandler.ServeHTTP(w, r)
		case TimelineServiceStreamTimelineUpdatesProcedure:
			timelineServiceStreamTimelineUpdatesHandler.ServeHTTP(w, r)
		case TimelineServiceStreamMultipleTimelinesProcedure:
			timelineServiceStreamMultipleTimelinesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTimelineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimelineServiceHandler struct{}

func (UnimplementedTimelineServiceHandler) GetHomeTimeline(context.Context, *connect.Request[v1.GetHomeTimelineRequest]) (*connect.Response[v1.GetHomeTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetHomeTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetUserTimeline(context.Context, *connect.Request[v1.GetUserTimelineRequest]) (*connect.Response[v1.GetUserTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetUserTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetPublicTimeline(context.Context, *connect.Request[v1.GetPublicTimelineRequest]) (*connect.Response[v1.GetPublicTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetPublicTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetListTimeline(context.Context, *connect.Request[v1.GetListTimelineRequest]) (*connect.Response[v1.GetListTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetListTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetHashtagTimeline(context.Context, *connect.Request[v1.GetHashtagTimelineRequest]) (*connect.Response[v1.GetHashtagTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetHashtagTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) AddToTimeline(context.Context, *connect.Request[v1.AddToTimelineRequest]) (*connect.Response[v1.AddToTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.AddToTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) RemoveFromTimeline(context.Context, *connect.Request[v1.RemoveFromTimelineRequest]) (*connect.Response[v1.RemoveFromTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.RemoveFromTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.MarkAsRead is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetTimelineStatistics(context.Context, *connect.Request[v1.GetTimelineStatisticsRequest]) (*connect.Response[v1.GetTimelineStatisticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetTimelineStatistics is not implemented"))
}

func (UnimplementedTimelineServiceHandler) GetTimelineSettings(context.Context, *connect.Request[v1.GetTimelineSettingsRequest]) (*connect.Response[v1.GetTimelineSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.GetTimelineSettings is not implemented"))
}

func (UnimplementedTimelineServiceHandler) UpdateTimelineSettings(context.Context, *connect.Request[v1.UpdateTimelineSettingsRequest]) (*connect.Response[v1.UpdateTimelineSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.UpdateTimelineSettings is not implemented"))
}

func (UnimplementedTimelineServiceHandler) BatchAddToTimeline(context.Context, *connect.Request[v1.BatchAddToTimelineRequest]) (*connect.Response[v1.BatchAddToTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.BatchAddToTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) ClearTimeline(context.Context, *connect.Request[v1.ClearTimelineRequest]) (*connect.Response[v1.ClearTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.ClearTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) RebuildTimeline(context.Context, *connect.Request[v1.RebuildTimelineRequest]) (*connect.Response[v1.RebuildTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.RebuildTimeline is not implemented"))
}

func (UnimplementedTimelineServiceHandler) StreamTimelineUpdates(context.Context, *connect.Request[v1.StreamTimelineUpdatesRequest], *connect.ServerStream[v1.StreamTimelineUpdatesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.StreamTimelineUpdates is not implemented"))
}

func (UnimplementedTimelineServiceHandler) StreamMultipleTimelines(context.Context, *connect.Request[v1.StreamMultipleTimelinesRequest], *connect.ServerStream[v1.StreamMultipleTimelinesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.timeline.v1.TimelineService.StreamMultipleTimelines is not implemented"))
}
