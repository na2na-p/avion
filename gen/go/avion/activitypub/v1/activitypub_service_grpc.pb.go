// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/activitypub/v1/activitypub_service.proto

package activitypubv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityPubService_CreateActor_FullMethodName       = "/avion.activitypub.v1.ActivityPubService/CreateActor"
	ActivityPubService_GetActor_FullMethodName          = "/avion.activitypub.v1.ActivityPubService/GetActor"
	ActivityPubService_UpdateActor_FullMethodName       = "/avion.activitypub.v1.ActivityPubService/UpdateActor"
	ActivityPubService_DeleteActor_FullMethodName       = "/avion.activitypub.v1.ActivityPubService/DeleteActor"
	ActivityPubService_SendActivity_FullMethodName      = "/avion.activitypub.v1.ActivityPubService/SendActivity"
	ActivityPubService_ReceiveActivity_FullMethodName   = "/avion.activitypub.v1.ActivityPubService/ReceiveActivity"
	ActivityPubService_GetInbox_FullMethodName          = "/avion.activitypub.v1.ActivityPubService/GetInbox"
	ActivityPubService_GetOutbox_FullMethodName         = "/avion.activitypub.v1.ActivityPubService/GetOutbox"
	ActivityPubService_Follow_FullMethodName            = "/avion.activitypub.v1.ActivityPubService/Follow"
	ActivityPubService_Unfollow_FullMethodName          = "/avion.activitypub.v1.ActivityPubService/Unfollow"
	ActivityPubService_GetFollowers_FullMethodName      = "/avion.activitypub.v1.ActivityPubService/GetFollowers"
	ActivityPubService_GetFollowing_FullMethodName      = "/avion.activitypub.v1.ActivityPubService/GetFollowing"
	ActivityPubService_WebFingerLookup_FullMethodName   = "/avion.activitypub.v1.ActivityPubService/WebFingerLookup"
	ActivityPubService_VerifySignature_FullMethodName   = "/avion.activitypub.v1.ActivityPubService/VerifySignature"
	ActivityPubService_GenerateSignature_FullMethodName = "/avion.activitypub.v1.ActivityPubService/GenerateSignature"
	ActivityPubService_SyncRemoteActor_FullMethodName   = "/avion.activitypub.v1.ActivityPubService/SyncRemoteActor"
	ActivityPubService_GetCollection_FullMethodName     = "/avion.activitypub.v1.ActivityPubService/GetCollection"
)

// ActivityPubServiceClient is the client API for ActivityPubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ActivityPubサービス
// ActivityPubプロトコルの実装とフェデレーション機能を提供
type ActivityPubServiceClient interface {
	// アクターを作成
	CreateActor(ctx context.Context, in *CreateActorRequest, opts ...grpc.CallOption) (*CreateActorResponse, error)
	// アクターを取得
	GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error)
	// アクターを更新
	UpdateActor(ctx context.Context, in *UpdateActorRequest, opts ...grpc.CallOption) (*UpdateActorResponse, error)
	// アクターを削除
	DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error)
	// アクティビティを送信
	SendActivity(ctx context.Context, in *SendActivityRequest, opts ...grpc.CallOption) (*SendActivityResponse, error)
	// アクティビティを受信（外部からの受信処理）
	ReceiveActivity(ctx context.Context, in *ReceiveActivityRequest, opts ...grpc.CallOption) (*ReceiveActivityResponse, error)
	// Inboxを取得
	GetInbox(ctx context.Context, in *GetInboxRequest, opts ...grpc.CallOption) (*GetInboxResponse, error)
	// Outboxを取得
	GetOutbox(ctx context.Context, in *GetOutboxRequest, opts ...grpc.CallOption) (*GetOutboxResponse, error)
	// フォローする
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	// アンフォローする
	Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)
	// フォロワーを取得
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	// フォロー中を取得
	GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error)
	// WebFingerで検索
	WebFingerLookup(ctx context.Context, in *WebFingerLookupRequest, opts ...grpc.CallOption) (*WebFingerLookupResponse, error)
	// HTTPSignatureを検証
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
	// HTTPSignatureを生成
	GenerateSignature(ctx context.Context, in *GenerateSignatureRequest, opts ...grpc.CallOption) (*GenerateSignatureResponse, error)
	// リモートアクターを同期
	SyncRemoteActor(ctx context.Context, in *SyncRemoteActorRequest, opts ...grpc.CallOption) (*SyncRemoteActorResponse, error)
	// コレクションを取得
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
}

type activityPubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityPubServiceClient(cc grpc.ClientConnInterface) ActivityPubServiceClient {
	return &activityPubServiceClient{cc}
}

func (c *activityPubServiceClient) CreateActor(ctx context.Context, in *CreateActorRequest, opts ...grpc.CallOption) (*CreateActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateActorResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_CreateActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActorResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) UpdateActor(ctx context.Context, in *UpdateActorRequest, opts ...grpc.CallOption) (*UpdateActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActorResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_UpdateActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteActorResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_DeleteActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) SendActivity(ctx context.Context, in *SendActivityRequest, opts ...grpc.CallOption) (*SendActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendActivityResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_SendActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) ReceiveActivity(ctx context.Context, in *ReceiveActivityRequest, opts ...grpc.CallOption) (*ReceiveActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveActivityResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_ReceiveActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetInbox(ctx context.Context, in *GetInboxRequest, opts ...grpc.CallOption) (*GetInboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboxResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetInbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetOutbox(ctx context.Context, in *GetOutboxRequest, opts ...grpc.CallOption) (*GetOutboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOutboxResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetOutbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_Unfollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowingResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) WebFingerLookup(ctx context.Context, in *WebFingerLookupRequest, opts ...grpc.CallOption) (*WebFingerLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebFingerLookupResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_WebFingerLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_VerifySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GenerateSignature(ctx context.Context, in *GenerateSignatureRequest, opts ...grpc.CallOption) (*GenerateSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSignatureResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GenerateSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) SyncRemoteActor(ctx context.Context, in *SyncRemoteActorRequest, opts ...grpc.CallOption) (*SyncRemoteActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncRemoteActorResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_SyncRemoteActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityPubServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, ActivityPubService_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityPubServiceServer is the server API for ActivityPubService service.
// All implementations must embed UnimplementedActivityPubServiceServer
// for forward compatibility.
//
// ActivityPubサービス
// ActivityPubプロトコルの実装とフェデレーション機能を提供
type ActivityPubServiceServer interface {
	// アクターを作成
	CreateActor(context.Context, *CreateActorRequest) (*CreateActorResponse, error)
	// アクターを取得
	GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error)
	// アクターを更新
	UpdateActor(context.Context, *UpdateActorRequest) (*UpdateActorResponse, error)
	// アクターを削除
	DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error)
	// アクティビティを送信
	SendActivity(context.Context, *SendActivityRequest) (*SendActivityResponse, error)
	// アクティビティを受信（外部からの受信処理）
	ReceiveActivity(context.Context, *ReceiveActivityRequest) (*ReceiveActivityResponse, error)
	// Inboxを取得
	GetInbox(context.Context, *GetInboxRequest) (*GetInboxResponse, error)
	// Outboxを取得
	GetOutbox(context.Context, *GetOutboxRequest) (*GetOutboxResponse, error)
	// フォローする
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	// アンフォローする
	Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error)
	// フォロワーを取得
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	// フォロー中を取得
	GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error)
	// WebFingerで検索
	WebFingerLookup(context.Context, *WebFingerLookupRequest) (*WebFingerLookupResponse, error)
	// HTTPSignatureを検証
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
	// HTTPSignatureを生成
	GenerateSignature(context.Context, *GenerateSignatureRequest) (*GenerateSignatureResponse, error)
	// リモートアクターを同期
	SyncRemoteActor(context.Context, *SyncRemoteActorRequest) (*SyncRemoteActorResponse, error)
	// コレクションを取得
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	mustEmbedUnimplementedActivityPubServiceServer()
}

// UnimplementedActivityPubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityPubServiceServer struct{}

func (UnimplementedActivityPubServiceServer) CreateActor(context.Context, *CreateActorRequest) (*CreateActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActor not implemented")
}
func (UnimplementedActivityPubServiceServer) GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActor not implemented")
}
func (UnimplementedActivityPubServiceServer) UpdateActor(context.Context, *UpdateActorRequest) (*UpdateActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActor not implemented")
}
func (UnimplementedActivityPubServiceServer) DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActor not implemented")
}
func (UnimplementedActivityPubServiceServer) SendActivity(context.Context, *SendActivityRequest) (*SendActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivity not implemented")
}
func (UnimplementedActivityPubServiceServer) ReceiveActivity(context.Context, *ReceiveActivityRequest) (*ReceiveActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivity not implemented")
}
func (UnimplementedActivityPubServiceServer) GetInbox(context.Context, *GetInboxRequest) (*GetInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInbox not implemented")
}
func (UnimplementedActivityPubServiceServer) GetOutbox(context.Context, *GetOutboxRequest) (*GetOutboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutbox not implemented")
}
func (UnimplementedActivityPubServiceServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedActivityPubServiceServer) Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedActivityPubServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedActivityPubServiceServer) GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedActivityPubServiceServer) WebFingerLookup(context.Context, *WebFingerLookupRequest) (*WebFingerLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFingerLookup not implemented")
}
func (UnimplementedActivityPubServiceServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedActivityPubServiceServer) GenerateSignature(context.Context, *GenerateSignatureRequest) (*GenerateSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSignature not implemented")
}
func (UnimplementedActivityPubServiceServer) SyncRemoteActor(context.Context, *SyncRemoteActorRequest) (*SyncRemoteActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRemoteActor not implemented")
}
func (UnimplementedActivityPubServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedActivityPubServiceServer) mustEmbedUnimplementedActivityPubServiceServer() {}
func (UnimplementedActivityPubServiceServer) testEmbeddedByValue()                            {}

// UnsafeActivityPubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityPubServiceServer will
// result in compilation errors.
type UnsafeActivityPubServiceServer interface {
	mustEmbedUnimplementedActivityPubServiceServer()
}

func RegisterActivityPubServiceServer(s grpc.ServiceRegistrar, srv ActivityPubServiceServer) {
	// If the following call pancis, it indicates UnimplementedActivityPubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityPubService_ServiceDesc, srv)
}

func _ActivityPubService_CreateActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).CreateActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_CreateActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).CreateActor(ctx, req.(*CreateActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetActor(ctx, req.(*GetActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_UpdateActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).UpdateActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_UpdateActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).UpdateActor(ctx, req.(*UpdateActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_DeleteActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).DeleteActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_DeleteActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).DeleteActor(ctx, req.(*DeleteActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_SendActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).SendActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_SendActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).SendActivity(ctx, req.(*SendActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_ReceiveActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).ReceiveActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_ReceiveActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).ReceiveActivity(ctx, req.(*ReceiveActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetInbox(ctx, req.(*GetInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetOutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetOutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetOutbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetOutbox(ctx, req.(*GetOutboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).Unfollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetFollowing(ctx, req.(*GetFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_WebFingerLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFingerLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).WebFingerLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_WebFingerLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).WebFingerLookup(ctx, req.(*WebFingerLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_VerifySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GenerateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GenerateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GenerateSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GenerateSignature(ctx, req.(*GenerateSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_SyncRemoteActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRemoteActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).SyncRemoteActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_SyncRemoteActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).SyncRemoteActor(ctx, req.(*SyncRemoteActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityPubService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityPubServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityPubService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityPubServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityPubService_ServiceDesc is the grpc.ServiceDesc for ActivityPubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityPubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.activitypub.v1.ActivityPubService",
	HandlerType: (*ActivityPubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateActor",
			Handler:    _ActivityPubService_CreateActor_Handler,
		},
		{
			MethodName: "GetActor",
			Handler:    _ActivityPubService_GetActor_Handler,
		},
		{
			MethodName: "UpdateActor",
			Handler:    _ActivityPubService_UpdateActor_Handler,
		},
		{
			MethodName: "DeleteActor",
			Handler:    _ActivityPubService_DeleteActor_Handler,
		},
		{
			MethodName: "SendActivity",
			Handler:    _ActivityPubService_SendActivity_Handler,
		},
		{
			MethodName: "ReceiveActivity",
			Handler:    _ActivityPubService_ReceiveActivity_Handler,
		},
		{
			MethodName: "GetInbox",
			Handler:    _ActivityPubService_GetInbox_Handler,
		},
		{
			MethodName: "GetOutbox",
			Handler:    _ActivityPubService_GetOutbox_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _ActivityPubService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _ActivityPubService_Unfollow_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _ActivityPubService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _ActivityPubService_GetFollowing_Handler,
		},
		{
			MethodName: "WebFingerLookup",
			Handler:    _ActivityPubService_WebFingerLookup_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _ActivityPubService_VerifySignature_Handler,
		},
		{
			MethodName: "GenerateSignature",
			Handler:    _ActivityPubService_GenerateSignature_Handler,
		},
		{
			MethodName: "SyncRemoteActor",
			Handler:    _ActivityPubService_SyncRemoteActor_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _ActivityPubService_GetCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/activitypub/v1/activitypub_service.proto",
}
