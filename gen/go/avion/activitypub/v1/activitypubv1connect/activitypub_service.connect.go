// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/activitypub/v1/activitypub_service.proto

package activitypubv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/activitypub/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ActivityPubServiceName is the fully-qualified name of the ActivityPubService service.
	ActivityPubServiceName = "avion.activitypub.v1.ActivityPubService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActivityPubServiceCreateActorProcedure is the fully-qualified name of the ActivityPubService's
	// CreateActor RPC.
	ActivityPubServiceCreateActorProcedure = "/avion.activitypub.v1.ActivityPubService/CreateActor"
	// ActivityPubServiceGetActorProcedure is the fully-qualified name of the ActivityPubService's
	// GetActor RPC.
	ActivityPubServiceGetActorProcedure = "/avion.activitypub.v1.ActivityPubService/GetActor"
	// ActivityPubServiceUpdateActorProcedure is the fully-qualified name of the ActivityPubService's
	// UpdateActor RPC.
	ActivityPubServiceUpdateActorProcedure = "/avion.activitypub.v1.ActivityPubService/UpdateActor"
	// ActivityPubServiceDeleteActorProcedure is the fully-qualified name of the ActivityPubService's
	// DeleteActor RPC.
	ActivityPubServiceDeleteActorProcedure = "/avion.activitypub.v1.ActivityPubService/DeleteActor"
	// ActivityPubServiceSendActivityProcedure is the fully-qualified name of the ActivityPubService's
	// SendActivity RPC.
	ActivityPubServiceSendActivityProcedure = "/avion.activitypub.v1.ActivityPubService/SendActivity"
	// ActivityPubServiceReceiveActivityProcedure is the fully-qualified name of the
	// ActivityPubService's ReceiveActivity RPC.
	ActivityPubServiceReceiveActivityProcedure = "/avion.activitypub.v1.ActivityPubService/ReceiveActivity"
	// ActivityPubServiceGetInboxProcedure is the fully-qualified name of the ActivityPubService's
	// GetInbox RPC.
	ActivityPubServiceGetInboxProcedure = "/avion.activitypub.v1.ActivityPubService/GetInbox"
	// ActivityPubServiceGetOutboxProcedure is the fully-qualified name of the ActivityPubService's
	// GetOutbox RPC.
	ActivityPubServiceGetOutboxProcedure = "/avion.activitypub.v1.ActivityPubService/GetOutbox"
	// ActivityPubServiceFollowProcedure is the fully-qualified name of the ActivityPubService's Follow
	// RPC.
	ActivityPubServiceFollowProcedure = "/avion.activitypub.v1.ActivityPubService/Follow"
	// ActivityPubServiceUnfollowProcedure is the fully-qualified name of the ActivityPubService's
	// Unfollow RPC.
	ActivityPubServiceUnfollowProcedure = "/avion.activitypub.v1.ActivityPubService/Unfollow"
	// ActivityPubServiceGetFollowersProcedure is the fully-qualified name of the ActivityPubService's
	// GetFollowers RPC.
	ActivityPubServiceGetFollowersProcedure = "/avion.activitypub.v1.ActivityPubService/GetFollowers"
	// ActivityPubServiceGetFollowingProcedure is the fully-qualified name of the ActivityPubService's
	// GetFollowing RPC.
	ActivityPubServiceGetFollowingProcedure = "/avion.activitypub.v1.ActivityPubService/GetFollowing"
	// ActivityPubServiceWebFingerLookupProcedure is the fully-qualified name of the
	// ActivityPubService's WebFingerLookup RPC.
	ActivityPubServiceWebFingerLookupProcedure = "/avion.activitypub.v1.ActivityPubService/WebFingerLookup"
	// ActivityPubServiceVerifySignatureProcedure is the fully-qualified name of the
	// ActivityPubService's VerifySignature RPC.
	ActivityPubServiceVerifySignatureProcedure = "/avion.activitypub.v1.ActivityPubService/VerifySignature"
	// ActivityPubServiceGenerateSignatureProcedure is the fully-qualified name of the
	// ActivityPubService's GenerateSignature RPC.
	ActivityPubServiceGenerateSignatureProcedure = "/avion.activitypub.v1.ActivityPubService/GenerateSignature"
	// ActivityPubServiceSyncRemoteActorProcedure is the fully-qualified name of the
	// ActivityPubService's SyncRemoteActor RPC.
	ActivityPubServiceSyncRemoteActorProcedure = "/avion.activitypub.v1.ActivityPubService/SyncRemoteActor"
	// ActivityPubServiceGetCollectionProcedure is the fully-qualified name of the ActivityPubService's
	// GetCollection RPC.
	ActivityPubServiceGetCollectionProcedure = "/avion.activitypub.v1.ActivityPubService/GetCollection"
)

// ActivityPubServiceClient is a client for the avion.activitypub.v1.ActivityPubService service.
type ActivityPubServiceClient interface {
	// アクターを作成
	CreateActor(context.Context, *connect.Request[v1.CreateActorRequest]) (*connect.Response[v1.CreateActorResponse], error)
	// アクターを取得
	GetActor(context.Context, *connect.Request[v1.GetActorRequest]) (*connect.Response[v1.GetActorResponse], error)
	// アクターを更新
	UpdateActor(context.Context, *connect.Request[v1.UpdateActorRequest]) (*connect.Response[v1.UpdateActorResponse], error)
	// アクターを削除
	DeleteActor(context.Context, *connect.Request[v1.DeleteActorRequest]) (*connect.Response[v1.DeleteActorResponse], error)
	// アクティビティを送信
	SendActivity(context.Context, *connect.Request[v1.SendActivityRequest]) (*connect.Response[v1.SendActivityResponse], error)
	// アクティビティを受信（外部からの受信処理）
	ReceiveActivity(context.Context, *connect.Request[v1.ReceiveActivityRequest]) (*connect.Response[v1.ReceiveActivityResponse], error)
	// Inboxを取得
	GetInbox(context.Context, *connect.Request[v1.GetInboxRequest]) (*connect.Response[v1.GetInboxResponse], error)
	// Outboxを取得
	GetOutbox(context.Context, *connect.Request[v1.GetOutboxRequest]) (*connect.Response[v1.GetOutboxResponse], error)
	// フォローする
	Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error)
	// アンフォローする
	Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error)
	// フォロワーを取得
	GetFollowers(context.Context, *connect.Request[v1.GetFollowersRequest]) (*connect.Response[v1.GetFollowersResponse], error)
	// フォロー中を取得
	GetFollowing(context.Context, *connect.Request[v1.GetFollowingRequest]) (*connect.Response[v1.GetFollowingResponse], error)
	// WebFingerで検索
	WebFingerLookup(context.Context, *connect.Request[v1.WebFingerLookupRequest]) (*connect.Response[v1.WebFingerLookupResponse], error)
	// HTTPSignatureを検証
	VerifySignature(context.Context, *connect.Request[v1.VerifySignatureRequest]) (*connect.Response[v1.VerifySignatureResponse], error)
	// HTTPSignatureを生成
	GenerateSignature(context.Context, *connect.Request[v1.GenerateSignatureRequest]) (*connect.Response[v1.GenerateSignatureResponse], error)
	// リモートアクターを同期
	SyncRemoteActor(context.Context, *connect.Request[v1.SyncRemoteActorRequest]) (*connect.Response[v1.SyncRemoteActorResponse], error)
	// コレクションを取得
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
}

// NewActivityPubServiceClient constructs a client for the avion.activitypub.v1.ActivityPubService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActivityPubServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ActivityPubServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	activityPubServiceMethods := v1.File_avion_activitypub_v1_activitypub_service_proto.Services().ByName("ActivityPubService").Methods()
	return &activityPubServiceClient{
		createActor: connect.NewClient[v1.CreateActorRequest, v1.CreateActorResponse](
			httpClient,
			baseURL+ActivityPubServiceCreateActorProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("CreateActor")),
			connect.WithClientOptions(opts...),
		),
		getActor: connect.NewClient[v1.GetActorRequest, v1.GetActorResponse](
			httpClient,
			baseURL+ActivityPubServiceGetActorProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetActor")),
			connect.WithClientOptions(opts...),
		),
		updateActor: connect.NewClient[v1.UpdateActorRequest, v1.UpdateActorResponse](
			httpClient,
			baseURL+ActivityPubServiceUpdateActorProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("UpdateActor")),
			connect.WithClientOptions(opts...),
		),
		deleteActor: connect.NewClient[v1.DeleteActorRequest, v1.DeleteActorResponse](
			httpClient,
			baseURL+ActivityPubServiceDeleteActorProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("DeleteActor")),
			connect.WithClientOptions(opts...),
		),
		sendActivity: connect.NewClient[v1.SendActivityRequest, v1.SendActivityResponse](
			httpClient,
			baseURL+ActivityPubServiceSendActivityProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("SendActivity")),
			connect.WithClientOptions(opts...),
		),
		receiveActivity: connect.NewClient[v1.ReceiveActivityRequest, v1.ReceiveActivityResponse](
			httpClient,
			baseURL+ActivityPubServiceReceiveActivityProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("ReceiveActivity")),
			connect.WithClientOptions(opts...),
		),
		getInbox: connect.NewClient[v1.GetInboxRequest, v1.GetInboxResponse](
			httpClient,
			baseURL+ActivityPubServiceGetInboxProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetInbox")),
			connect.WithClientOptions(opts...),
		),
		getOutbox: connect.NewClient[v1.GetOutboxRequest, v1.GetOutboxResponse](
			httpClient,
			baseURL+ActivityPubServiceGetOutboxProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetOutbox")),
			connect.WithClientOptions(opts...),
		),
		follow: connect.NewClient[v1.FollowRequest, v1.FollowResponse](
			httpClient,
			baseURL+ActivityPubServiceFollowProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("Follow")),
			connect.WithClientOptions(opts...),
		),
		unfollow: connect.NewClient[v1.UnfollowRequest, v1.UnfollowResponse](
			httpClient,
			baseURL+ActivityPubServiceUnfollowProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("Unfollow")),
			connect.WithClientOptions(opts...),
		),
		getFollowers: connect.NewClient[v1.GetFollowersRequest, v1.GetFollowersResponse](
			httpClient,
			baseURL+ActivityPubServiceGetFollowersProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetFollowers")),
			connect.WithClientOptions(opts...),
		),
		getFollowing: connect.NewClient[v1.GetFollowingRequest, v1.GetFollowingResponse](
			httpClient,
			baseURL+ActivityPubServiceGetFollowingProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetFollowing")),
			connect.WithClientOptions(opts...),
		),
		webFingerLookup: connect.NewClient[v1.WebFingerLookupRequest, v1.WebFingerLookupResponse](
			httpClient,
			baseURL+ActivityPubServiceWebFingerLookupProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("WebFingerLookup")),
			connect.WithClientOptions(opts...),
		),
		verifySignature: connect.NewClient[v1.VerifySignatureRequest, v1.VerifySignatureResponse](
			httpClient,
			baseURL+ActivityPubServiceVerifySignatureProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("VerifySignature")),
			connect.WithClientOptions(opts...),
		),
		generateSignature: connect.NewClient[v1.GenerateSignatureRequest, v1.GenerateSignatureResponse](
			httpClient,
			baseURL+ActivityPubServiceGenerateSignatureProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GenerateSignature")),
			connect.WithClientOptions(opts...),
		),
		syncRemoteActor: connect.NewClient[v1.SyncRemoteActorRequest, v1.SyncRemoteActorResponse](
			httpClient,
			baseURL+ActivityPubServiceSyncRemoteActorProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("SyncRemoteActor")),
			connect.WithClientOptions(opts...),
		),
		getCollection: connect.NewClient[v1.GetCollectionRequest, v1.GetCollectionResponse](
			httpClient,
			baseURL+ActivityPubServiceGetCollectionProcedure,
			connect.WithSchema(activityPubServiceMethods.ByName("GetCollection")),
			connect.WithClientOptions(opts...),
		),
	}
}

// activityPubServiceClient implements ActivityPubServiceClient.
type activityPubServiceClient struct {
	createActor       *connect.Client[v1.CreateActorRequest, v1.CreateActorResponse]
	getActor          *connect.Client[v1.GetActorRequest, v1.GetActorResponse]
	updateActor       *connect.Client[v1.UpdateActorRequest, v1.UpdateActorResponse]
	deleteActor       *connect.Client[v1.DeleteActorRequest, v1.DeleteActorResponse]
	sendActivity      *connect.Client[v1.SendActivityRequest, v1.SendActivityResponse]
	receiveActivity   *connect.Client[v1.ReceiveActivityRequest, v1.ReceiveActivityResponse]
	getInbox          *connect.Client[v1.GetInboxRequest, v1.GetInboxResponse]
	getOutbox         *connect.Client[v1.GetOutboxRequest, v1.GetOutboxResponse]
	follow            *connect.Client[v1.FollowRequest, v1.FollowResponse]
	unfollow          *connect.Client[v1.UnfollowRequest, v1.UnfollowResponse]
	getFollowers      *connect.Client[v1.GetFollowersRequest, v1.GetFollowersResponse]
	getFollowing      *connect.Client[v1.GetFollowingRequest, v1.GetFollowingResponse]
	webFingerLookup   *connect.Client[v1.WebFingerLookupRequest, v1.WebFingerLookupResponse]
	verifySignature   *connect.Client[v1.VerifySignatureRequest, v1.VerifySignatureResponse]
	generateSignature *connect.Client[v1.GenerateSignatureRequest, v1.GenerateSignatureResponse]
	syncRemoteActor   *connect.Client[v1.SyncRemoteActorRequest, v1.SyncRemoteActorResponse]
	getCollection     *connect.Client[v1.GetCollectionRequest, v1.GetCollectionResponse]
}

// CreateActor calls avion.activitypub.v1.ActivityPubService.CreateActor.
func (c *activityPubServiceClient) CreateActor(ctx context.Context, req *connect.Request[v1.CreateActorRequest]) (*connect.Response[v1.CreateActorResponse], error) {
	return c.createActor.CallUnary(ctx, req)
}

// GetActor calls avion.activitypub.v1.ActivityPubService.GetActor.
func (c *activityPubServiceClient) GetActor(ctx context.Context, req *connect.Request[v1.GetActorRequest]) (*connect.Response[v1.GetActorResponse], error) {
	return c.getActor.CallUnary(ctx, req)
}

// UpdateActor calls avion.activitypub.v1.ActivityPubService.UpdateActor.
func (c *activityPubServiceClient) UpdateActor(ctx context.Context, req *connect.Request[v1.UpdateActorRequest]) (*connect.Response[v1.UpdateActorResponse], error) {
	return c.updateActor.CallUnary(ctx, req)
}

// DeleteActor calls avion.activitypub.v1.ActivityPubService.DeleteActor.
func (c *activityPubServiceClient) DeleteActor(ctx context.Context, req *connect.Request[v1.DeleteActorRequest]) (*connect.Response[v1.DeleteActorResponse], error) {
	return c.deleteActor.CallUnary(ctx, req)
}

// SendActivity calls avion.activitypub.v1.ActivityPubService.SendActivity.
func (c *activityPubServiceClient) SendActivity(ctx context.Context, req *connect.Request[v1.SendActivityRequest]) (*connect.Response[v1.SendActivityResponse], error) {
	return c.sendActivity.CallUnary(ctx, req)
}

// ReceiveActivity calls avion.activitypub.v1.ActivityPubService.ReceiveActivity.
func (c *activityPubServiceClient) ReceiveActivity(ctx context.Context, req *connect.Request[v1.ReceiveActivityRequest]) (*connect.Response[v1.ReceiveActivityResponse], error) {
	return c.receiveActivity.CallUnary(ctx, req)
}

// GetInbox calls avion.activitypub.v1.ActivityPubService.GetInbox.
func (c *activityPubServiceClient) GetInbox(ctx context.Context, req *connect.Request[v1.GetInboxRequest]) (*connect.Response[v1.GetInboxResponse], error) {
	return c.getInbox.CallUnary(ctx, req)
}

// GetOutbox calls avion.activitypub.v1.ActivityPubService.GetOutbox.
func (c *activityPubServiceClient) GetOutbox(ctx context.Context, req *connect.Request[v1.GetOutboxRequest]) (*connect.Response[v1.GetOutboxResponse], error) {
	return c.getOutbox.CallUnary(ctx, req)
}

// Follow calls avion.activitypub.v1.ActivityPubService.Follow.
func (c *activityPubServiceClient) Follow(ctx context.Context, req *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error) {
	return c.follow.CallUnary(ctx, req)
}

// Unfollow calls avion.activitypub.v1.ActivityPubService.Unfollow.
func (c *activityPubServiceClient) Unfollow(ctx context.Context, req *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error) {
	return c.unfollow.CallUnary(ctx, req)
}

// GetFollowers calls avion.activitypub.v1.ActivityPubService.GetFollowers.
func (c *activityPubServiceClient) GetFollowers(ctx context.Context, req *connect.Request[v1.GetFollowersRequest]) (*connect.Response[v1.GetFollowersResponse], error) {
	return c.getFollowers.CallUnary(ctx, req)
}

// GetFollowing calls avion.activitypub.v1.ActivityPubService.GetFollowing.
func (c *activityPubServiceClient) GetFollowing(ctx context.Context, req *connect.Request[v1.GetFollowingRequest]) (*connect.Response[v1.GetFollowingResponse], error) {
	return c.getFollowing.CallUnary(ctx, req)
}

// WebFingerLookup calls avion.activitypub.v1.ActivityPubService.WebFingerLookup.
func (c *activityPubServiceClient) WebFingerLookup(ctx context.Context, req *connect.Request[v1.WebFingerLookupRequest]) (*connect.Response[v1.WebFingerLookupResponse], error) {
	return c.webFingerLookup.CallUnary(ctx, req)
}

// VerifySignature calls avion.activitypub.v1.ActivityPubService.VerifySignature.
func (c *activityPubServiceClient) VerifySignature(ctx context.Context, req *connect.Request[v1.VerifySignatureRequest]) (*connect.Response[v1.VerifySignatureResponse], error) {
	return c.verifySignature.CallUnary(ctx, req)
}

// GenerateSignature calls avion.activitypub.v1.ActivityPubService.GenerateSignature.
func (c *activityPubServiceClient) GenerateSignature(ctx context.Context, req *connect.Request[v1.GenerateSignatureRequest]) (*connect.Response[v1.GenerateSignatureResponse], error) {
	return c.generateSignature.CallUnary(ctx, req)
}

// SyncRemoteActor calls avion.activitypub.v1.ActivityPubService.SyncRemoteActor.
func (c *activityPubServiceClient) SyncRemoteActor(ctx context.Context, req *connect.Request[v1.SyncRemoteActorRequest]) (*connect.Response[v1.SyncRemoteActorResponse], error) {
	return c.syncRemoteActor.CallUnary(ctx, req)
}

// GetCollection calls avion.activitypub.v1.ActivityPubService.GetCollection.
func (c *activityPubServiceClient) GetCollection(ctx context.Context, req *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// ActivityPubServiceHandler is an implementation of the avion.activitypub.v1.ActivityPubService
// service.
type ActivityPubServiceHandler interface {
	// アクターを作成
	CreateActor(context.Context, *connect.Request[v1.CreateActorRequest]) (*connect.Response[v1.CreateActorResponse], error)
	// アクターを取得
	GetActor(context.Context, *connect.Request[v1.GetActorRequest]) (*connect.Response[v1.GetActorResponse], error)
	// アクターを更新
	UpdateActor(context.Context, *connect.Request[v1.UpdateActorRequest]) (*connect.Response[v1.UpdateActorResponse], error)
	// アクターを削除
	DeleteActor(context.Context, *connect.Request[v1.DeleteActorRequest]) (*connect.Response[v1.DeleteActorResponse], error)
	// アクティビティを送信
	SendActivity(context.Context, *connect.Request[v1.SendActivityRequest]) (*connect.Response[v1.SendActivityResponse], error)
	// アクティビティを受信（外部からの受信処理）
	ReceiveActivity(context.Context, *connect.Request[v1.ReceiveActivityRequest]) (*connect.Response[v1.ReceiveActivityResponse], error)
	// Inboxを取得
	GetInbox(context.Context, *connect.Request[v1.GetInboxRequest]) (*connect.Response[v1.GetInboxResponse], error)
	// Outboxを取得
	GetOutbox(context.Context, *connect.Request[v1.GetOutboxRequest]) (*connect.Response[v1.GetOutboxResponse], error)
	// フォローする
	Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error)
	// アンフォローする
	Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error)
	// フォロワーを取得
	GetFollowers(context.Context, *connect.Request[v1.GetFollowersRequest]) (*connect.Response[v1.GetFollowersResponse], error)
	// フォロー中を取得
	GetFollowing(context.Context, *connect.Request[v1.GetFollowingRequest]) (*connect.Response[v1.GetFollowingResponse], error)
	// WebFingerで検索
	WebFingerLookup(context.Context, *connect.Request[v1.WebFingerLookupRequest]) (*connect.Response[v1.WebFingerLookupResponse], error)
	// HTTPSignatureを検証
	VerifySignature(context.Context, *connect.Request[v1.VerifySignatureRequest]) (*connect.Response[v1.VerifySignatureResponse], error)
	// HTTPSignatureを生成
	GenerateSignature(context.Context, *connect.Request[v1.GenerateSignatureRequest]) (*connect.Response[v1.GenerateSignatureResponse], error)
	// リモートアクターを同期
	SyncRemoteActor(context.Context, *connect.Request[v1.SyncRemoteActorRequest]) (*connect.Response[v1.SyncRemoteActorResponse], error)
	// コレクションを取得
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
}

// NewActivityPubServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActivityPubServiceHandler(svc ActivityPubServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	activityPubServiceMethods := v1.File_avion_activitypub_v1_activitypub_service_proto.Services().ByName("ActivityPubService").Methods()
	activityPubServiceCreateActorHandler := connect.NewUnaryHandler(
		ActivityPubServiceCreateActorProcedure,
		svc.CreateActor,
		connect.WithSchema(activityPubServiceMethods.ByName("CreateActor")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetActorHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetActorProcedure,
		svc.GetActor,
		connect.WithSchema(activityPubServiceMethods.ByName("GetActor")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceUpdateActorHandler := connect.NewUnaryHandler(
		ActivityPubServiceUpdateActorProcedure,
		svc.UpdateActor,
		connect.WithSchema(activityPubServiceMethods.ByName("UpdateActor")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceDeleteActorHandler := connect.NewUnaryHandler(
		ActivityPubServiceDeleteActorProcedure,
		svc.DeleteActor,
		connect.WithSchema(activityPubServiceMethods.ByName("DeleteActor")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceSendActivityHandler := connect.NewUnaryHandler(
		ActivityPubServiceSendActivityProcedure,
		svc.SendActivity,
		connect.WithSchema(activityPubServiceMethods.ByName("SendActivity")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceReceiveActivityHandler := connect.NewUnaryHandler(
		ActivityPubServiceReceiveActivityProcedure,
		svc.ReceiveActivity,
		connect.WithSchema(activityPubServiceMethods.ByName("ReceiveActivity")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetInboxHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetInboxProcedure,
		svc.GetInbox,
		connect.WithSchema(activityPubServiceMethods.ByName("GetInbox")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetOutboxHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetOutboxProcedure,
		svc.GetOutbox,
		connect.WithSchema(activityPubServiceMethods.ByName("GetOutbox")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceFollowHandler := connect.NewUnaryHandler(
		ActivityPubServiceFollowProcedure,
		svc.Follow,
		connect.WithSchema(activityPubServiceMethods.ByName("Follow")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceUnfollowHandler := connect.NewUnaryHandler(
		ActivityPubServiceUnfollowProcedure,
		svc.Unfollow,
		connect.WithSchema(activityPubServiceMethods.ByName("Unfollow")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetFollowersHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetFollowersProcedure,
		svc.GetFollowers,
		connect.WithSchema(activityPubServiceMethods.ByName("GetFollowers")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetFollowingHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetFollowingProcedure,
		svc.GetFollowing,
		connect.WithSchema(activityPubServiceMethods.ByName("GetFollowing")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceWebFingerLookupHandler := connect.NewUnaryHandler(
		ActivityPubServiceWebFingerLookupProcedure,
		svc.WebFingerLookup,
		connect.WithSchema(activityPubServiceMethods.ByName("WebFingerLookup")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceVerifySignatureHandler := connect.NewUnaryHandler(
		ActivityPubServiceVerifySignatureProcedure,
		svc.VerifySignature,
		connect.WithSchema(activityPubServiceMethods.ByName("VerifySignature")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGenerateSignatureHandler := connect.NewUnaryHandler(
		ActivityPubServiceGenerateSignatureProcedure,
		svc.GenerateSignature,
		connect.WithSchema(activityPubServiceMethods.ByName("GenerateSignature")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceSyncRemoteActorHandler := connect.NewUnaryHandler(
		ActivityPubServiceSyncRemoteActorProcedure,
		svc.SyncRemoteActor,
		connect.WithSchema(activityPubServiceMethods.ByName("SyncRemoteActor")),
		connect.WithHandlerOptions(opts...),
	)
	activityPubServiceGetCollectionHandler := connect.NewUnaryHandler(
		ActivityPubServiceGetCollectionProcedure,
		svc.GetCollection,
		connect.WithSchema(activityPubServiceMethods.ByName("GetCollection")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.activitypub.v1.ActivityPubService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ActivityPubServiceCreateActorProcedure:
			activityPubServiceCreateActorHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetActorProcedure:
			activityPubServiceGetActorHandler.ServeHTTP(w, r)
		case ActivityPubServiceUpdateActorProcedure:
			activityPubServiceUpdateActorHandler.ServeHTTP(w, r)
		case ActivityPubServiceDeleteActorProcedure:
			activityPubServiceDeleteActorHandler.ServeHTTP(w, r)
		case ActivityPubServiceSendActivityProcedure:
			activityPubServiceSendActivityHandler.ServeHTTP(w, r)
		case ActivityPubServiceReceiveActivityProcedure:
			activityPubServiceReceiveActivityHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetInboxProcedure:
			activityPubServiceGetInboxHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetOutboxProcedure:
			activityPubServiceGetOutboxHandler.ServeHTTP(w, r)
		case ActivityPubServiceFollowProcedure:
			activityPubServiceFollowHandler.ServeHTTP(w, r)
		case ActivityPubServiceUnfollowProcedure:
			activityPubServiceUnfollowHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetFollowersProcedure:
			activityPubServiceGetFollowersHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetFollowingProcedure:
			activityPubServiceGetFollowingHandler.ServeHTTP(w, r)
		case ActivityPubServiceWebFingerLookupProcedure:
			activityPubServiceWebFingerLookupHandler.ServeHTTP(w, r)
		case ActivityPubServiceVerifySignatureProcedure:
			activityPubServiceVerifySignatureHandler.ServeHTTP(w, r)
		case ActivityPubServiceGenerateSignatureProcedure:
			activityPubServiceGenerateSignatureHandler.ServeHTTP(w, r)
		case ActivityPubServiceSyncRemoteActorProcedure:
			activityPubServiceSyncRemoteActorHandler.ServeHTTP(w, r)
		case ActivityPubServiceGetCollectionProcedure:
			activityPubServiceGetCollectionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedActivityPubServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActivityPubServiceHandler struct{}

func (UnimplementedActivityPubServiceHandler) CreateActor(context.Context, *connect.Request[v1.CreateActorRequest]) (*connect.Response[v1.CreateActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.CreateActor is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetActor(context.Context, *connect.Request[v1.GetActorRequest]) (*connect.Response[v1.GetActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetActor is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) UpdateActor(context.Context, *connect.Request[v1.UpdateActorRequest]) (*connect.Response[v1.UpdateActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.UpdateActor is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) DeleteActor(context.Context, *connect.Request[v1.DeleteActorRequest]) (*connect.Response[v1.DeleteActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.DeleteActor is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) SendActivity(context.Context, *connect.Request[v1.SendActivityRequest]) (*connect.Response[v1.SendActivityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.SendActivity is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) ReceiveActivity(context.Context, *connect.Request[v1.ReceiveActivityRequest]) (*connect.Response[v1.ReceiveActivityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.ReceiveActivity is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetInbox(context.Context, *connect.Request[v1.GetInboxRequest]) (*connect.Response[v1.GetInboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetInbox is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetOutbox(context.Context, *connect.Request[v1.GetOutboxRequest]) (*connect.Response[v1.GetOutboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetOutbox is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.Follow is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.Unfollow is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetFollowers(context.Context, *connect.Request[v1.GetFollowersRequest]) (*connect.Response[v1.GetFollowersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetFollowers is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetFollowing(context.Context, *connect.Request[v1.GetFollowingRequest]) (*connect.Response[v1.GetFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetFollowing is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) WebFingerLookup(context.Context, *connect.Request[v1.WebFingerLookupRequest]) (*connect.Response[v1.WebFingerLookupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.WebFingerLookup is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) VerifySignature(context.Context, *connect.Request[v1.VerifySignatureRequest]) (*connect.Response[v1.VerifySignatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.VerifySignature is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GenerateSignature(context.Context, *connect.Request[v1.GenerateSignatureRequest]) (*connect.Response[v1.GenerateSignatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GenerateSignature is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) SyncRemoteActor(context.Context, *connect.Request[v1.SyncRemoteActorRequest]) (*connect.Response[v1.SyncRemoteActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.SyncRemoteActor is not implemented"))
}

func (UnimplementedActivityPubServiceHandler) GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.activitypub.v1.ActivityPubService.GetCollection is not implemented"))
}
