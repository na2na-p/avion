// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/user/v1/user_service.proto

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName                = "/avion.user.v1.UserService/CreateUser"
	UserService_GetUser_FullMethodName                   = "/avion.user.v1.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                = "/avion.user.v1.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName                = "/avion.user.v1.UserService/DeleteUser"
	UserService_ListUsers_FullMethodName                 = "/avion.user.v1.UserService/ListUsers"
	UserService_SearchUsers_FullMethodName               = "/avion.user.v1.UserService/SearchUsers"
	UserService_FollowUser_FullMethodName                = "/avion.user.v1.UserService/FollowUser"
	UserService_UnfollowUser_FullMethodName              = "/avion.user.v1.UserService/UnfollowUser"
	UserService_ListFollowers_FullMethodName             = "/avion.user.v1.UserService/ListFollowers"
	UserService_ListFollowing_FullMethodName             = "/avion.user.v1.UserService/ListFollowing"
	UserService_BlockUser_FullMethodName                 = "/avion.user.v1.UserService/BlockUser"
	UserService_UnblockUser_FullMethodName               = "/avion.user.v1.UserService/UnblockUser"
	UserService_MuteUser_FullMethodName                  = "/avion.user.v1.UserService/MuteUser"
	UserService_UnmuteUser_FullMethodName                = "/avion.user.v1.UserService/UnmuteUser"
	UserService_ListBlockedUsers_FullMethodName          = "/avion.user.v1.UserService/ListBlockedUsers"
	UserService_ListMutedUsers_FullMethodName            = "/avion.user.v1.UserService/ListMutedUsers"
	UserService_GetUsersByIDs_FullMethodName             = "/avion.user.v1.UserService/GetUsersByIDs"
	UserService_BatchCheckFollowStatus_FullMethodName    = "/avion.user.v1.UserService/BatchCheckFollowStatus"
	UserService_GetUserProfile_FullMethodName            = "/avion.user.v1.UserService/GetUserProfile"
	UserService_UpdateUserProfile_FullMethodName         = "/avion.user.v1.UserService/UpdateUserProfile"
	UserService_GetUserPrivacySettings_FullMethodName    = "/avion.user.v1.UserService/GetUserPrivacySettings"
	UserService_UpdateUserPrivacySettings_FullMethodName = "/avion.user.v1.UserService/UpdateUserPrivacySettings"
	UserService_ApproveFollowRequest_FullMethodName      = "/avion.user.v1.UserService/ApproveFollowRequest"
	UserService_RejectFollowRequest_FullMethodName       = "/avion.user.v1.UserService/RejectFollowRequest"
	UserService_ListFollowRequests_FullMethodName        = "/avion.user.v1.UserService/ListFollowRequests"
	UserService_CheckUserRelationship_FullMethodName     = "/avion.user.v1.UserService/CheckUserRelationship"
	UserService_CreateUserList_FullMethodName            = "/avion.user.v1.UserService/CreateUserList"
	UserService_GetUserList_FullMethodName               = "/avion.user.v1.UserService/GetUserList"
	UserService_UpdateUserList_FullMethodName            = "/avion.user.v1.UserService/UpdateUserList"
	UserService_DeleteUserList_FullMethodName            = "/avion.user.v1.UserService/DeleteUserList"
	UserService_AddUsersToList_FullMethodName            = "/avion.user.v1.UserService/AddUsersToList"
	UserService_RemoveUsersFromList_FullMethodName       = "/avion.user.v1.UserService/RemoveUsersFromList"
	UserService_ListUserLists_FullMethodName             = "/avion.user.v1.UserService/ListUserLists"
	UserService_GetUserListMembers_FullMethodName        = "/avion.user.v1.UserService/GetUserListMembers"
	UserService_CreateMuteKeyword_FullMethodName         = "/avion.user.v1.UserService/CreateMuteKeyword"
	UserService_DeleteMuteKeyword_FullMethodName         = "/avion.user.v1.UserService/DeleteMuteKeyword"
	UserService_ListMuteKeywords_FullMethodName          = "/avion.user.v1.UserService/ListMuteKeywords"
	UserService_GetUserStats_FullMethodName              = "/avion.user.v1.UserService/GetUserStats"
	UserService_SuspendUser_FullMethodName               = "/avion.user.v1.UserService/SuspendUser"
	UserService_UnsuspendUser_FullMethodName             = "/avion.user.v1.UserService/UnsuspendUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ユーザーサービス
type UserServiceClient interface {
	// ユーザー作成
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// ユーザー取得
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// ユーザー更新
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// ユーザー削除
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// ユーザー一覧取得
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// ユーザー検索
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// フォロー
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	// フォロー解除
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	// フォロワー一覧取得
	ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error)
	// フォロー中一覧取得
	ListFollowing(ctx context.Context, in *ListFollowingRequest, opts ...grpc.CallOption) (*ListFollowingResponse, error)
	// ブロック
	BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error)
	// ブロック解除
	UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error)
	// ミュート
	MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*MuteUserResponse, error)
	// ミュート解除
	UnmuteUser(ctx context.Context, in *UnmuteUserRequest, opts ...grpc.CallOption) (*UnmuteUserResponse, error)
	// ブロック一覧取得
	ListBlockedUsers(ctx context.Context, in *ListBlockedUsersRequest, opts ...grpc.CallOption) (*ListBlockedUsersResponse, error)
	// ミュート一覧取得
	ListMutedUsers(ctx context.Context, in *ListMutedUsersRequest, opts ...grpc.CallOption) (*ListMutedUsersResponse, error)
	// バッチ操作
	// 複数ユーザー情報取得
	GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error)
	// 複数ユーザーのフォロー状態確認
	BatchCheckFollowStatus(ctx context.Context, in *BatchCheckFollowStatusRequest, opts ...grpc.CallOption) (*BatchCheckFollowStatusResponse, error)
	// プロフィール管理
	// プロフィール取得
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// プロフィール更新
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// プライバシー設定管理
	// プライバシー設定取得
	GetUserPrivacySettings(ctx context.Context, in *GetUserPrivacySettingsRequest, opts ...grpc.CallOption) (*GetUserPrivacySettingsResponse, error)
	// プライバシー設定更新
	UpdateUserPrivacySettings(ctx context.Context, in *UpdateUserPrivacySettingsRequest, opts ...grpc.CallOption) (*UpdateUserPrivacySettingsResponse, error)
	// フォローリクエスト管理（非公開アカウント用）
	// フォローリクエスト承認
	ApproveFollowRequest(ctx context.Context, in *ApproveFollowRequestRequest, opts ...grpc.CallOption) (*ApproveFollowRequestResponse, error)
	// フォローリクエスト拒否
	RejectFollowRequest(ctx context.Context, in *RejectFollowRequestRequest, opts ...grpc.CallOption) (*RejectFollowRequestResponse, error)
	// フォローリクエスト一覧取得
	ListFollowRequests(ctx context.Context, in *ListFollowRequestsRequest, opts ...grpc.CallOption) (*ListFollowRequestsResponse, error)
	// 関係性確認
	// ユーザー間の関係性を確認
	CheckUserRelationship(ctx context.Context, in *CheckUserRelationshipRequest, opts ...grpc.CallOption) (*CheckUserRelationshipResponse, error)
	// ユーザーリスト管理
	// ユーザーリスト作成
	CreateUserList(ctx context.Context, in *CreateUserListRequest, opts ...grpc.CallOption) (*CreateUserListResponse, error)
	// ユーザーリスト取得
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	// ユーザーリスト更新
	UpdateUserList(ctx context.Context, in *UpdateUserListRequest, opts ...grpc.CallOption) (*UpdateUserListResponse, error)
	// ユーザーリスト削除
	DeleteUserList(ctx context.Context, in *DeleteUserListRequest, opts ...grpc.CallOption) (*DeleteUserListResponse, error)
	// ユーザーリストにユーザー追加
	AddUsersToList(ctx context.Context, in *AddUsersToListRequest, opts ...grpc.CallOption) (*AddUsersToListResponse, error)
	// ユーザーリストからユーザー削除
	RemoveUsersFromList(ctx context.Context, in *RemoveUsersFromListRequest, opts ...grpc.CallOption) (*RemoveUsersFromListResponse, error)
	// ユーザーリスト一覧取得
	ListUserLists(ctx context.Context, in *ListUserListsRequest, opts ...grpc.CallOption) (*ListUserListsResponse, error)
	// ユーザーリストのメンバー取得
	GetUserListMembers(ctx context.Context, in *GetUserListMembersRequest, opts ...grpc.CallOption) (*GetUserListMembersResponse, error)
	// キーワードミュート管理
	// キーワードミュート作成
	CreateMuteKeyword(ctx context.Context, in *CreateMuteKeywordRequest, opts ...grpc.CallOption) (*CreateMuteKeywordResponse, error)
	// キーワードミュート削除
	DeleteMuteKeyword(ctx context.Context, in *DeleteMuteKeywordRequest, opts ...grpc.CallOption) (*DeleteMuteKeywordResponse, error)
	// キーワードミュート一覧取得
	ListMuteKeywords(ctx context.Context, in *ListMuteKeywordsRequest, opts ...grpc.CallOption) (*ListMuteKeywordsResponse, error)
	// ユーザー統計
	// ユーザー統計情報取得
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	// 管理者機能
	// ユーザー停止
	SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...grpc.CallOption) (*SuspendUserResponse, error)
	// ユーザー停止解除
	UnsuspendUser(ctx context.Context, in *UnsuspendUserRequest, opts ...grpc.CallOption) (*UnsuspendUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, UserService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, UserService_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnfollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowersResponse)
	err := c.cc.Invoke(ctx, UserService_ListFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFollowing(ctx context.Context, in *ListFollowingRequest, opts ...grpc.CallOption) (*ListFollowingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowingResponse)
	err := c.cc.Invoke(ctx, UserService_ListFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUserResponse)
	err := c.cc.Invoke(ctx, UserService_BlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnblockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*MuteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteUserResponse)
	err := c.cc.Invoke(ctx, UserService_MuteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnmuteUser(ctx context.Context, in *UnmuteUserRequest, opts ...grpc.CallOption) (*UnmuteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmuteUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnmuteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListBlockedUsers(ctx context.Context, in *ListBlockedUsersRequest, opts ...grpc.CallOption) (*ListBlockedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlockedUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListBlockedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListMutedUsers(ctx context.Context, in *ListMutedUsersRequest, opts ...grpc.CallOption) (*ListMutedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMutedUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListMutedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByIDsResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsersByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchCheckFollowStatus(ctx context.Context, in *BatchCheckFollowStatusRequest, opts ...grpc.CallOption) (*BatchCheckFollowStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckFollowStatusResponse)
	err := c.cc.Invoke(ctx, UserService_BatchCheckFollowStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPrivacySettings(ctx context.Context, in *GetUserPrivacySettingsRequest, opts ...grpc.CallOption) (*GetUserPrivacySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPrivacySettingsResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPrivacySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPrivacySettings(ctx context.Context, in *UpdateUserPrivacySettingsRequest, opts ...grpc.CallOption) (*UpdateUserPrivacySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPrivacySettingsResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPrivacySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApproveFollowRequest(ctx context.Context, in *ApproveFollowRequestRequest, opts ...grpc.CallOption) (*ApproveFollowRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveFollowRequestResponse)
	err := c.cc.Invoke(ctx, UserService_ApproveFollowRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RejectFollowRequest(ctx context.Context, in *RejectFollowRequestRequest, opts ...grpc.CallOption) (*RejectFollowRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectFollowRequestResponse)
	err := c.cc.Invoke(ctx, UserService_RejectFollowRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFollowRequests(ctx context.Context, in *ListFollowRequestsRequest, opts ...grpc.CallOption) (*ListFollowRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowRequestsResponse)
	err := c.cc.Invoke(ctx, UserService_ListFollowRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckUserRelationship(ctx context.Context, in *CheckUserRelationshipRequest, opts ...grpc.CallOption) (*CheckUserRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserRelationshipResponse)
	err := c.cc.Invoke(ctx, UserService_CheckUserRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserList(ctx context.Context, in *CreateUserListRequest, opts ...grpc.CallOption) (*CreateUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserListResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserList(ctx context.Context, in *UpdateUserListRequest, opts ...grpc.CallOption) (*UpdateUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserListResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserList(ctx context.Context, in *DeleteUserListRequest, opts ...grpc.CallOption) (*DeleteUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserListResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUsersToList(ctx context.Context, in *AddUsersToListRequest, opts ...grpc.CallOption) (*AddUsersToListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUsersToListResponse)
	err := c.cc.Invoke(ctx, UserService_AddUsersToList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUsersFromList(ctx context.Context, in *RemoveUsersFromListRequest, opts ...grpc.CallOption) (*RemoveUsersFromListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUsersFromListResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveUsersFromList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUserLists(ctx context.Context, in *ListUserListsRequest, opts ...grpc.CallOption) (*ListUserListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserListsResponse)
	err := c.cc.Invoke(ctx, UserService_ListUserLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserListMembers(ctx context.Context, in *GetUserListMembersRequest, opts ...grpc.CallOption) (*GetUserListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListMembersResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateMuteKeyword(ctx context.Context, in *CreateMuteKeywordRequest, opts ...grpc.CallOption) (*CreateMuteKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMuteKeywordResponse)
	err := c.cc.Invoke(ctx, UserService_CreateMuteKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteMuteKeyword(ctx context.Context, in *DeleteMuteKeywordRequest, opts ...grpc.CallOption) (*DeleteMuteKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMuteKeywordResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteMuteKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListMuteKeywords(ctx context.Context, in *ListMuteKeywordsRequest, opts ...grpc.CallOption) (*ListMuteKeywordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMuteKeywordsResponse)
	err := c.cc.Invoke(ctx, UserService_ListMuteKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...grpc.CallOption) (*SuspendUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendUserResponse)
	err := c.cc.Invoke(ctx, UserService_SuspendUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnsuspendUser(ctx context.Context, in *UnsuspendUserRequest, opts ...grpc.CallOption) (*UnsuspendUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsuspendUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnsuspendUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// ユーザーサービス
type UserServiceServer interface {
	// ユーザー作成
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// ユーザー取得
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// ユーザー更新
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// ユーザー削除
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// ユーザー一覧取得
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// ユーザー検索
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// フォロー
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	// フォロー解除
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	// フォロワー一覧取得
	ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error)
	// フォロー中一覧取得
	ListFollowing(context.Context, *ListFollowingRequest) (*ListFollowingResponse, error)
	// ブロック
	BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error)
	// ブロック解除
	UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error)
	// ミュート
	MuteUser(context.Context, *MuteUserRequest) (*MuteUserResponse, error)
	// ミュート解除
	UnmuteUser(context.Context, *UnmuteUserRequest) (*UnmuteUserResponse, error)
	// ブロック一覧取得
	ListBlockedUsers(context.Context, *ListBlockedUsersRequest) (*ListBlockedUsersResponse, error)
	// ミュート一覧取得
	ListMutedUsers(context.Context, *ListMutedUsersRequest) (*ListMutedUsersResponse, error)
	// バッチ操作
	// 複数ユーザー情報取得
	GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error)
	// 複数ユーザーのフォロー状態確認
	BatchCheckFollowStatus(context.Context, *BatchCheckFollowStatusRequest) (*BatchCheckFollowStatusResponse, error)
	// プロフィール管理
	// プロフィール取得
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// プロフィール更新
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// プライバシー設定管理
	// プライバシー設定取得
	GetUserPrivacySettings(context.Context, *GetUserPrivacySettingsRequest) (*GetUserPrivacySettingsResponse, error)
	// プライバシー設定更新
	UpdateUserPrivacySettings(context.Context, *UpdateUserPrivacySettingsRequest) (*UpdateUserPrivacySettingsResponse, error)
	// フォローリクエスト管理（非公開アカウント用）
	// フォローリクエスト承認
	ApproveFollowRequest(context.Context, *ApproveFollowRequestRequest) (*ApproveFollowRequestResponse, error)
	// フォローリクエスト拒否
	RejectFollowRequest(context.Context, *RejectFollowRequestRequest) (*RejectFollowRequestResponse, error)
	// フォローリクエスト一覧取得
	ListFollowRequests(context.Context, *ListFollowRequestsRequest) (*ListFollowRequestsResponse, error)
	// 関係性確認
	// ユーザー間の関係性を確認
	CheckUserRelationship(context.Context, *CheckUserRelationshipRequest) (*CheckUserRelationshipResponse, error)
	// ユーザーリスト管理
	// ユーザーリスト作成
	CreateUserList(context.Context, *CreateUserListRequest) (*CreateUserListResponse, error)
	// ユーザーリスト取得
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	// ユーザーリスト更新
	UpdateUserList(context.Context, *UpdateUserListRequest) (*UpdateUserListResponse, error)
	// ユーザーリスト削除
	DeleteUserList(context.Context, *DeleteUserListRequest) (*DeleteUserListResponse, error)
	// ユーザーリストにユーザー追加
	AddUsersToList(context.Context, *AddUsersToListRequest) (*AddUsersToListResponse, error)
	// ユーザーリストからユーザー削除
	RemoveUsersFromList(context.Context, *RemoveUsersFromListRequest) (*RemoveUsersFromListResponse, error)
	// ユーザーリスト一覧取得
	ListUserLists(context.Context, *ListUserListsRequest) (*ListUserListsResponse, error)
	// ユーザーリストのメンバー取得
	GetUserListMembers(context.Context, *GetUserListMembersRequest) (*GetUserListMembersResponse, error)
	// キーワードミュート管理
	// キーワードミュート作成
	CreateMuteKeyword(context.Context, *CreateMuteKeywordRequest) (*CreateMuteKeywordResponse, error)
	// キーワードミュート削除
	DeleteMuteKeyword(context.Context, *DeleteMuteKeywordRequest) (*DeleteMuteKeywordResponse, error)
	// キーワードミュート一覧取得
	ListMuteKeywords(context.Context, *ListMuteKeywordsRequest) (*ListMuteKeywordsResponse, error)
	// ユーザー統計
	// ユーザー統計情報取得
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error)
	// 管理者機能
	// ユーザー停止
	SuspendUser(context.Context, *SuspendUserRequest) (*SuspendUserResponse, error)
	// ユーザー停止解除
	UnsuspendUser(context.Context, *UnsuspendUserRequest) (*UnsuspendUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserServiceServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedUserServiceServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedUserServiceServer) ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowers not implemented")
}
func (UnimplementedUserServiceServer) ListFollowing(context.Context, *ListFollowingRequest) (*ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowing not implemented")
}
func (UnimplementedUserServiceServer) BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUserServiceServer) UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedUserServiceServer) MuteUser(context.Context, *MuteUserRequest) (*MuteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteUser not implemented")
}
func (UnimplementedUserServiceServer) UnmuteUser(context.Context, *UnmuteUserRequest) (*UnmuteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteUser not implemented")
}
func (UnimplementedUserServiceServer) ListBlockedUsers(context.Context, *ListBlockedUsersRequest) (*ListBlockedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedUsers not implemented")
}
func (UnimplementedUserServiceServer) ListMutedUsers(context.Context, *ListMutedUsersRequest) (*ListMutedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMutedUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIDs not implemented")
}
func (UnimplementedUserServiceServer) BatchCheckFollowStatus(context.Context, *BatchCheckFollowStatusRequest) (*BatchCheckFollowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckFollowStatus not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetUserPrivacySettings(context.Context, *GetUserPrivacySettingsRequest) (*GetUserPrivacySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivacySettings not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPrivacySettings(context.Context, *UpdateUserPrivacySettingsRequest) (*UpdateUserPrivacySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPrivacySettings not implemented")
}
func (UnimplementedUserServiceServer) ApproveFollowRequest(context.Context, *ApproveFollowRequestRequest) (*ApproveFollowRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFollowRequest not implemented")
}
func (UnimplementedUserServiceServer) RejectFollowRequest(context.Context, *RejectFollowRequestRequest) (*RejectFollowRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFollowRequest not implemented")
}
func (UnimplementedUserServiceServer) ListFollowRequests(context.Context, *ListFollowRequestsRequest) (*ListFollowRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowRequests not implemented")
}
func (UnimplementedUserServiceServer) CheckUserRelationship(context.Context, *CheckUserRelationshipRequest) (*CheckUserRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserRelationship not implemented")
}
func (UnimplementedUserServiceServer) CreateUserList(context.Context, *CreateUserListRequest) (*CreateUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserList not implemented")
}
func (UnimplementedUserServiceServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserList(context.Context, *UpdateUserListRequest) (*UpdateUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserList not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserList(context.Context, *DeleteUserListRequest) (*DeleteUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserList not implemented")
}
func (UnimplementedUserServiceServer) AddUsersToList(context.Context, *AddUsersToListRequest) (*AddUsersToListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToList not implemented")
}
func (UnimplementedUserServiceServer) RemoveUsersFromList(context.Context, *RemoveUsersFromListRequest) (*RemoveUsersFromListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersFromList not implemented")
}
func (UnimplementedUserServiceServer) ListUserLists(context.Context, *ListUserListsRequest) (*ListUserListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserLists not implemented")
}
func (UnimplementedUserServiceServer) GetUserListMembers(context.Context, *GetUserListMembersRequest) (*GetUserListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserListMembers not implemented")
}
func (UnimplementedUserServiceServer) CreateMuteKeyword(context.Context, *CreateMuteKeywordRequest) (*CreateMuteKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMuteKeyword not implemented")
}
func (UnimplementedUserServiceServer) DeleteMuteKeyword(context.Context, *DeleteMuteKeywordRequest) (*DeleteMuteKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMuteKeyword not implemented")
}
func (UnimplementedUserServiceServer) ListMuteKeywords(context.Context, *ListMuteKeywordsRequest) (*ListMuteKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMuteKeywords not implemented")
}
func (UnimplementedUserServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedUserServiceServer) SuspendUser(context.Context, *SuspendUserRequest) (*SuspendUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendUser not implemented")
}
func (UnimplementedUserServiceServer) UnsuspendUser(context.Context, *UnsuspendUserRequest) (*UnsuspendUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuspendUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFollowers(ctx, req.(*ListFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFollowing(ctx, req.(*ListFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnblockUser(ctx, req.(*UnblockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MuteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MuteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_MuteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MuteUser(ctx, req.(*MuteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnmuteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnmuteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnmuteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnmuteUser(ctx, req.(*UnmuteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListBlockedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListBlockedUsers(ctx, req.(*ListBlockedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListMutedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMutedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListMutedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListMutedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListMutedUsers(ctx, req.(*ListMutedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsersByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsersByIDs(ctx, req.(*GetUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchCheckFollowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckFollowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchCheckFollowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchCheckFollowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchCheckFollowStatus(ctx, req.(*BatchCheckFollowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivacySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPrivacySettings(ctx, req.(*GetUserPrivacySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPrivacySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPrivacySettings(ctx, req.(*UpdateUserPrivacySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApproveFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveFollowRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApproveFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ApproveFollowRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApproveFollowRequest(ctx, req.(*ApproveFollowRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RejectFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectFollowRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RejectFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RejectFollowRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RejectFollowRequest(ctx, req.(*RejectFollowRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFollowRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFollowRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListFollowRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFollowRequests(ctx, req.(*ListFollowRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckUserRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckUserRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckUserRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckUserRelationship(ctx, req.(*CheckUserRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserList(ctx, req.(*CreateUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserList(ctx, req.(*UpdateUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserList(ctx, req.(*DeleteUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUsersToList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUsersToList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUsersToList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUsersToList(ctx, req.(*AddUsersToListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveUsersFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsersFromListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveUsersFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveUsersFromList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveUsersFromList(ctx, req.(*RemoveUsersFromListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUserLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUserLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUserLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUserLists(ctx, req.(*ListUserListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserListMembers(ctx, req.(*GetUserListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateMuteKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMuteKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateMuteKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateMuteKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateMuteKeyword(ctx, req.(*CreateMuteKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteMuteKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMuteKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteMuteKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteMuteKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteMuteKeyword(ctx, req.(*DeleteMuteKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListMuteKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMuteKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListMuteKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListMuteKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListMuteKeywords(ctx, req.(*ListMuteKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SuspendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SuspendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SuspendUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SuspendUser(ctx, req.(*SuspendUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnsuspendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuspendUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnsuspendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnsuspendUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnsuspendUser(ctx, req.(*UnsuspendUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserService_SearchUsers_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _UserService_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _UserService_UnfollowUser_Handler,
		},
		{
			MethodName: "ListFollowers",
			Handler:    _UserService_ListFollowers_Handler,
		},
		{
			MethodName: "ListFollowing",
			Handler:    _UserService_ListFollowing_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _UserService_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _UserService_UnblockUser_Handler,
		},
		{
			MethodName: "MuteUser",
			Handler:    _UserService_MuteUser_Handler,
		},
		{
			MethodName: "UnmuteUser",
			Handler:    _UserService_UnmuteUser_Handler,
		},
		{
			MethodName: "ListBlockedUsers",
			Handler:    _UserService_ListBlockedUsers_Handler,
		},
		{
			MethodName: "ListMutedUsers",
			Handler:    _UserService_ListMutedUsers_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _UserService_GetUsersByIDs_Handler,
		},
		{
			MethodName: "BatchCheckFollowStatus",
			Handler:    _UserService_BatchCheckFollowStatus_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserPrivacySettings",
			Handler:    _UserService_GetUserPrivacySettings_Handler,
		},
		{
			MethodName: "UpdateUserPrivacySettings",
			Handler:    _UserService_UpdateUserPrivacySettings_Handler,
		},
		{
			MethodName: "ApproveFollowRequest",
			Handler:    _UserService_ApproveFollowRequest_Handler,
		},
		{
			MethodName: "RejectFollowRequest",
			Handler:    _UserService_RejectFollowRequest_Handler,
		},
		{
			MethodName: "ListFollowRequests",
			Handler:    _UserService_ListFollowRequests_Handler,
		},
		{
			MethodName: "CheckUserRelationship",
			Handler:    _UserService_CheckUserRelationship_Handler,
		},
		{
			MethodName: "CreateUserList",
			Handler:    _UserService_CreateUserList_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _UserService_GetUserList_Handler,
		},
		{
			MethodName: "UpdateUserList",
			Handler:    _UserService_UpdateUserList_Handler,
		},
		{
			MethodName: "DeleteUserList",
			Handler:    _UserService_DeleteUserList_Handler,
		},
		{
			MethodName: "AddUsersToList",
			Handler:    _UserService_AddUsersToList_Handler,
		},
		{
			MethodName: "RemoveUsersFromList",
			Handler:    _UserService_RemoveUsersFromList_Handler,
		},
		{
			MethodName: "ListUserLists",
			Handler:    _UserService_ListUserLists_Handler,
		},
		{
			MethodName: "GetUserListMembers",
			Handler:    _UserService_GetUserListMembers_Handler,
		},
		{
			MethodName: "CreateMuteKeyword",
			Handler:    _UserService_CreateMuteKeyword_Handler,
		},
		{
			MethodName: "DeleteMuteKeyword",
			Handler:    _UserService_DeleteMuteKeyword_Handler,
		},
		{
			MethodName: "ListMuteKeywords",
			Handler:    _UserService_ListMuteKeywords_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _UserService_GetUserStats_Handler,
		},
		{
			MethodName: "SuspendUser",
			Handler:    _UserService_SuspendUser_Handler,
		},
		{
			MethodName: "UnsuspendUser",
			Handler:    _UserService_UnsuspendUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avion/user/v1/user_service.proto",
}
