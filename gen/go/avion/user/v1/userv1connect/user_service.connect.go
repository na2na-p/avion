// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/user/v1/user_service.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "avion.user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/avion.user.v1.UserService/CreateUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/avion.user.v1.UserService/GetUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/avion.user.v1.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/avion.user.v1.UserService/DeleteUser"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/avion.user.v1.UserService/ListUsers"
	// UserServiceSearchUsersProcedure is the fully-qualified name of the UserService's SearchUsers RPC.
	UserServiceSearchUsersProcedure = "/avion.user.v1.UserService/SearchUsers"
	// UserServiceFollowUserProcedure is the fully-qualified name of the UserService's FollowUser RPC.
	UserServiceFollowUserProcedure = "/avion.user.v1.UserService/FollowUser"
	// UserServiceUnfollowUserProcedure is the fully-qualified name of the UserService's UnfollowUser
	// RPC.
	UserServiceUnfollowUserProcedure = "/avion.user.v1.UserService/UnfollowUser"
	// UserServiceListFollowersProcedure is the fully-qualified name of the UserService's ListFollowers
	// RPC.
	UserServiceListFollowersProcedure = "/avion.user.v1.UserService/ListFollowers"
	// UserServiceListFollowingProcedure is the fully-qualified name of the UserService's ListFollowing
	// RPC.
	UserServiceListFollowingProcedure = "/avion.user.v1.UserService/ListFollowing"
	// UserServiceBlockUserProcedure is the fully-qualified name of the UserService's BlockUser RPC.
	UserServiceBlockUserProcedure = "/avion.user.v1.UserService/BlockUser"
	// UserServiceUnblockUserProcedure is the fully-qualified name of the UserService's UnblockUser RPC.
	UserServiceUnblockUserProcedure = "/avion.user.v1.UserService/UnblockUser"
	// UserServiceMuteUserProcedure is the fully-qualified name of the UserService's MuteUser RPC.
	UserServiceMuteUserProcedure = "/avion.user.v1.UserService/MuteUser"
	// UserServiceUnmuteUserProcedure is the fully-qualified name of the UserService's UnmuteUser RPC.
	UserServiceUnmuteUserProcedure = "/avion.user.v1.UserService/UnmuteUser"
	// UserServiceListBlockedUsersProcedure is the fully-qualified name of the UserService's
	// ListBlockedUsers RPC.
	UserServiceListBlockedUsersProcedure = "/avion.user.v1.UserService/ListBlockedUsers"
	// UserServiceListMutedUsersProcedure is the fully-qualified name of the UserService's
	// ListMutedUsers RPC.
	UserServiceListMutedUsersProcedure = "/avion.user.v1.UserService/ListMutedUsers"
	// UserServiceGetUsersByIDsProcedure is the fully-qualified name of the UserService's GetUsersByIDs
	// RPC.
	UserServiceGetUsersByIDsProcedure = "/avion.user.v1.UserService/GetUsersByIDs"
	// UserServiceBatchCheckFollowStatusProcedure is the fully-qualified name of the UserService's
	// BatchCheckFollowStatus RPC.
	UserServiceBatchCheckFollowStatusProcedure = "/avion.user.v1.UserService/BatchCheckFollowStatus"
	// UserServiceGetUserProfileProcedure is the fully-qualified name of the UserService's
	// GetUserProfile RPC.
	UserServiceGetUserProfileProcedure = "/avion.user.v1.UserService/GetUserProfile"
	// UserServiceUpdateUserProfileProcedure is the fully-qualified name of the UserService's
	// UpdateUserProfile RPC.
	UserServiceUpdateUserProfileProcedure = "/avion.user.v1.UserService/UpdateUserProfile"
	// UserServiceGetUserPrivacySettingsProcedure is the fully-qualified name of the UserService's
	// GetUserPrivacySettings RPC.
	UserServiceGetUserPrivacySettingsProcedure = "/avion.user.v1.UserService/GetUserPrivacySettings"
	// UserServiceUpdateUserPrivacySettingsProcedure is the fully-qualified name of the UserService's
	// UpdateUserPrivacySettings RPC.
	UserServiceUpdateUserPrivacySettingsProcedure = "/avion.user.v1.UserService/UpdateUserPrivacySettings"
	// UserServiceApproveFollowRequestProcedure is the fully-qualified name of the UserService's
	// ApproveFollowRequest RPC.
	UserServiceApproveFollowRequestProcedure = "/avion.user.v1.UserService/ApproveFollowRequest"
	// UserServiceRejectFollowRequestProcedure is the fully-qualified name of the UserService's
	// RejectFollowRequest RPC.
	UserServiceRejectFollowRequestProcedure = "/avion.user.v1.UserService/RejectFollowRequest"
	// UserServiceListFollowRequestsProcedure is the fully-qualified name of the UserService's
	// ListFollowRequests RPC.
	UserServiceListFollowRequestsProcedure = "/avion.user.v1.UserService/ListFollowRequests"
	// UserServiceCheckUserRelationshipProcedure is the fully-qualified name of the UserService's
	// CheckUserRelationship RPC.
	UserServiceCheckUserRelationshipProcedure = "/avion.user.v1.UserService/CheckUserRelationship"
	// UserServiceCreateUserListProcedure is the fully-qualified name of the UserService's
	// CreateUserList RPC.
	UserServiceCreateUserListProcedure = "/avion.user.v1.UserService/CreateUserList"
	// UserServiceGetUserListProcedure is the fully-qualified name of the UserService's GetUserList RPC.
	UserServiceGetUserListProcedure = "/avion.user.v1.UserService/GetUserList"
	// UserServiceUpdateUserListProcedure is the fully-qualified name of the UserService's
	// UpdateUserList RPC.
	UserServiceUpdateUserListProcedure = "/avion.user.v1.UserService/UpdateUserList"
	// UserServiceDeleteUserListProcedure is the fully-qualified name of the UserService's
	// DeleteUserList RPC.
	UserServiceDeleteUserListProcedure = "/avion.user.v1.UserService/DeleteUserList"
	// UserServiceAddUsersToListProcedure is the fully-qualified name of the UserService's
	// AddUsersToList RPC.
	UserServiceAddUsersToListProcedure = "/avion.user.v1.UserService/AddUsersToList"
	// UserServiceRemoveUsersFromListProcedure is the fully-qualified name of the UserService's
	// RemoveUsersFromList RPC.
	UserServiceRemoveUsersFromListProcedure = "/avion.user.v1.UserService/RemoveUsersFromList"
	// UserServiceListUserListsProcedure is the fully-qualified name of the UserService's ListUserLists
	// RPC.
	UserServiceListUserListsProcedure = "/avion.user.v1.UserService/ListUserLists"
	// UserServiceGetUserListMembersProcedure is the fully-qualified name of the UserService's
	// GetUserListMembers RPC.
	UserServiceGetUserListMembersProcedure = "/avion.user.v1.UserService/GetUserListMembers"
	// UserServiceCreateMuteKeywordProcedure is the fully-qualified name of the UserService's
	// CreateMuteKeyword RPC.
	UserServiceCreateMuteKeywordProcedure = "/avion.user.v1.UserService/CreateMuteKeyword"
	// UserServiceDeleteMuteKeywordProcedure is the fully-qualified name of the UserService's
	// DeleteMuteKeyword RPC.
	UserServiceDeleteMuteKeywordProcedure = "/avion.user.v1.UserService/DeleteMuteKeyword"
	// UserServiceListMuteKeywordsProcedure is the fully-qualified name of the UserService's
	// ListMuteKeywords RPC.
	UserServiceListMuteKeywordsProcedure = "/avion.user.v1.UserService/ListMuteKeywords"
	// UserServiceGetUserStatsProcedure is the fully-qualified name of the UserService's GetUserStats
	// RPC.
	UserServiceGetUserStatsProcedure = "/avion.user.v1.UserService/GetUserStats"
	// UserServiceSuspendUserProcedure is the fully-qualified name of the UserService's SuspendUser RPC.
	UserServiceSuspendUserProcedure = "/avion.user.v1.UserService/SuspendUser"
	// UserServiceUnsuspendUserProcedure is the fully-qualified name of the UserService's UnsuspendUser
	// RPC.
	UserServiceUnsuspendUserProcedure = "/avion.user.v1.UserService/UnsuspendUser"
)

// UserServiceClient is a client for the avion.user.v1.UserService service.
type UserServiceClient interface {
	// ユーザー作成
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// ユーザー取得
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// ユーザー更新
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// ユーザー削除
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// ユーザー一覧取得
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// ユーザー検索
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	// フォロー
	FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error)
	// フォロー解除
	UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error)
	// フォロワー一覧取得
	ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error)
	// フォロー中一覧取得
	ListFollowing(context.Context, *connect.Request[v1.ListFollowingRequest]) (*connect.Response[v1.ListFollowingResponse], error)
	// ブロック
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// ブロック解除
	UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error)
	// ミュート
	MuteUser(context.Context, *connect.Request[v1.MuteUserRequest]) (*connect.Response[v1.MuteUserResponse], error)
	// ミュート解除
	UnmuteUser(context.Context, *connect.Request[v1.UnmuteUserRequest]) (*connect.Response[v1.UnmuteUserResponse], error)
	// ブロック一覧取得
	ListBlockedUsers(context.Context, *connect.Request[v1.ListBlockedUsersRequest]) (*connect.Response[v1.ListBlockedUsersResponse], error)
	// ミュート一覧取得
	ListMutedUsers(context.Context, *connect.Request[v1.ListMutedUsersRequest]) (*connect.Response[v1.ListMutedUsersResponse], error)
	// バッチ操作
	// 複数ユーザー情報取得
	GetUsersByIDs(context.Context, *connect.Request[v1.GetUsersByIDsRequest]) (*connect.Response[v1.GetUsersByIDsResponse], error)
	// 複数ユーザーのフォロー状態確認
	BatchCheckFollowStatus(context.Context, *connect.Request[v1.BatchCheckFollowStatusRequest]) (*connect.Response[v1.BatchCheckFollowStatusResponse], error)
	// プロフィール管理
	// プロフィール取得
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
	// プロフィール更新
	UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	// プライバシー設定管理
	// プライバシー設定取得
	GetUserPrivacySettings(context.Context, *connect.Request[v1.GetUserPrivacySettingsRequest]) (*connect.Response[v1.GetUserPrivacySettingsResponse], error)
	// プライバシー設定更新
	UpdateUserPrivacySettings(context.Context, *connect.Request[v1.UpdateUserPrivacySettingsRequest]) (*connect.Response[v1.UpdateUserPrivacySettingsResponse], error)
	// フォローリクエスト管理（非公開アカウント用）
	// フォローリクエスト承認
	ApproveFollowRequest(context.Context, *connect.Request[v1.ApproveFollowRequestRequest]) (*connect.Response[v1.ApproveFollowRequestResponse], error)
	// フォローリクエスト拒否
	RejectFollowRequest(context.Context, *connect.Request[v1.RejectFollowRequestRequest]) (*connect.Response[v1.RejectFollowRequestResponse], error)
	// フォローリクエスト一覧取得
	ListFollowRequests(context.Context, *connect.Request[v1.ListFollowRequestsRequest]) (*connect.Response[v1.ListFollowRequestsResponse], error)
	// 関係性確認
	// ユーザー間の関係性を確認
	CheckUserRelationship(context.Context, *connect.Request[v1.CheckUserRelationshipRequest]) (*connect.Response[v1.CheckUserRelationshipResponse], error)
	// ユーザーリスト管理
	// ユーザーリスト作成
	CreateUserList(context.Context, *connect.Request[v1.CreateUserListRequest]) (*connect.Response[v1.CreateUserListResponse], error)
	// ユーザーリスト取得
	GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error)
	// ユーザーリスト更新
	UpdateUserList(context.Context, *connect.Request[v1.UpdateUserListRequest]) (*connect.Response[v1.UpdateUserListResponse], error)
	// ユーザーリスト削除
	DeleteUserList(context.Context, *connect.Request[v1.DeleteUserListRequest]) (*connect.Response[v1.DeleteUserListResponse], error)
	// ユーザーリストにユーザー追加
	AddUsersToList(context.Context, *connect.Request[v1.AddUsersToListRequest]) (*connect.Response[v1.AddUsersToListResponse], error)
	// ユーザーリストからユーザー削除
	RemoveUsersFromList(context.Context, *connect.Request[v1.RemoveUsersFromListRequest]) (*connect.Response[v1.RemoveUsersFromListResponse], error)
	// ユーザーリスト一覧取得
	ListUserLists(context.Context, *connect.Request[v1.ListUserListsRequest]) (*connect.Response[v1.ListUserListsResponse], error)
	// ユーザーリストのメンバー取得
	GetUserListMembers(context.Context, *connect.Request[v1.GetUserListMembersRequest]) (*connect.Response[v1.GetUserListMembersResponse], error)
	// キーワードミュート管理
	// キーワードミュート作成
	CreateMuteKeyword(context.Context, *connect.Request[v1.CreateMuteKeywordRequest]) (*connect.Response[v1.CreateMuteKeywordResponse], error)
	// キーワードミュート削除
	DeleteMuteKeyword(context.Context, *connect.Request[v1.DeleteMuteKeywordRequest]) (*connect.Response[v1.DeleteMuteKeywordResponse], error)
	// キーワードミュート一覧取得
	ListMuteKeywords(context.Context, *connect.Request[v1.ListMuteKeywordsRequest]) (*connect.Response[v1.ListMuteKeywordsResponse], error)
	// ユーザー統計
	// ユーザー統計情報取得
	GetUserStats(context.Context, *connect.Request[v1.GetUserStatsRequest]) (*connect.Response[v1.GetUserStatsResponse], error)
	// 管理者機能
	// ユーザー停止
	SuspendUser(context.Context, *connect.Request[v1.SuspendUserRequest]) (*connect.Response[v1.SuspendUserResponse], error)
	// ユーザー停止解除
	UnsuspendUser(context.Context, *connect.Request[v1.UnsuspendUserRequest]) (*connect.Response[v1.UnsuspendUserResponse], error)
}

// NewUserServiceClient constructs a client for the avion.user.v1.UserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_avion_user_v1_user_service_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		searchUsers: connect.NewClient[v1.SearchUsersRequest, v1.SearchUsersResponse](
			httpClient,
			baseURL+UserServiceSearchUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
			connect.WithClientOptions(opts...),
		),
		followUser: connect.NewClient[v1.FollowUserRequest, v1.FollowUserResponse](
			httpClient,
			baseURL+UserServiceFollowUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("FollowUser")),
			connect.WithClientOptions(opts...),
		),
		unfollowUser: connect.NewClient[v1.UnfollowUserRequest, v1.UnfollowUserResponse](
			httpClient,
			baseURL+UserServiceUnfollowUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnfollowUser")),
			connect.WithClientOptions(opts...),
		),
		listFollowers: connect.NewClient[v1.ListFollowersRequest, v1.ListFollowersResponse](
			httpClient,
			baseURL+UserServiceListFollowersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListFollowers")),
			connect.WithClientOptions(opts...),
		),
		listFollowing: connect.NewClient[v1.ListFollowingRequest, v1.ListFollowingResponse](
			httpClient,
			baseURL+UserServiceListFollowingProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListFollowing")),
			connect.WithClientOptions(opts...),
		),
		blockUser: connect.NewClient[v1.BlockUserRequest, v1.BlockUserResponse](
			httpClient,
			baseURL+UserServiceBlockUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("BlockUser")),
			connect.WithClientOptions(opts...),
		),
		unblockUser: connect.NewClient[v1.UnblockUserRequest, v1.UnblockUserResponse](
			httpClient,
			baseURL+UserServiceUnblockUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnblockUser")),
			connect.WithClientOptions(opts...),
		),
		muteUser: connect.NewClient[v1.MuteUserRequest, v1.MuteUserResponse](
			httpClient,
			baseURL+UserServiceMuteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("MuteUser")),
			connect.WithClientOptions(opts...),
		),
		unmuteUser: connect.NewClient[v1.UnmuteUserRequest, v1.UnmuteUserResponse](
			httpClient,
			baseURL+UserServiceUnmuteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnmuteUser")),
			connect.WithClientOptions(opts...),
		),
		listBlockedUsers: connect.NewClient[v1.ListBlockedUsersRequest, v1.ListBlockedUsersResponse](
			httpClient,
			baseURL+UserServiceListBlockedUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListBlockedUsers")),
			connect.WithClientOptions(opts...),
		),
		listMutedUsers: connect.NewClient[v1.ListMutedUsersRequest, v1.ListMutedUsersResponse](
			httpClient,
			baseURL+UserServiceListMutedUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListMutedUsers")),
			connect.WithClientOptions(opts...),
		),
		getUsersByIDs: connect.NewClient[v1.GetUsersByIDsRequest, v1.GetUsersByIDsResponse](
			httpClient,
			baseURL+UserServiceGetUsersByIDsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUsersByIDs")),
			connect.WithClientOptions(opts...),
		),
		batchCheckFollowStatus: connect.NewClient[v1.BatchCheckFollowStatusRequest, v1.BatchCheckFollowStatusResponse](
			httpClient,
			baseURL+UserServiceBatchCheckFollowStatusProcedure,
			connect.WithSchema(userServiceMethods.ByName("BatchCheckFollowStatus")),
			connect.WithClientOptions(opts...),
		),
		getUserProfile: connect.NewClient[v1.GetUserProfileRequest, v1.GetUserProfileResponse](
			httpClient,
			baseURL+UserServiceGetUserProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
		updateUserProfile: connect.NewClient[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserProfile")),
			connect.WithClientOptions(opts...),
		),
		getUserPrivacySettings: connect.NewClient[v1.GetUserPrivacySettingsRequest, v1.GetUserPrivacySettingsResponse](
			httpClient,
			baseURL+UserServiceGetUserPrivacySettingsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserPrivacySettings")),
			connect.WithClientOptions(opts...),
		),
		updateUserPrivacySettings: connect.NewClient[v1.UpdateUserPrivacySettingsRequest, v1.UpdateUserPrivacySettingsResponse](
			httpClient,
			baseURL+UserServiceUpdateUserPrivacySettingsProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserPrivacySettings")),
			connect.WithClientOptions(opts...),
		),
		approveFollowRequest: connect.NewClient[v1.ApproveFollowRequestRequest, v1.ApproveFollowRequestResponse](
			httpClient,
			baseURL+UserServiceApproveFollowRequestProcedure,
			connect.WithSchema(userServiceMethods.ByName("ApproveFollowRequest")),
			connect.WithClientOptions(opts...),
		),
		rejectFollowRequest: connect.NewClient[v1.RejectFollowRequestRequest, v1.RejectFollowRequestResponse](
			httpClient,
			baseURL+UserServiceRejectFollowRequestProcedure,
			connect.WithSchema(userServiceMethods.ByName("RejectFollowRequest")),
			connect.WithClientOptions(opts...),
		),
		listFollowRequests: connect.NewClient[v1.ListFollowRequestsRequest, v1.ListFollowRequestsResponse](
			httpClient,
			baseURL+UserServiceListFollowRequestsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListFollowRequests")),
			connect.WithClientOptions(opts...),
		),
		checkUserRelationship: connect.NewClient[v1.CheckUserRelationshipRequest, v1.CheckUserRelationshipResponse](
			httpClient,
			baseURL+UserServiceCheckUserRelationshipProcedure,
			connect.WithSchema(userServiceMethods.ByName("CheckUserRelationship")),
			connect.WithClientOptions(opts...),
		),
		createUserList: connect.NewClient[v1.CreateUserListRequest, v1.CreateUserListResponse](
			httpClient,
			baseURL+UserServiceCreateUserListProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUserList")),
			connect.WithClientOptions(opts...),
		),
		getUserList: connect.NewClient[v1.GetUserListRequest, v1.GetUserListResponse](
			httpClient,
			baseURL+UserServiceGetUserListProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserList")),
			connect.WithClientOptions(opts...),
		),
		updateUserList: connect.NewClient[v1.UpdateUserListRequest, v1.UpdateUserListResponse](
			httpClient,
			baseURL+UserServiceUpdateUserListProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserList")),
			connect.WithClientOptions(opts...),
		),
		deleteUserList: connect.NewClient[v1.DeleteUserListRequest, v1.DeleteUserListResponse](
			httpClient,
			baseURL+UserServiceDeleteUserListProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUserList")),
			connect.WithClientOptions(opts...),
		),
		addUsersToList: connect.NewClient[v1.AddUsersToListRequest, v1.AddUsersToListResponse](
			httpClient,
			baseURL+UserServiceAddUsersToListProcedure,
			connect.WithSchema(userServiceMethods.ByName("AddUsersToList")),
			connect.WithClientOptions(opts...),
		),
		removeUsersFromList: connect.NewClient[v1.RemoveUsersFromListRequest, v1.RemoveUsersFromListResponse](
			httpClient,
			baseURL+UserServiceRemoveUsersFromListProcedure,
			connect.WithSchema(userServiceMethods.ByName("RemoveUsersFromList")),
			connect.WithClientOptions(opts...),
		),
		listUserLists: connect.NewClient[v1.ListUserListsRequest, v1.ListUserListsResponse](
			httpClient,
			baseURL+UserServiceListUserListsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUserLists")),
			connect.WithClientOptions(opts...),
		),
		getUserListMembers: connect.NewClient[v1.GetUserListMembersRequest, v1.GetUserListMembersResponse](
			httpClient,
			baseURL+UserServiceGetUserListMembersProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserListMembers")),
			connect.WithClientOptions(opts...),
		),
		createMuteKeyword: connect.NewClient[v1.CreateMuteKeywordRequest, v1.CreateMuteKeywordResponse](
			httpClient,
			baseURL+UserServiceCreateMuteKeywordProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateMuteKeyword")),
			connect.WithClientOptions(opts...),
		),
		deleteMuteKeyword: connect.NewClient[v1.DeleteMuteKeywordRequest, v1.DeleteMuteKeywordResponse](
			httpClient,
			baseURL+UserServiceDeleteMuteKeywordProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteMuteKeyword")),
			connect.WithClientOptions(opts...),
		),
		listMuteKeywords: connect.NewClient[v1.ListMuteKeywordsRequest, v1.ListMuteKeywordsResponse](
			httpClient,
			baseURL+UserServiceListMuteKeywordsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListMuteKeywords")),
			connect.WithClientOptions(opts...),
		),
		getUserStats: connect.NewClient[v1.GetUserStatsRequest, v1.GetUserStatsResponse](
			httpClient,
			baseURL+UserServiceGetUserStatsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
			connect.WithClientOptions(opts...),
		),
		suspendUser: connect.NewClient[v1.SuspendUserRequest, v1.SuspendUserResponse](
			httpClient,
			baseURL+UserServiceSuspendUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("SuspendUser")),
			connect.WithClientOptions(opts...),
		),
		unsuspendUser: connect.NewClient[v1.UnsuspendUserRequest, v1.UnsuspendUserResponse](
			httpClient,
			baseURL+UserServiceUnsuspendUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnsuspendUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser                *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUser                   *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser                *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser                *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	listUsers                 *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	searchUsers               *connect.Client[v1.SearchUsersRequest, v1.SearchUsersResponse]
	followUser                *connect.Client[v1.FollowUserRequest, v1.FollowUserResponse]
	unfollowUser              *connect.Client[v1.UnfollowUserRequest, v1.UnfollowUserResponse]
	listFollowers             *connect.Client[v1.ListFollowersRequest, v1.ListFollowersResponse]
	listFollowing             *connect.Client[v1.ListFollowingRequest, v1.ListFollowingResponse]
	blockUser                 *connect.Client[v1.BlockUserRequest, v1.BlockUserResponse]
	unblockUser               *connect.Client[v1.UnblockUserRequest, v1.UnblockUserResponse]
	muteUser                  *connect.Client[v1.MuteUserRequest, v1.MuteUserResponse]
	unmuteUser                *connect.Client[v1.UnmuteUserRequest, v1.UnmuteUserResponse]
	listBlockedUsers          *connect.Client[v1.ListBlockedUsersRequest, v1.ListBlockedUsersResponse]
	listMutedUsers            *connect.Client[v1.ListMutedUsersRequest, v1.ListMutedUsersResponse]
	getUsersByIDs             *connect.Client[v1.GetUsersByIDsRequest, v1.GetUsersByIDsResponse]
	batchCheckFollowStatus    *connect.Client[v1.BatchCheckFollowStatusRequest, v1.BatchCheckFollowStatusResponse]
	getUserProfile            *connect.Client[v1.GetUserProfileRequest, v1.GetUserProfileResponse]
	updateUserProfile         *connect.Client[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse]
	getUserPrivacySettings    *connect.Client[v1.GetUserPrivacySettingsRequest, v1.GetUserPrivacySettingsResponse]
	updateUserPrivacySettings *connect.Client[v1.UpdateUserPrivacySettingsRequest, v1.UpdateUserPrivacySettingsResponse]
	approveFollowRequest      *connect.Client[v1.ApproveFollowRequestRequest, v1.ApproveFollowRequestResponse]
	rejectFollowRequest       *connect.Client[v1.RejectFollowRequestRequest, v1.RejectFollowRequestResponse]
	listFollowRequests        *connect.Client[v1.ListFollowRequestsRequest, v1.ListFollowRequestsResponse]
	checkUserRelationship     *connect.Client[v1.CheckUserRelationshipRequest, v1.CheckUserRelationshipResponse]
	createUserList            *connect.Client[v1.CreateUserListRequest, v1.CreateUserListResponse]
	getUserList               *connect.Client[v1.GetUserListRequest, v1.GetUserListResponse]
	updateUserList            *connect.Client[v1.UpdateUserListRequest, v1.UpdateUserListResponse]
	deleteUserList            *connect.Client[v1.DeleteUserListRequest, v1.DeleteUserListResponse]
	addUsersToList            *connect.Client[v1.AddUsersToListRequest, v1.AddUsersToListResponse]
	removeUsersFromList       *connect.Client[v1.RemoveUsersFromListRequest, v1.RemoveUsersFromListResponse]
	listUserLists             *connect.Client[v1.ListUserListsRequest, v1.ListUserListsResponse]
	getUserListMembers        *connect.Client[v1.GetUserListMembersRequest, v1.GetUserListMembersResponse]
	createMuteKeyword         *connect.Client[v1.CreateMuteKeywordRequest, v1.CreateMuteKeywordResponse]
	deleteMuteKeyword         *connect.Client[v1.DeleteMuteKeywordRequest, v1.DeleteMuteKeywordResponse]
	listMuteKeywords          *connect.Client[v1.ListMuteKeywordsRequest, v1.ListMuteKeywordsResponse]
	getUserStats              *connect.Client[v1.GetUserStatsRequest, v1.GetUserStatsResponse]
	suspendUser               *connect.Client[v1.SuspendUserRequest, v1.SuspendUserResponse]
	unsuspendUser             *connect.Client[v1.UnsuspendUserRequest, v1.UnsuspendUserResponse]
}

// CreateUser calls avion.user.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls avion.user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls avion.user.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls avion.user.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListUsers calls avion.user.v1.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// SearchUsers calls avion.user.v1.UserService.SearchUsers.
func (c *userServiceClient) SearchUsers(ctx context.Context, req *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// FollowUser calls avion.user.v1.UserService.FollowUser.
func (c *userServiceClient) FollowUser(ctx context.Context, req *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error) {
	return c.followUser.CallUnary(ctx, req)
}

// UnfollowUser calls avion.user.v1.UserService.UnfollowUser.
func (c *userServiceClient) UnfollowUser(ctx context.Context, req *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error) {
	return c.unfollowUser.CallUnary(ctx, req)
}

// ListFollowers calls avion.user.v1.UserService.ListFollowers.
func (c *userServiceClient) ListFollowers(ctx context.Context, req *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error) {
	return c.listFollowers.CallUnary(ctx, req)
}

// ListFollowing calls avion.user.v1.UserService.ListFollowing.
func (c *userServiceClient) ListFollowing(ctx context.Context, req *connect.Request[v1.ListFollowingRequest]) (*connect.Response[v1.ListFollowingResponse], error) {
	return c.listFollowing.CallUnary(ctx, req)
}

// BlockUser calls avion.user.v1.UserService.BlockUser.
func (c *userServiceClient) BlockUser(ctx context.Context, req *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return c.blockUser.CallUnary(ctx, req)
}

// UnblockUser calls avion.user.v1.UserService.UnblockUser.
func (c *userServiceClient) UnblockUser(ctx context.Context, req *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error) {
	return c.unblockUser.CallUnary(ctx, req)
}

// MuteUser calls avion.user.v1.UserService.MuteUser.
func (c *userServiceClient) MuteUser(ctx context.Context, req *connect.Request[v1.MuteUserRequest]) (*connect.Response[v1.MuteUserResponse], error) {
	return c.muteUser.CallUnary(ctx, req)
}

// UnmuteUser calls avion.user.v1.UserService.UnmuteUser.
func (c *userServiceClient) UnmuteUser(ctx context.Context, req *connect.Request[v1.UnmuteUserRequest]) (*connect.Response[v1.UnmuteUserResponse], error) {
	return c.unmuteUser.CallUnary(ctx, req)
}

// ListBlockedUsers calls avion.user.v1.UserService.ListBlockedUsers.
func (c *userServiceClient) ListBlockedUsers(ctx context.Context, req *connect.Request[v1.ListBlockedUsersRequest]) (*connect.Response[v1.ListBlockedUsersResponse], error) {
	return c.listBlockedUsers.CallUnary(ctx, req)
}

// ListMutedUsers calls avion.user.v1.UserService.ListMutedUsers.
func (c *userServiceClient) ListMutedUsers(ctx context.Context, req *connect.Request[v1.ListMutedUsersRequest]) (*connect.Response[v1.ListMutedUsersResponse], error) {
	return c.listMutedUsers.CallUnary(ctx, req)
}

// GetUsersByIDs calls avion.user.v1.UserService.GetUsersByIDs.
func (c *userServiceClient) GetUsersByIDs(ctx context.Context, req *connect.Request[v1.GetUsersByIDsRequest]) (*connect.Response[v1.GetUsersByIDsResponse], error) {
	return c.getUsersByIDs.CallUnary(ctx, req)
}

// BatchCheckFollowStatus calls avion.user.v1.UserService.BatchCheckFollowStatus.
func (c *userServiceClient) BatchCheckFollowStatus(ctx context.Context, req *connect.Request[v1.BatchCheckFollowStatusRequest]) (*connect.Response[v1.BatchCheckFollowStatusResponse], error) {
	return c.batchCheckFollowStatus.CallUnary(ctx, req)
}

// GetUserProfile calls avion.user.v1.UserService.GetUserProfile.
func (c *userServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls avion.user.v1.UserService.UpdateUserProfile.
func (c *userServiceClient) UpdateUserProfile(ctx context.Context, req *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// GetUserPrivacySettings calls avion.user.v1.UserService.GetUserPrivacySettings.
func (c *userServiceClient) GetUserPrivacySettings(ctx context.Context, req *connect.Request[v1.GetUserPrivacySettingsRequest]) (*connect.Response[v1.GetUserPrivacySettingsResponse], error) {
	return c.getUserPrivacySettings.CallUnary(ctx, req)
}

// UpdateUserPrivacySettings calls avion.user.v1.UserService.UpdateUserPrivacySettings.
func (c *userServiceClient) UpdateUserPrivacySettings(ctx context.Context, req *connect.Request[v1.UpdateUserPrivacySettingsRequest]) (*connect.Response[v1.UpdateUserPrivacySettingsResponse], error) {
	return c.updateUserPrivacySettings.CallUnary(ctx, req)
}

// ApproveFollowRequest calls avion.user.v1.UserService.ApproveFollowRequest.
func (c *userServiceClient) ApproveFollowRequest(ctx context.Context, req *connect.Request[v1.ApproveFollowRequestRequest]) (*connect.Response[v1.ApproveFollowRequestResponse], error) {
	return c.approveFollowRequest.CallUnary(ctx, req)
}

// RejectFollowRequest calls avion.user.v1.UserService.RejectFollowRequest.
func (c *userServiceClient) RejectFollowRequest(ctx context.Context, req *connect.Request[v1.RejectFollowRequestRequest]) (*connect.Response[v1.RejectFollowRequestResponse], error) {
	return c.rejectFollowRequest.CallUnary(ctx, req)
}

// ListFollowRequests calls avion.user.v1.UserService.ListFollowRequests.
func (c *userServiceClient) ListFollowRequests(ctx context.Context, req *connect.Request[v1.ListFollowRequestsRequest]) (*connect.Response[v1.ListFollowRequestsResponse], error) {
	return c.listFollowRequests.CallUnary(ctx, req)
}

// CheckUserRelationship calls avion.user.v1.UserService.CheckUserRelationship.
func (c *userServiceClient) CheckUserRelationship(ctx context.Context, req *connect.Request[v1.CheckUserRelationshipRequest]) (*connect.Response[v1.CheckUserRelationshipResponse], error) {
	return c.checkUserRelationship.CallUnary(ctx, req)
}

// CreateUserList calls avion.user.v1.UserService.CreateUserList.
func (c *userServiceClient) CreateUserList(ctx context.Context, req *connect.Request[v1.CreateUserListRequest]) (*connect.Response[v1.CreateUserListResponse], error) {
	return c.createUserList.CallUnary(ctx, req)
}

// GetUserList calls avion.user.v1.UserService.GetUserList.
func (c *userServiceClient) GetUserList(ctx context.Context, req *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error) {
	return c.getUserList.CallUnary(ctx, req)
}

// UpdateUserList calls avion.user.v1.UserService.UpdateUserList.
func (c *userServiceClient) UpdateUserList(ctx context.Context, req *connect.Request[v1.UpdateUserListRequest]) (*connect.Response[v1.UpdateUserListResponse], error) {
	return c.updateUserList.CallUnary(ctx, req)
}

// DeleteUserList calls avion.user.v1.UserService.DeleteUserList.
func (c *userServiceClient) DeleteUserList(ctx context.Context, req *connect.Request[v1.DeleteUserListRequest]) (*connect.Response[v1.DeleteUserListResponse], error) {
	return c.deleteUserList.CallUnary(ctx, req)
}

// AddUsersToList calls avion.user.v1.UserService.AddUsersToList.
func (c *userServiceClient) AddUsersToList(ctx context.Context, req *connect.Request[v1.AddUsersToListRequest]) (*connect.Response[v1.AddUsersToListResponse], error) {
	return c.addUsersToList.CallUnary(ctx, req)
}

// RemoveUsersFromList calls avion.user.v1.UserService.RemoveUsersFromList.
func (c *userServiceClient) RemoveUsersFromList(ctx context.Context, req *connect.Request[v1.RemoveUsersFromListRequest]) (*connect.Response[v1.RemoveUsersFromListResponse], error) {
	return c.removeUsersFromList.CallUnary(ctx, req)
}

// ListUserLists calls avion.user.v1.UserService.ListUserLists.
func (c *userServiceClient) ListUserLists(ctx context.Context, req *connect.Request[v1.ListUserListsRequest]) (*connect.Response[v1.ListUserListsResponse], error) {
	return c.listUserLists.CallUnary(ctx, req)
}

// GetUserListMembers calls avion.user.v1.UserService.GetUserListMembers.
func (c *userServiceClient) GetUserListMembers(ctx context.Context, req *connect.Request[v1.GetUserListMembersRequest]) (*connect.Response[v1.GetUserListMembersResponse], error) {
	return c.getUserListMembers.CallUnary(ctx, req)
}

// CreateMuteKeyword calls avion.user.v1.UserService.CreateMuteKeyword.
func (c *userServiceClient) CreateMuteKeyword(ctx context.Context, req *connect.Request[v1.CreateMuteKeywordRequest]) (*connect.Response[v1.CreateMuteKeywordResponse], error) {
	return c.createMuteKeyword.CallUnary(ctx, req)
}

// DeleteMuteKeyword calls avion.user.v1.UserService.DeleteMuteKeyword.
func (c *userServiceClient) DeleteMuteKeyword(ctx context.Context, req *connect.Request[v1.DeleteMuteKeywordRequest]) (*connect.Response[v1.DeleteMuteKeywordResponse], error) {
	return c.deleteMuteKeyword.CallUnary(ctx, req)
}

// ListMuteKeywords calls avion.user.v1.UserService.ListMuteKeywords.
func (c *userServiceClient) ListMuteKeywords(ctx context.Context, req *connect.Request[v1.ListMuteKeywordsRequest]) (*connect.Response[v1.ListMuteKeywordsResponse], error) {
	return c.listMuteKeywords.CallUnary(ctx, req)
}

// GetUserStats calls avion.user.v1.UserService.GetUserStats.
func (c *userServiceClient) GetUserStats(ctx context.Context, req *connect.Request[v1.GetUserStatsRequest]) (*connect.Response[v1.GetUserStatsResponse], error) {
	return c.getUserStats.CallUnary(ctx, req)
}

// SuspendUser calls avion.user.v1.UserService.SuspendUser.
func (c *userServiceClient) SuspendUser(ctx context.Context, req *connect.Request[v1.SuspendUserRequest]) (*connect.Response[v1.SuspendUserResponse], error) {
	return c.suspendUser.CallUnary(ctx, req)
}

// UnsuspendUser calls avion.user.v1.UserService.UnsuspendUser.
func (c *userServiceClient) UnsuspendUser(ctx context.Context, req *connect.Request[v1.UnsuspendUserRequest]) (*connect.Response[v1.UnsuspendUserResponse], error) {
	return c.unsuspendUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the avion.user.v1.UserService service.
type UserServiceHandler interface {
	// ユーザー作成
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// ユーザー取得
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// ユーザー更新
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// ユーザー削除
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// ユーザー一覧取得
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// ユーザー検索
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	// フォロー
	FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error)
	// フォロー解除
	UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error)
	// フォロワー一覧取得
	ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error)
	// フォロー中一覧取得
	ListFollowing(context.Context, *connect.Request[v1.ListFollowingRequest]) (*connect.Response[v1.ListFollowingResponse], error)
	// ブロック
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// ブロック解除
	UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error)
	// ミュート
	MuteUser(context.Context, *connect.Request[v1.MuteUserRequest]) (*connect.Response[v1.MuteUserResponse], error)
	// ミュート解除
	UnmuteUser(context.Context, *connect.Request[v1.UnmuteUserRequest]) (*connect.Response[v1.UnmuteUserResponse], error)
	// ブロック一覧取得
	ListBlockedUsers(context.Context, *connect.Request[v1.ListBlockedUsersRequest]) (*connect.Response[v1.ListBlockedUsersResponse], error)
	// ミュート一覧取得
	ListMutedUsers(context.Context, *connect.Request[v1.ListMutedUsersRequest]) (*connect.Response[v1.ListMutedUsersResponse], error)
	// バッチ操作
	// 複数ユーザー情報取得
	GetUsersByIDs(context.Context, *connect.Request[v1.GetUsersByIDsRequest]) (*connect.Response[v1.GetUsersByIDsResponse], error)
	// 複数ユーザーのフォロー状態確認
	BatchCheckFollowStatus(context.Context, *connect.Request[v1.BatchCheckFollowStatusRequest]) (*connect.Response[v1.BatchCheckFollowStatusResponse], error)
	// プロフィール管理
	// プロフィール取得
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
	// プロフィール更新
	UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	// プライバシー設定管理
	// プライバシー設定取得
	GetUserPrivacySettings(context.Context, *connect.Request[v1.GetUserPrivacySettingsRequest]) (*connect.Response[v1.GetUserPrivacySettingsResponse], error)
	// プライバシー設定更新
	UpdateUserPrivacySettings(context.Context, *connect.Request[v1.UpdateUserPrivacySettingsRequest]) (*connect.Response[v1.UpdateUserPrivacySettingsResponse], error)
	// フォローリクエスト管理（非公開アカウント用）
	// フォローリクエスト承認
	ApproveFollowRequest(context.Context, *connect.Request[v1.ApproveFollowRequestRequest]) (*connect.Response[v1.ApproveFollowRequestResponse], error)
	// フォローリクエスト拒否
	RejectFollowRequest(context.Context, *connect.Request[v1.RejectFollowRequestRequest]) (*connect.Response[v1.RejectFollowRequestResponse], error)
	// フォローリクエスト一覧取得
	ListFollowRequests(context.Context, *connect.Request[v1.ListFollowRequestsRequest]) (*connect.Response[v1.ListFollowRequestsResponse], error)
	// 関係性確認
	// ユーザー間の関係性を確認
	CheckUserRelationship(context.Context, *connect.Request[v1.CheckUserRelationshipRequest]) (*connect.Response[v1.CheckUserRelationshipResponse], error)
	// ユーザーリスト管理
	// ユーザーリスト作成
	CreateUserList(context.Context, *connect.Request[v1.CreateUserListRequest]) (*connect.Response[v1.CreateUserListResponse], error)
	// ユーザーリスト取得
	GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error)
	// ユーザーリスト更新
	UpdateUserList(context.Context, *connect.Request[v1.UpdateUserListRequest]) (*connect.Response[v1.UpdateUserListResponse], error)
	// ユーザーリスト削除
	DeleteUserList(context.Context, *connect.Request[v1.DeleteUserListRequest]) (*connect.Response[v1.DeleteUserListResponse], error)
	// ユーザーリストにユーザー追加
	AddUsersToList(context.Context, *connect.Request[v1.AddUsersToListRequest]) (*connect.Response[v1.AddUsersToListResponse], error)
	// ユーザーリストからユーザー削除
	RemoveUsersFromList(context.Context, *connect.Request[v1.RemoveUsersFromListRequest]) (*connect.Response[v1.RemoveUsersFromListResponse], error)
	// ユーザーリスト一覧取得
	ListUserLists(context.Context, *connect.Request[v1.ListUserListsRequest]) (*connect.Response[v1.ListUserListsResponse], error)
	// ユーザーリストのメンバー取得
	GetUserListMembers(context.Context, *connect.Request[v1.GetUserListMembersRequest]) (*connect.Response[v1.GetUserListMembersResponse], error)
	// キーワードミュート管理
	// キーワードミュート作成
	CreateMuteKeyword(context.Context, *connect.Request[v1.CreateMuteKeywordRequest]) (*connect.Response[v1.CreateMuteKeywordResponse], error)
	// キーワードミュート削除
	DeleteMuteKeyword(context.Context, *connect.Request[v1.DeleteMuteKeywordRequest]) (*connect.Response[v1.DeleteMuteKeywordResponse], error)
	// キーワードミュート一覧取得
	ListMuteKeywords(context.Context, *connect.Request[v1.ListMuteKeywordsRequest]) (*connect.Response[v1.ListMuteKeywordsResponse], error)
	// ユーザー統計
	// ユーザー統計情報取得
	GetUserStats(context.Context, *connect.Request[v1.GetUserStatsRequest]) (*connect.Response[v1.GetUserStatsResponse], error)
	// 管理者機能
	// ユーザー停止
	SuspendUser(context.Context, *connect.Request[v1.SuspendUserRequest]) (*connect.Response[v1.SuspendUserResponse], error)
	// ユーザー停止解除
	UnsuspendUser(context.Context, *connect.Request[v1.UnsuspendUserRequest]) (*connect.Response[v1.UnsuspendUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_avion_user_v1_user_service_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchUsersHandler := connect.NewUnaryHandler(
		UserServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceFollowUserHandler := connect.NewUnaryHandler(
		UserServiceFollowUserProcedure,
		svc.FollowUser,
		connect.WithSchema(userServiceMethods.ByName("FollowUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnfollowUserHandler := connect.NewUnaryHandler(
		UserServiceUnfollowUserProcedure,
		svc.UnfollowUser,
		connect.WithSchema(userServiceMethods.ByName("UnfollowUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListFollowersHandler := connect.NewUnaryHandler(
		UserServiceListFollowersProcedure,
		svc.ListFollowers,
		connect.WithSchema(userServiceMethods.ByName("ListFollowers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListFollowingHandler := connect.NewUnaryHandler(
		UserServiceListFollowingProcedure,
		svc.ListFollowing,
		connect.WithSchema(userServiceMethods.ByName("ListFollowing")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceBlockUserHandler := connect.NewUnaryHandler(
		UserServiceBlockUserProcedure,
		svc.BlockUser,
		connect.WithSchema(userServiceMethods.ByName("BlockUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnblockUserHandler := connect.NewUnaryHandler(
		UserServiceUnblockUserProcedure,
		svc.UnblockUser,
		connect.WithSchema(userServiceMethods.ByName("UnblockUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceMuteUserHandler := connect.NewUnaryHandler(
		UserServiceMuteUserProcedure,
		svc.MuteUser,
		connect.WithSchema(userServiceMethods.ByName("MuteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnmuteUserHandler := connect.NewUnaryHandler(
		UserServiceUnmuteUserProcedure,
		svc.UnmuteUser,
		connect.WithSchema(userServiceMethods.ByName("UnmuteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListBlockedUsersHandler := connect.NewUnaryHandler(
		UserServiceListBlockedUsersProcedure,
		svc.ListBlockedUsers,
		connect.WithSchema(userServiceMethods.ByName("ListBlockedUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListMutedUsersHandler := connect.NewUnaryHandler(
		UserServiceListMutedUsersProcedure,
		svc.ListMutedUsers,
		connect.WithSchema(userServiceMethods.ByName("ListMutedUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUsersByIDsHandler := connect.NewUnaryHandler(
		UserServiceGetUsersByIDsProcedure,
		svc.GetUsersByIDs,
		connect.WithSchema(userServiceMethods.ByName("GetUsersByIDs")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceBatchCheckFollowStatusHandler := connect.NewUnaryHandler(
		UserServiceBatchCheckFollowStatusProcedure,
		svc.BatchCheckFollowStatus,
		connect.WithSchema(userServiceMethods.ByName("BatchCheckFollowStatus")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserProfileHandler := connect.NewUnaryHandler(
		UserServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(userServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserProfileHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserPrivacySettingsHandler := connect.NewUnaryHandler(
		UserServiceGetUserPrivacySettingsProcedure,
		svc.GetUserPrivacySettings,
		connect.WithSchema(userServiceMethods.ByName("GetUserPrivacySettings")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserPrivacySettingsHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserPrivacySettingsProcedure,
		svc.UpdateUserPrivacySettings,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserPrivacySettings")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceApproveFollowRequestHandler := connect.NewUnaryHandler(
		UserServiceApproveFollowRequestProcedure,
		svc.ApproveFollowRequest,
		connect.WithSchema(userServiceMethods.ByName("ApproveFollowRequest")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRejectFollowRequestHandler := connect.NewUnaryHandler(
		UserServiceRejectFollowRequestProcedure,
		svc.RejectFollowRequest,
		connect.WithSchema(userServiceMethods.ByName("RejectFollowRequest")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListFollowRequestsHandler := connect.NewUnaryHandler(
		UserServiceListFollowRequestsProcedure,
		svc.ListFollowRequests,
		connect.WithSchema(userServiceMethods.ByName("ListFollowRequests")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCheckUserRelationshipHandler := connect.NewUnaryHandler(
		UserServiceCheckUserRelationshipProcedure,
		svc.CheckUserRelationship,
		connect.WithSchema(userServiceMethods.ByName("CheckUserRelationship")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateUserListHandler := connect.NewUnaryHandler(
		UserServiceCreateUserListProcedure,
		svc.CreateUserList,
		connect.WithSchema(userServiceMethods.ByName("CreateUserList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserListHandler := connect.NewUnaryHandler(
		UserServiceGetUserListProcedure,
		svc.GetUserList,
		connect.WithSchema(userServiceMethods.ByName("GetUserList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserListHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserListProcedure,
		svc.UpdateUserList,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserListHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserListProcedure,
		svc.DeleteUserList,
		connect.WithSchema(userServiceMethods.ByName("DeleteUserList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAddUsersToListHandler := connect.NewUnaryHandler(
		UserServiceAddUsersToListProcedure,
		svc.AddUsersToList,
		connect.WithSchema(userServiceMethods.ByName("AddUsersToList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRemoveUsersFromListHandler := connect.NewUnaryHandler(
		UserServiceRemoveUsersFromListProcedure,
		svc.RemoveUsersFromList,
		connect.WithSchema(userServiceMethods.ByName("RemoveUsersFromList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUserListsHandler := connect.NewUnaryHandler(
		UserServiceListUserListsProcedure,
		svc.ListUserLists,
		connect.WithSchema(userServiceMethods.ByName("ListUserLists")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserListMembersHandler := connect.NewUnaryHandler(
		UserServiceGetUserListMembersProcedure,
		svc.GetUserListMembers,
		connect.WithSchema(userServiceMethods.ByName("GetUserListMembers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateMuteKeywordHandler := connect.NewUnaryHandler(
		UserServiceCreateMuteKeywordProcedure,
		svc.CreateMuteKeyword,
		connect.WithSchema(userServiceMethods.ByName("CreateMuteKeyword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteMuteKeywordHandler := connect.NewUnaryHandler(
		UserServiceDeleteMuteKeywordProcedure,
		svc.DeleteMuteKeyword,
		connect.WithSchema(userServiceMethods.ByName("DeleteMuteKeyword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListMuteKeywordsHandler := connect.NewUnaryHandler(
		UserServiceListMuteKeywordsProcedure,
		svc.ListMuteKeywords,
		connect.WithSchema(userServiceMethods.ByName("ListMuteKeywords")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserStatsHandler := connect.NewUnaryHandler(
		UserServiceGetUserStatsProcedure,
		svc.GetUserStats,
		connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSuspendUserHandler := connect.NewUnaryHandler(
		UserServiceSuspendUserProcedure,
		svc.SuspendUser,
		connect.WithSchema(userServiceMethods.ByName("SuspendUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnsuspendUserHandler := connect.NewUnaryHandler(
		UserServiceUnsuspendUserProcedure,
		svc.UnsuspendUser,
		connect.WithSchema(userServiceMethods.ByName("UnsuspendUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceSearchUsersProcedure:
			userServiceSearchUsersHandler.ServeHTTP(w, r)
		case UserServiceFollowUserProcedure:
			userServiceFollowUserHandler.ServeHTTP(w, r)
		case UserServiceUnfollowUserProcedure:
			userServiceUnfollowUserHandler.ServeHTTP(w, r)
		case UserServiceListFollowersProcedure:
			userServiceListFollowersHandler.ServeHTTP(w, r)
		case UserServiceListFollowingProcedure:
			userServiceListFollowingHandler.ServeHTTP(w, r)
		case UserServiceBlockUserProcedure:
			userServiceBlockUserHandler.ServeHTTP(w, r)
		case UserServiceUnblockUserProcedure:
			userServiceUnblockUserHandler.ServeHTTP(w, r)
		case UserServiceMuteUserProcedure:
			userServiceMuteUserHandler.ServeHTTP(w, r)
		case UserServiceUnmuteUserProcedure:
			userServiceUnmuteUserHandler.ServeHTTP(w, r)
		case UserServiceListBlockedUsersProcedure:
			userServiceListBlockedUsersHandler.ServeHTTP(w, r)
		case UserServiceListMutedUsersProcedure:
			userServiceListMutedUsersHandler.ServeHTTP(w, r)
		case UserServiceGetUsersByIDsProcedure:
			userServiceGetUsersByIDsHandler.ServeHTTP(w, r)
		case UserServiceBatchCheckFollowStatusProcedure:
			userServiceBatchCheckFollowStatusHandler.ServeHTTP(w, r)
		case UserServiceGetUserProfileProcedure:
			userServiceGetUserProfileHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProfileProcedure:
			userServiceUpdateUserProfileHandler.ServeHTTP(w, r)
		case UserServiceGetUserPrivacySettingsProcedure:
			userServiceGetUserPrivacySettingsHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserPrivacySettingsProcedure:
			userServiceUpdateUserPrivacySettingsHandler.ServeHTTP(w, r)
		case UserServiceApproveFollowRequestProcedure:
			userServiceApproveFollowRequestHandler.ServeHTTP(w, r)
		case UserServiceRejectFollowRequestProcedure:
			userServiceRejectFollowRequestHandler.ServeHTTP(w, r)
		case UserServiceListFollowRequestsProcedure:
			userServiceListFollowRequestsHandler.ServeHTTP(w, r)
		case UserServiceCheckUserRelationshipProcedure:
			userServiceCheckUserRelationshipHandler.ServeHTTP(w, r)
		case UserServiceCreateUserListProcedure:
			userServiceCreateUserListHandler.ServeHTTP(w, r)
		case UserServiceGetUserListProcedure:
			userServiceGetUserListHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserListProcedure:
			userServiceUpdateUserListHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserListProcedure:
			userServiceDeleteUserListHandler.ServeHTTP(w, r)
		case UserServiceAddUsersToListProcedure:
			userServiceAddUsersToListHandler.ServeHTTP(w, r)
		case UserServiceRemoveUsersFromListProcedure:
			userServiceRemoveUsersFromListHandler.ServeHTTP(w, r)
		case UserServiceListUserListsProcedure:
			userServiceListUserListsHandler.ServeHTTP(w, r)
		case UserServiceGetUserListMembersProcedure:
			userServiceGetUserListMembersHandler.ServeHTTP(w, r)
		case UserServiceCreateMuteKeywordProcedure:
			userServiceCreateMuteKeywordHandler.ServeHTTP(w, r)
		case UserServiceDeleteMuteKeywordProcedure:
			userServiceDeleteMuteKeywordHandler.ServeHTTP(w, r)
		case UserServiceListMuteKeywordsProcedure:
			userServiceListMuteKeywordsHandler.ServeHTTP(w, r)
		case UserServiceGetUserStatsProcedure:
			userServiceGetUserStatsHandler.ServeHTTP(w, r)
		case UserServiceSuspendUserProcedure:
			userServiceSuspendUserHandler.ServeHTTP(w, r)
		case UserServiceUnsuspendUserProcedure:
			userServiceUnsuspendUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.SearchUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.FollowUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UnfollowUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListFollowers is not implemented"))
}

func (UnimplementedUserServiceHandler) ListFollowing(context.Context, *connect.Request[v1.ListFollowingRequest]) (*connect.Response[v1.ListFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListFollowing is not implemented"))
}

func (UnimplementedUserServiceHandler) BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.BlockUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UnblockUser is not implemented"))
}

func (UnimplementedUserServiceHandler) MuteUser(context.Context, *connect.Request[v1.MuteUserRequest]) (*connect.Response[v1.MuteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.MuteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UnmuteUser(context.Context, *connect.Request[v1.UnmuteUserRequest]) (*connect.Response[v1.UnmuteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UnmuteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListBlockedUsers(context.Context, *connect.Request[v1.ListBlockedUsersRequest]) (*connect.Response[v1.ListBlockedUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListBlockedUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) ListMutedUsers(context.Context, *connect.Request[v1.ListMutedUsersRequest]) (*connect.Response[v1.ListMutedUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListMutedUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUsersByIDs(context.Context, *connect.Request[v1.GetUsersByIDsRequest]) (*connect.Response[v1.GetUsersByIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUsersByIDs is not implemented"))
}

func (UnimplementedUserServiceHandler) BatchCheckFollowStatus(context.Context, *connect.Request[v1.BatchCheckFollowStatusRequest]) (*connect.Response[v1.BatchCheckFollowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.BatchCheckFollowStatus is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUserProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UpdateUserProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserPrivacySettings(context.Context, *connect.Request[v1.GetUserPrivacySettingsRequest]) (*connect.Response[v1.GetUserPrivacySettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUserPrivacySettings is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserPrivacySettings(context.Context, *connect.Request[v1.UpdateUserPrivacySettingsRequest]) (*connect.Response[v1.UpdateUserPrivacySettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UpdateUserPrivacySettings is not implemented"))
}

func (UnimplementedUserServiceHandler) ApproveFollowRequest(context.Context, *connect.Request[v1.ApproveFollowRequestRequest]) (*connect.Response[v1.ApproveFollowRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ApproveFollowRequest is not implemented"))
}

func (UnimplementedUserServiceHandler) RejectFollowRequest(context.Context, *connect.Request[v1.RejectFollowRequestRequest]) (*connect.Response[v1.RejectFollowRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.RejectFollowRequest is not implemented"))
}

func (UnimplementedUserServiceHandler) ListFollowRequests(context.Context, *connect.Request[v1.ListFollowRequestsRequest]) (*connect.Response[v1.ListFollowRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListFollowRequests is not implemented"))
}

func (UnimplementedUserServiceHandler) CheckUserRelationship(context.Context, *connect.Request[v1.CheckUserRelationshipRequest]) (*connect.Response[v1.CheckUserRelationshipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.CheckUserRelationship is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUserList(context.Context, *connect.Request[v1.CreateUserListRequest]) (*connect.Response[v1.CreateUserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.CreateUserList is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUserList is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserList(context.Context, *connect.Request[v1.UpdateUserListRequest]) (*connect.Response[v1.UpdateUserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UpdateUserList is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUserList(context.Context, *connect.Request[v1.DeleteUserListRequest]) (*connect.Response[v1.DeleteUserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.DeleteUserList is not implemented"))
}

func (UnimplementedUserServiceHandler) AddUsersToList(context.Context, *connect.Request[v1.AddUsersToListRequest]) (*connect.Response[v1.AddUsersToListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.AddUsersToList is not implemented"))
}

func (UnimplementedUserServiceHandler) RemoveUsersFromList(context.Context, *connect.Request[v1.RemoveUsersFromListRequest]) (*connect.Response[v1.RemoveUsersFromListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.RemoveUsersFromList is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUserLists(context.Context, *connect.Request[v1.ListUserListsRequest]) (*connect.Response[v1.ListUserListsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListUserLists is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserListMembers(context.Context, *connect.Request[v1.GetUserListMembersRequest]) (*connect.Response[v1.GetUserListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUserListMembers is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateMuteKeyword(context.Context, *connect.Request[v1.CreateMuteKeywordRequest]) (*connect.Response[v1.CreateMuteKeywordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.CreateMuteKeyword is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteMuteKeyword(context.Context, *connect.Request[v1.DeleteMuteKeywordRequest]) (*connect.Response[v1.DeleteMuteKeywordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.DeleteMuteKeyword is not implemented"))
}

func (UnimplementedUserServiceHandler) ListMuteKeywords(context.Context, *connect.Request[v1.ListMuteKeywordsRequest]) (*connect.Response[v1.ListMuteKeywordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.ListMuteKeywords is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserStats(context.Context, *connect.Request[v1.GetUserStatsRequest]) (*connect.Response[v1.GetUserStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.GetUserStats is not implemented"))
}

func (UnimplementedUserServiceHandler) SuspendUser(context.Context, *connect.Request[v1.SuspendUserRequest]) (*connect.Response[v1.SuspendUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.SuspendUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UnsuspendUser(context.Context, *connect.Request[v1.UnsuspendUserRequest]) (*connect.Response[v1.UnsuspendUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.user.v1.UserService.UnsuspendUser is not implemented"))
}
