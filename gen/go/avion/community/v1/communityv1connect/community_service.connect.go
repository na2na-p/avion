// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/community/v1/community_service.proto

package communityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/community/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommunityServiceName is the fully-qualified name of the CommunityService service.
	CommunityServiceName = "avion.community.v1.CommunityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommunityServiceCreateGroupProcedure is the fully-qualified name of the CommunityService's
	// CreateGroup RPC.
	CommunityServiceCreateGroupProcedure = "/avion.community.v1.CommunityService/CreateGroup"
	// CommunityServiceGetGroupProcedure is the fully-qualified name of the CommunityService's GetGroup
	// RPC.
	CommunityServiceGetGroupProcedure = "/avion.community.v1.CommunityService/GetGroup"
	// CommunityServiceUpdateGroupProcedure is the fully-qualified name of the CommunityService's
	// UpdateGroup RPC.
	CommunityServiceUpdateGroupProcedure = "/avion.community.v1.CommunityService/UpdateGroup"
	// CommunityServiceDeleteGroupProcedure is the fully-qualified name of the CommunityService's
	// DeleteGroup RPC.
	CommunityServiceDeleteGroupProcedure = "/avion.community.v1.CommunityService/DeleteGroup"
	// CommunityServiceListGroupsProcedure is the fully-qualified name of the CommunityService's
	// ListGroups RPC.
	CommunityServiceListGroupsProcedure = "/avion.community.v1.CommunityService/ListGroups"
	// CommunityServiceSearchGroupsProcedure is the fully-qualified name of the CommunityService's
	// SearchGroups RPC.
	CommunityServiceSearchGroupsProcedure = "/avion.community.v1.CommunityService/SearchGroups"
	// CommunityServiceGetGroupStatsProcedure is the fully-qualified name of the CommunityService's
	// GetGroupStats RPC.
	CommunityServiceGetGroupStatsProcedure = "/avion.community.v1.CommunityService/GetGroupStats"
	// CommunityServiceJoinGroupProcedure is the fully-qualified name of the CommunityService's
	// JoinGroup RPC.
	CommunityServiceJoinGroupProcedure = "/avion.community.v1.CommunityService/JoinGroup"
	// CommunityServiceLeaveGroupProcedure is the fully-qualified name of the CommunityService's
	// LeaveGroup RPC.
	CommunityServiceLeaveGroupProcedure = "/avion.community.v1.CommunityService/LeaveGroup"
	// CommunityServiceInviteMemberProcedure is the fully-qualified name of the CommunityService's
	// InviteMember RPC.
	CommunityServiceInviteMemberProcedure = "/avion.community.v1.CommunityService/InviteMember"
	// CommunityServiceRemoveMemberProcedure is the fully-qualified name of the CommunityService's
	// RemoveMember RPC.
	CommunityServiceRemoveMemberProcedure = "/avion.community.v1.CommunityService/RemoveMember"
	// CommunityServiceUpdateMemberRoleProcedure is the fully-qualified name of the CommunityService's
	// UpdateMemberRole RPC.
	CommunityServiceUpdateMemberRoleProcedure = "/avion.community.v1.CommunityService/UpdateMemberRole"
	// CommunityServiceListMembersProcedure is the fully-qualified name of the CommunityService's
	// ListMembers RPC.
	CommunityServiceListMembersProcedure = "/avion.community.v1.CommunityService/ListMembers"
	// CommunityServiceGetMemberProcedure is the fully-qualified name of the CommunityService's
	// GetMember RPC.
	CommunityServiceGetMemberProcedure = "/avion.community.v1.CommunityService/GetMember"
	// CommunityServiceApproveMemberProcedure is the fully-qualified name of the CommunityService's
	// ApproveMember RPC.
	CommunityServiceApproveMemberProcedure = "/avion.community.v1.CommunityService/ApproveMember"
	// CommunityServiceRejectMemberProcedure is the fully-qualified name of the CommunityService's
	// RejectMember RPC.
	CommunityServiceRejectMemberProcedure = "/avion.community.v1.CommunityService/RejectMember"
	// CommunityServiceCreateEventProcedure is the fully-qualified name of the CommunityService's
	// CreateEvent RPC.
	CommunityServiceCreateEventProcedure = "/avion.community.v1.CommunityService/CreateEvent"
	// CommunityServiceGetEventProcedure is the fully-qualified name of the CommunityService's GetEvent
	// RPC.
	CommunityServiceGetEventProcedure = "/avion.community.v1.CommunityService/GetEvent"
	// CommunityServiceUpdateEventProcedure is the fully-qualified name of the CommunityService's
	// UpdateEvent RPC.
	CommunityServiceUpdateEventProcedure = "/avion.community.v1.CommunityService/UpdateEvent"
	// CommunityServiceDeleteEventProcedure is the fully-qualified name of the CommunityService's
	// DeleteEvent RPC.
	CommunityServiceDeleteEventProcedure = "/avion.community.v1.CommunityService/DeleteEvent"
	// CommunityServiceListEventsProcedure is the fully-qualified name of the CommunityService's
	// ListEvents RPC.
	CommunityServiceListEventsProcedure = "/avion.community.v1.CommunityService/ListEvents"
	// CommunityServiceSearchEventsProcedure is the fully-qualified name of the CommunityService's
	// SearchEvents RPC.
	CommunityServiceSearchEventsProcedure = "/avion.community.v1.CommunityService/SearchEvents"
	// CommunityServiceJoinEventProcedure is the fully-qualified name of the CommunityService's
	// JoinEvent RPC.
	CommunityServiceJoinEventProcedure = "/avion.community.v1.CommunityService/JoinEvent"
	// CommunityServiceLeaveEventProcedure is the fully-qualified name of the CommunityService's
	// LeaveEvent RPC.
	CommunityServiceLeaveEventProcedure = "/avion.community.v1.CommunityService/LeaveEvent"
	// CommunityServiceListParticipantsProcedure is the fully-qualified name of the CommunityService's
	// ListParticipants RPC.
	CommunityServiceListParticipantsProcedure = "/avion.community.v1.CommunityService/ListParticipants"
	// CommunityServiceUpdateParticipantStatusProcedure is the fully-qualified name of the
	// CommunityService's UpdateParticipantStatus RPC.
	CommunityServiceUpdateParticipantStatusProcedure = "/avion.community.v1.CommunityService/UpdateParticipantStatus"
	// CommunityServiceCreateChannelProcedure is the fully-qualified name of the CommunityService's
	// CreateChannel RPC.
	CommunityServiceCreateChannelProcedure = "/avion.community.v1.CommunityService/CreateChannel"
	// CommunityServiceGetChannelProcedure is the fully-qualified name of the CommunityService's
	// GetChannel RPC.
	CommunityServiceGetChannelProcedure = "/avion.community.v1.CommunityService/GetChannel"
	// CommunityServiceUpdateChannelProcedure is the fully-qualified name of the CommunityService's
	// UpdateChannel RPC.
	CommunityServiceUpdateChannelProcedure = "/avion.community.v1.CommunityService/UpdateChannel"
	// CommunityServiceDeleteChannelProcedure is the fully-qualified name of the CommunityService's
	// DeleteChannel RPC.
	CommunityServiceDeleteChannelProcedure = "/avion.community.v1.CommunityService/DeleteChannel"
	// CommunityServiceListChannelsProcedure is the fully-qualified name of the CommunityService's
	// ListChannels RPC.
	CommunityServiceListChannelsProcedure = "/avion.community.v1.CommunityService/ListChannels"
	// CommunityServiceReorderChannelsProcedure is the fully-qualified name of the CommunityService's
	// ReorderChannels RPC.
	CommunityServiceReorderChannelsProcedure = "/avion.community.v1.CommunityService/ReorderChannels"
	// CommunityServiceCreateRoleProcedure is the fully-qualified name of the CommunityService's
	// CreateRole RPC.
	CommunityServiceCreateRoleProcedure = "/avion.community.v1.CommunityService/CreateRole"
	// CommunityServiceGetRoleProcedure is the fully-qualified name of the CommunityService's GetRole
	// RPC.
	CommunityServiceGetRoleProcedure = "/avion.community.v1.CommunityService/GetRole"
	// CommunityServiceUpdateRoleProcedure is the fully-qualified name of the CommunityService's
	// UpdateRole RPC.
	CommunityServiceUpdateRoleProcedure = "/avion.community.v1.CommunityService/UpdateRole"
	// CommunityServiceDeleteRoleProcedure is the fully-qualified name of the CommunityService's
	// DeleteRole RPC.
	CommunityServiceDeleteRoleProcedure = "/avion.community.v1.CommunityService/DeleteRole"
	// CommunityServiceListRolesProcedure is the fully-qualified name of the CommunityService's
	// ListRoles RPC.
	CommunityServiceListRolesProcedure = "/avion.community.v1.CommunityService/ListRoles"
	// CommunityServiceListRoleMembersProcedure is the fully-qualified name of the CommunityService's
	// ListRoleMembers RPC.
	CommunityServiceListRoleMembersProcedure = "/avion.community.v1.CommunityService/ListRoleMembers"
	// CommunityServiceCreateInviteProcedure is the fully-qualified name of the CommunityService's
	// CreateInvite RPC.
	CommunityServiceCreateInviteProcedure = "/avion.community.v1.CommunityService/CreateInvite"
	// CommunityServiceGetInviteProcedure is the fully-qualified name of the CommunityService's
	// GetInvite RPC.
	CommunityServiceGetInviteProcedure = "/avion.community.v1.CommunityService/GetInvite"
	// CommunityServiceRevokeInviteProcedure is the fully-qualified name of the CommunityService's
	// RevokeInvite RPC.
	CommunityServiceRevokeInviteProcedure = "/avion.community.v1.CommunityService/RevokeInvite"
	// CommunityServiceListInvitesProcedure is the fully-qualified name of the CommunityService's
	// ListInvites RPC.
	CommunityServiceListInvitesProcedure = "/avion.community.v1.CommunityService/ListInvites"
	// CommunityServiceUseInviteProcedure is the fully-qualified name of the CommunityService's
	// UseInvite RPC.
	CommunityServiceUseInviteProcedure = "/avion.community.v1.CommunityService/UseInvite"
)

// CommunityServiceClient is a client for the avion.community.v1.CommunityService service.
type CommunityServiceClient interface {
	// グループ管理
	// グループ作成
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	// グループ取得
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error)
	// グループ更新
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	// グループ削除
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
	// グループ一覧取得
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	// グループ検索
	SearchGroups(context.Context, *connect.Request[v1.SearchGroupsRequest]) (*connect.Response[v1.SearchGroupsResponse], error)
	// グループ統計取得
	GetGroupStats(context.Context, *connect.Request[v1.GetGroupStatsRequest]) (*connect.Response[v1.GetGroupStatsResponse], error)
	// メンバー管理
	// メンバー追加（参加）
	JoinGroup(context.Context, *connect.Request[v1.JoinGroupRequest]) (*connect.Response[v1.JoinGroupResponse], error)
	// メンバー削除（退出）
	LeaveGroup(context.Context, *connect.Request[v1.LeaveGroupRequest]) (*connect.Response[v1.LeaveGroupResponse], error)
	// メンバー招待
	InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error)
	// メンバー追放
	RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[v1.RemoveMemberResponse], error)
	// メンバー役割更新
	UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error)
	// メンバー一覧取得
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	// メンバー取得
	GetMember(context.Context, *connect.Request[v1.GetMemberRequest]) (*connect.Response[v1.GetMemberResponse], error)
	// 参加申請承認
	ApproveMember(context.Context, *connect.Request[v1.ApproveMemberRequest]) (*connect.Response[v1.ApproveMemberResponse], error)
	// 参加申請拒否
	RejectMember(context.Context, *connect.Request[v1.RejectMemberRequest]) (*connect.Response[v1.RejectMemberResponse], error)
	// イベント管理
	// イベント作成
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	// イベント取得
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	// イベント更新
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	// イベント削除
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	// イベント一覧取得
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// イベント検索
	SearchEvents(context.Context, *connect.Request[v1.SearchEventsRequest]) (*connect.Response[v1.SearchEventsResponse], error)
	// イベント参加
	JoinEvent(context.Context, *connect.Request[v1.JoinEventRequest]) (*connect.Response[v1.JoinEventResponse], error)
	// イベント参加キャンセル
	LeaveEvent(context.Context, *connect.Request[v1.LeaveEventRequest]) (*connect.Response[v1.LeaveEventResponse], error)
	// イベント参加者一覧取得
	ListParticipants(context.Context, *connect.Request[v1.ListParticipantsRequest]) (*connect.Response[v1.ListParticipantsResponse], error)
	// イベント参加者ステータス更新
	UpdateParticipantStatus(context.Context, *connect.Request[v1.UpdateParticipantStatusRequest]) (*connect.Response[v1.UpdateParticipantStatusResponse], error)
	// チャンネル管理
	// チャンネル作成
	CreateChannel(context.Context, *connect.Request[v1.CreateChannelRequest]) (*connect.Response[v1.CreateChannelResponse], error)
	// チャンネル取得
	GetChannel(context.Context, *connect.Request[v1.GetChannelRequest]) (*connect.Response[v1.GetChannelResponse], error)
	// チャンネル更新
	UpdateChannel(context.Context, *connect.Request[v1.UpdateChannelRequest]) (*connect.Response[v1.UpdateChannelResponse], error)
	// チャンネル削除
	DeleteChannel(context.Context, *connect.Request[v1.DeleteChannelRequest]) (*connect.Response[v1.DeleteChannelResponse], error)
	// チャンネル一覧取得
	ListChannels(context.Context, *connect.Request[v1.ListChannelsRequest]) (*connect.Response[v1.ListChannelsResponse], error)
	// チャンネル並び替え
	ReorderChannels(context.Context, *connect.Request[v1.ReorderChannelsRequest]) (*connect.Response[v1.ReorderChannelsResponse], error)
	// 役割管理
	// 役割作成
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// 役割取得
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// 役割更新
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// 役割削除
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// 役割一覧取得
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// 役割メンバー一覧取得
	ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error)
	// 招待管理
	// 招待作成
	CreateInvite(context.Context, *connect.Request[v1.CreateInviteRequest]) (*connect.Response[v1.CreateInviteResponse], error)
	// 招待取得
	GetInvite(context.Context, *connect.Request[v1.GetInviteRequest]) (*connect.Response[v1.GetInviteResponse], error)
	// 招待削除
	RevokeInvite(context.Context, *connect.Request[v1.RevokeInviteRequest]) (*connect.Response[v1.RevokeInviteResponse], error)
	// 招待一覧取得
	ListInvites(context.Context, *connect.Request[v1.ListInvitesRequest]) (*connect.Response[v1.ListInvitesResponse], error)
	// 招待使用
	UseInvite(context.Context, *connect.Request[v1.UseInviteRequest]) (*connect.Response[v1.UseInviteResponse], error)
}

// NewCommunityServiceClient constructs a client for the avion.community.v1.CommunityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommunityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommunityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	communityServiceMethods := v1.File_avion_community_v1_community_service_proto.Services().ByName("CommunityService").Methods()
	return &communityServiceClient{
		createGroup: connect.NewClient[v1.CreateGroupRequest, v1.CreateGroupResponse](
			httpClient,
			baseURL+CommunityServiceCreateGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		getGroup: connect.NewClient[v1.GetGroupRequest, v1.GetGroupResponse](
			httpClient,
			baseURL+CommunityServiceGetGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetGroup")),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[v1.UpdateGroupRequest, v1.UpdateGroupResponse](
			httpClient,
			baseURL+CommunityServiceUpdateGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteGroup: connect.NewClient[v1.DeleteGroupRequest, v1.DeleteGroupResponse](
			httpClient,
			baseURL+CommunityServiceDeleteGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("DeleteGroup")),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[v1.ListGroupsRequest, v1.ListGroupsResponse](
			httpClient,
			baseURL+CommunityServiceListGroupsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListGroups")),
			connect.WithClientOptions(opts...),
		),
		searchGroups: connect.NewClient[v1.SearchGroupsRequest, v1.SearchGroupsResponse](
			httpClient,
			baseURL+CommunityServiceSearchGroupsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("SearchGroups")),
			connect.WithClientOptions(opts...),
		),
		getGroupStats: connect.NewClient[v1.GetGroupStatsRequest, v1.GetGroupStatsResponse](
			httpClient,
			baseURL+CommunityServiceGetGroupStatsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetGroupStats")),
			connect.WithClientOptions(opts...),
		),
		joinGroup: connect.NewClient[v1.JoinGroupRequest, v1.JoinGroupResponse](
			httpClient,
			baseURL+CommunityServiceJoinGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("JoinGroup")),
			connect.WithClientOptions(opts...),
		),
		leaveGroup: connect.NewClient[v1.LeaveGroupRequest, v1.LeaveGroupResponse](
			httpClient,
			baseURL+CommunityServiceLeaveGroupProcedure,
			connect.WithSchema(communityServiceMethods.ByName("LeaveGroup")),
			connect.WithClientOptions(opts...),
		),
		inviteMember: connect.NewClient[v1.InviteMemberRequest, v1.InviteMemberResponse](
			httpClient,
			baseURL+CommunityServiceInviteMemberProcedure,
			connect.WithSchema(communityServiceMethods.ByName("InviteMember")),
			connect.WithClientOptions(opts...),
		),
		removeMember: connect.NewClient[v1.RemoveMemberRequest, v1.RemoveMemberResponse](
			httpClient,
			baseURL+CommunityServiceRemoveMemberProcedure,
			connect.WithSchema(communityServiceMethods.ByName("RemoveMember")),
			connect.WithClientOptions(opts...),
		),
		updateMemberRole: connect.NewClient[v1.UpdateMemberRoleRequest, v1.UpdateMemberRoleResponse](
			httpClient,
			baseURL+CommunityServiceUpdateMemberRoleProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateMemberRole")),
			connect.WithClientOptions(opts...),
		),
		listMembers: connect.NewClient[v1.ListMembersRequest, v1.ListMembersResponse](
			httpClient,
			baseURL+CommunityServiceListMembersProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListMembers")),
			connect.WithClientOptions(opts...),
		),
		getMember: connect.NewClient[v1.GetMemberRequest, v1.GetMemberResponse](
			httpClient,
			baseURL+CommunityServiceGetMemberProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetMember")),
			connect.WithClientOptions(opts...),
		),
		approveMember: connect.NewClient[v1.ApproveMemberRequest, v1.ApproveMemberResponse](
			httpClient,
			baseURL+CommunityServiceApproveMemberProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ApproveMember")),
			connect.WithClientOptions(opts...),
		),
		rejectMember: connect.NewClient[v1.RejectMemberRequest, v1.RejectMemberResponse](
			httpClient,
			baseURL+CommunityServiceRejectMemberProcedure,
			connect.WithSchema(communityServiceMethods.ByName("RejectMember")),
			connect.WithClientOptions(opts...),
		),
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+CommunityServiceCreateEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("CreateEvent")),
			connect.WithClientOptions(opts...),
		),
		getEvent: connect.NewClient[v1.GetEventRequest, v1.GetEventResponse](
			httpClient,
			baseURL+CommunityServiceGetEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetEvent")),
			connect.WithClientOptions(opts...),
		),
		updateEvent: connect.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+CommunityServiceUpdateEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateEvent")),
			connect.WithClientOptions(opts...),
		),
		deleteEvent: connect.NewClient[v1.DeleteEventRequest, v1.DeleteEventResponse](
			httpClient,
			baseURL+CommunityServiceDeleteEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("DeleteEvent")),
			connect.WithClientOptions(opts...),
		),
		listEvents: connect.NewClient[v1.ListEventsRequest, v1.ListEventsResponse](
			httpClient,
			baseURL+CommunityServiceListEventsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListEvents")),
			connect.WithClientOptions(opts...),
		),
		searchEvents: connect.NewClient[v1.SearchEventsRequest, v1.SearchEventsResponse](
			httpClient,
			baseURL+CommunityServiceSearchEventsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("SearchEvents")),
			connect.WithClientOptions(opts...),
		),
		joinEvent: connect.NewClient[v1.JoinEventRequest, v1.JoinEventResponse](
			httpClient,
			baseURL+CommunityServiceJoinEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("JoinEvent")),
			connect.WithClientOptions(opts...),
		),
		leaveEvent: connect.NewClient[v1.LeaveEventRequest, v1.LeaveEventResponse](
			httpClient,
			baseURL+CommunityServiceLeaveEventProcedure,
			connect.WithSchema(communityServiceMethods.ByName("LeaveEvent")),
			connect.WithClientOptions(opts...),
		),
		listParticipants: connect.NewClient[v1.ListParticipantsRequest, v1.ListParticipantsResponse](
			httpClient,
			baseURL+CommunityServiceListParticipantsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListParticipants")),
			connect.WithClientOptions(opts...),
		),
		updateParticipantStatus: connect.NewClient[v1.UpdateParticipantStatusRequest, v1.UpdateParticipantStatusResponse](
			httpClient,
			baseURL+CommunityServiceUpdateParticipantStatusProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateParticipantStatus")),
			connect.WithClientOptions(opts...),
		),
		createChannel: connect.NewClient[v1.CreateChannelRequest, v1.CreateChannelResponse](
			httpClient,
			baseURL+CommunityServiceCreateChannelProcedure,
			connect.WithSchema(communityServiceMethods.ByName("CreateChannel")),
			connect.WithClientOptions(opts...),
		),
		getChannel: connect.NewClient[v1.GetChannelRequest, v1.GetChannelResponse](
			httpClient,
			baseURL+CommunityServiceGetChannelProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetChannel")),
			connect.WithClientOptions(opts...),
		),
		updateChannel: connect.NewClient[v1.UpdateChannelRequest, v1.UpdateChannelResponse](
			httpClient,
			baseURL+CommunityServiceUpdateChannelProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateChannel")),
			connect.WithClientOptions(opts...),
		),
		deleteChannel: connect.NewClient[v1.DeleteChannelRequest, v1.DeleteChannelResponse](
			httpClient,
			baseURL+CommunityServiceDeleteChannelProcedure,
			connect.WithSchema(communityServiceMethods.ByName("DeleteChannel")),
			connect.WithClientOptions(opts...),
		),
		listChannels: connect.NewClient[v1.ListChannelsRequest, v1.ListChannelsResponse](
			httpClient,
			baseURL+CommunityServiceListChannelsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListChannels")),
			connect.WithClientOptions(opts...),
		),
		reorderChannels: connect.NewClient[v1.ReorderChannelsRequest, v1.ReorderChannelsResponse](
			httpClient,
			baseURL+CommunityServiceReorderChannelsProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ReorderChannels")),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+CommunityServiceCreateRoleProcedure,
			connect.WithSchema(communityServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[v1.GetRoleRequest, v1.GetRoleResponse](
			httpClient,
			baseURL+CommunityServiceGetRoleProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[v1.UpdateRoleRequest, v1.UpdateRoleResponse](
			httpClient,
			baseURL+CommunityServiceUpdateRoleProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, v1.DeleteRoleResponse](
			httpClient,
			baseURL+CommunityServiceDeleteRoleProcedure,
			connect.WithSchema(communityServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+CommunityServiceListRolesProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		listRoleMembers: connect.NewClient[v1.ListRoleMembersRequest, v1.ListRoleMembersResponse](
			httpClient,
			baseURL+CommunityServiceListRoleMembersProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListRoleMembers")),
			connect.WithClientOptions(opts...),
		),
		createInvite: connect.NewClient[v1.CreateInviteRequest, v1.CreateInviteResponse](
			httpClient,
			baseURL+CommunityServiceCreateInviteProcedure,
			connect.WithSchema(communityServiceMethods.ByName("CreateInvite")),
			connect.WithClientOptions(opts...),
		),
		getInvite: connect.NewClient[v1.GetInviteRequest, v1.GetInviteResponse](
			httpClient,
			baseURL+CommunityServiceGetInviteProcedure,
			connect.WithSchema(communityServiceMethods.ByName("GetInvite")),
			connect.WithClientOptions(opts...),
		),
		revokeInvite: connect.NewClient[v1.RevokeInviteRequest, v1.RevokeInviteResponse](
			httpClient,
			baseURL+CommunityServiceRevokeInviteProcedure,
			connect.WithSchema(communityServiceMethods.ByName("RevokeInvite")),
			connect.WithClientOptions(opts...),
		),
		listInvites: connect.NewClient[v1.ListInvitesRequest, v1.ListInvitesResponse](
			httpClient,
			baseURL+CommunityServiceListInvitesProcedure,
			connect.WithSchema(communityServiceMethods.ByName("ListInvites")),
			connect.WithClientOptions(opts...),
		),
		useInvite: connect.NewClient[v1.UseInviteRequest, v1.UseInviteResponse](
			httpClient,
			baseURL+CommunityServiceUseInviteProcedure,
			connect.WithSchema(communityServiceMethods.ByName("UseInvite")),
			connect.WithClientOptions(opts...),
		),
	}
}

// communityServiceClient implements CommunityServiceClient.
type communityServiceClient struct {
	createGroup             *connect.Client[v1.CreateGroupRequest, v1.CreateGroupResponse]
	getGroup                *connect.Client[v1.GetGroupRequest, v1.GetGroupResponse]
	updateGroup             *connect.Client[v1.UpdateGroupRequest, v1.UpdateGroupResponse]
	deleteGroup             *connect.Client[v1.DeleteGroupRequest, v1.DeleteGroupResponse]
	listGroups              *connect.Client[v1.ListGroupsRequest, v1.ListGroupsResponse]
	searchGroups            *connect.Client[v1.SearchGroupsRequest, v1.SearchGroupsResponse]
	getGroupStats           *connect.Client[v1.GetGroupStatsRequest, v1.GetGroupStatsResponse]
	joinGroup               *connect.Client[v1.JoinGroupRequest, v1.JoinGroupResponse]
	leaveGroup              *connect.Client[v1.LeaveGroupRequest, v1.LeaveGroupResponse]
	inviteMember            *connect.Client[v1.InviteMemberRequest, v1.InviteMemberResponse]
	removeMember            *connect.Client[v1.RemoveMemberRequest, v1.RemoveMemberResponse]
	updateMemberRole        *connect.Client[v1.UpdateMemberRoleRequest, v1.UpdateMemberRoleResponse]
	listMembers             *connect.Client[v1.ListMembersRequest, v1.ListMembersResponse]
	getMember               *connect.Client[v1.GetMemberRequest, v1.GetMemberResponse]
	approveMember           *connect.Client[v1.ApproveMemberRequest, v1.ApproveMemberResponse]
	rejectMember            *connect.Client[v1.RejectMemberRequest, v1.RejectMemberResponse]
	createEvent             *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvent                *connect.Client[v1.GetEventRequest, v1.GetEventResponse]
	updateEvent             *connect.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	deleteEvent             *connect.Client[v1.DeleteEventRequest, v1.DeleteEventResponse]
	listEvents              *connect.Client[v1.ListEventsRequest, v1.ListEventsResponse]
	searchEvents            *connect.Client[v1.SearchEventsRequest, v1.SearchEventsResponse]
	joinEvent               *connect.Client[v1.JoinEventRequest, v1.JoinEventResponse]
	leaveEvent              *connect.Client[v1.LeaveEventRequest, v1.LeaveEventResponse]
	listParticipants        *connect.Client[v1.ListParticipantsRequest, v1.ListParticipantsResponse]
	updateParticipantStatus *connect.Client[v1.UpdateParticipantStatusRequest, v1.UpdateParticipantStatusResponse]
	createChannel           *connect.Client[v1.CreateChannelRequest, v1.CreateChannelResponse]
	getChannel              *connect.Client[v1.GetChannelRequest, v1.GetChannelResponse]
	updateChannel           *connect.Client[v1.UpdateChannelRequest, v1.UpdateChannelResponse]
	deleteChannel           *connect.Client[v1.DeleteChannelRequest, v1.DeleteChannelResponse]
	listChannels            *connect.Client[v1.ListChannelsRequest, v1.ListChannelsResponse]
	reorderChannels         *connect.Client[v1.ReorderChannelsRequest, v1.ReorderChannelsResponse]
	createRole              *connect.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	getRole                 *connect.Client[v1.GetRoleRequest, v1.GetRoleResponse]
	updateRole              *connect.Client[v1.UpdateRoleRequest, v1.UpdateRoleResponse]
	deleteRole              *connect.Client[v1.DeleteRoleRequest, v1.DeleteRoleResponse]
	listRoles               *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	listRoleMembers         *connect.Client[v1.ListRoleMembersRequest, v1.ListRoleMembersResponse]
	createInvite            *connect.Client[v1.CreateInviteRequest, v1.CreateInviteResponse]
	getInvite               *connect.Client[v1.GetInviteRequest, v1.GetInviteResponse]
	revokeInvite            *connect.Client[v1.RevokeInviteRequest, v1.RevokeInviteResponse]
	listInvites             *connect.Client[v1.ListInvitesRequest, v1.ListInvitesResponse]
	useInvite               *connect.Client[v1.UseInviteRequest, v1.UseInviteResponse]
}

// CreateGroup calls avion.community.v1.CommunityService.CreateGroup.
func (c *communityServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls avion.community.v1.CommunityService.GetGroup.
func (c *communityServiceClient) GetGroup(ctx context.Context, req *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// UpdateGroup calls avion.community.v1.CommunityService.UpdateGroup.
func (c *communityServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls avion.community.v1.CommunityService.DeleteGroup.
func (c *communityServiceClient) DeleteGroup(ctx context.Context, req *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// ListGroups calls avion.community.v1.CommunityService.ListGroups.
func (c *communityServiceClient) ListGroups(ctx context.Context, req *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// SearchGroups calls avion.community.v1.CommunityService.SearchGroups.
func (c *communityServiceClient) SearchGroups(ctx context.Context, req *connect.Request[v1.SearchGroupsRequest]) (*connect.Response[v1.SearchGroupsResponse], error) {
	return c.searchGroups.CallUnary(ctx, req)
}

// GetGroupStats calls avion.community.v1.CommunityService.GetGroupStats.
func (c *communityServiceClient) GetGroupStats(ctx context.Context, req *connect.Request[v1.GetGroupStatsRequest]) (*connect.Response[v1.GetGroupStatsResponse], error) {
	return c.getGroupStats.CallUnary(ctx, req)
}

// JoinGroup calls avion.community.v1.CommunityService.JoinGroup.
func (c *communityServiceClient) JoinGroup(ctx context.Context, req *connect.Request[v1.JoinGroupRequest]) (*connect.Response[v1.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls avion.community.v1.CommunityService.LeaveGroup.
func (c *communityServiceClient) LeaveGroup(ctx context.Context, req *connect.Request[v1.LeaveGroupRequest]) (*connect.Response[v1.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// InviteMember calls avion.community.v1.CommunityService.InviteMember.
func (c *communityServiceClient) InviteMember(ctx context.Context, req *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error) {
	return c.inviteMember.CallUnary(ctx, req)
}

// RemoveMember calls avion.community.v1.CommunityService.RemoveMember.
func (c *communityServiceClient) RemoveMember(ctx context.Context, req *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[v1.RemoveMemberResponse], error) {
	return c.removeMember.CallUnary(ctx, req)
}

// UpdateMemberRole calls avion.community.v1.CommunityService.UpdateMemberRole.
func (c *communityServiceClient) UpdateMemberRole(ctx context.Context, req *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error) {
	return c.updateMemberRole.CallUnary(ctx, req)
}

// ListMembers calls avion.community.v1.CommunityService.ListMembers.
func (c *communityServiceClient) ListMembers(ctx context.Context, req *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return c.listMembers.CallUnary(ctx, req)
}

// GetMember calls avion.community.v1.CommunityService.GetMember.
func (c *communityServiceClient) GetMember(ctx context.Context, req *connect.Request[v1.GetMemberRequest]) (*connect.Response[v1.GetMemberResponse], error) {
	return c.getMember.CallUnary(ctx, req)
}

// ApproveMember calls avion.community.v1.CommunityService.ApproveMember.
func (c *communityServiceClient) ApproveMember(ctx context.Context, req *connect.Request[v1.ApproveMemberRequest]) (*connect.Response[v1.ApproveMemberResponse], error) {
	return c.approveMember.CallUnary(ctx, req)
}

// RejectMember calls avion.community.v1.CommunityService.RejectMember.
func (c *communityServiceClient) RejectMember(ctx context.Context, req *connect.Request[v1.RejectMemberRequest]) (*connect.Response[v1.RejectMemberResponse], error) {
	return c.rejectMember.CallUnary(ctx, req)
}

// CreateEvent calls avion.community.v1.CommunityService.CreateEvent.
func (c *communityServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvent calls avion.community.v1.CommunityService.GetEvent.
func (c *communityServiceClient) GetEvent(ctx context.Context, req *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// UpdateEvent calls avion.community.v1.CommunityService.UpdateEvent.
func (c *communityServiceClient) UpdateEvent(ctx context.Context, req *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// DeleteEvent calls avion.community.v1.CommunityService.DeleteEvent.
func (c *communityServiceClient) DeleteEvent(ctx context.Context, req *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return c.deleteEvent.CallUnary(ctx, req)
}

// ListEvents calls avion.community.v1.CommunityService.ListEvents.
func (c *communityServiceClient) ListEvents(ctx context.Context, req *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// SearchEvents calls avion.community.v1.CommunityService.SearchEvents.
func (c *communityServiceClient) SearchEvents(ctx context.Context, req *connect.Request[v1.SearchEventsRequest]) (*connect.Response[v1.SearchEventsResponse], error) {
	return c.searchEvents.CallUnary(ctx, req)
}

// JoinEvent calls avion.community.v1.CommunityService.JoinEvent.
func (c *communityServiceClient) JoinEvent(ctx context.Context, req *connect.Request[v1.JoinEventRequest]) (*connect.Response[v1.JoinEventResponse], error) {
	return c.joinEvent.CallUnary(ctx, req)
}

// LeaveEvent calls avion.community.v1.CommunityService.LeaveEvent.
func (c *communityServiceClient) LeaveEvent(ctx context.Context, req *connect.Request[v1.LeaveEventRequest]) (*connect.Response[v1.LeaveEventResponse], error) {
	return c.leaveEvent.CallUnary(ctx, req)
}

// ListParticipants calls avion.community.v1.CommunityService.ListParticipants.
func (c *communityServiceClient) ListParticipants(ctx context.Context, req *connect.Request[v1.ListParticipantsRequest]) (*connect.Response[v1.ListParticipantsResponse], error) {
	return c.listParticipants.CallUnary(ctx, req)
}

// UpdateParticipantStatus calls avion.community.v1.CommunityService.UpdateParticipantStatus.
func (c *communityServiceClient) UpdateParticipantStatus(ctx context.Context, req *connect.Request[v1.UpdateParticipantStatusRequest]) (*connect.Response[v1.UpdateParticipantStatusResponse], error) {
	return c.updateParticipantStatus.CallUnary(ctx, req)
}

// CreateChannel calls avion.community.v1.CommunityService.CreateChannel.
func (c *communityServiceClient) CreateChannel(ctx context.Context, req *connect.Request[v1.CreateChannelRequest]) (*connect.Response[v1.CreateChannelResponse], error) {
	return c.createChannel.CallUnary(ctx, req)
}

// GetChannel calls avion.community.v1.CommunityService.GetChannel.
func (c *communityServiceClient) GetChannel(ctx context.Context, req *connect.Request[v1.GetChannelRequest]) (*connect.Response[v1.GetChannelResponse], error) {
	return c.getChannel.CallUnary(ctx, req)
}

// UpdateChannel calls avion.community.v1.CommunityService.UpdateChannel.
func (c *communityServiceClient) UpdateChannel(ctx context.Context, req *connect.Request[v1.UpdateChannelRequest]) (*connect.Response[v1.UpdateChannelResponse], error) {
	return c.updateChannel.CallUnary(ctx, req)
}

// DeleteChannel calls avion.community.v1.CommunityService.DeleteChannel.
func (c *communityServiceClient) DeleteChannel(ctx context.Context, req *connect.Request[v1.DeleteChannelRequest]) (*connect.Response[v1.DeleteChannelResponse], error) {
	return c.deleteChannel.CallUnary(ctx, req)
}

// ListChannels calls avion.community.v1.CommunityService.ListChannels.
func (c *communityServiceClient) ListChannels(ctx context.Context, req *connect.Request[v1.ListChannelsRequest]) (*connect.Response[v1.ListChannelsResponse], error) {
	return c.listChannels.CallUnary(ctx, req)
}

// ReorderChannels calls avion.community.v1.CommunityService.ReorderChannels.
func (c *communityServiceClient) ReorderChannels(ctx context.Context, req *connect.Request[v1.ReorderChannelsRequest]) (*connect.Response[v1.ReorderChannelsResponse], error) {
	return c.reorderChannels.CallUnary(ctx, req)
}

// CreateRole calls avion.community.v1.CommunityService.CreateRole.
func (c *communityServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// GetRole calls avion.community.v1.CommunityService.GetRole.
func (c *communityServiceClient) GetRole(ctx context.Context, req *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// UpdateRole calls avion.community.v1.CommunityService.UpdateRole.
func (c *communityServiceClient) UpdateRole(ctx context.Context, req *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls avion.community.v1.CommunityService.DeleteRole.
func (c *communityServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// ListRoles calls avion.community.v1.CommunityService.ListRoles.
func (c *communityServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// ListRoleMembers calls avion.community.v1.CommunityService.ListRoleMembers.
func (c *communityServiceClient) ListRoleMembers(ctx context.Context, req *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error) {
	return c.listRoleMembers.CallUnary(ctx, req)
}

// CreateInvite calls avion.community.v1.CommunityService.CreateInvite.
func (c *communityServiceClient) CreateInvite(ctx context.Context, req *connect.Request[v1.CreateInviteRequest]) (*connect.Response[v1.CreateInviteResponse], error) {
	return c.createInvite.CallUnary(ctx, req)
}

// GetInvite calls avion.community.v1.CommunityService.GetInvite.
func (c *communityServiceClient) GetInvite(ctx context.Context, req *connect.Request[v1.GetInviteRequest]) (*connect.Response[v1.GetInviteResponse], error) {
	return c.getInvite.CallUnary(ctx, req)
}

// RevokeInvite calls avion.community.v1.CommunityService.RevokeInvite.
func (c *communityServiceClient) RevokeInvite(ctx context.Context, req *connect.Request[v1.RevokeInviteRequest]) (*connect.Response[v1.RevokeInviteResponse], error) {
	return c.revokeInvite.CallUnary(ctx, req)
}

// ListInvites calls avion.community.v1.CommunityService.ListInvites.
func (c *communityServiceClient) ListInvites(ctx context.Context, req *connect.Request[v1.ListInvitesRequest]) (*connect.Response[v1.ListInvitesResponse], error) {
	return c.listInvites.CallUnary(ctx, req)
}

// UseInvite calls avion.community.v1.CommunityService.UseInvite.
func (c *communityServiceClient) UseInvite(ctx context.Context, req *connect.Request[v1.UseInviteRequest]) (*connect.Response[v1.UseInviteResponse], error) {
	return c.useInvite.CallUnary(ctx, req)
}

// CommunityServiceHandler is an implementation of the avion.community.v1.CommunityService service.
type CommunityServiceHandler interface {
	// グループ管理
	// グループ作成
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	// グループ取得
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error)
	// グループ更新
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	// グループ削除
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
	// グループ一覧取得
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	// グループ検索
	SearchGroups(context.Context, *connect.Request[v1.SearchGroupsRequest]) (*connect.Response[v1.SearchGroupsResponse], error)
	// グループ統計取得
	GetGroupStats(context.Context, *connect.Request[v1.GetGroupStatsRequest]) (*connect.Response[v1.GetGroupStatsResponse], error)
	// メンバー管理
	// メンバー追加（参加）
	JoinGroup(context.Context, *connect.Request[v1.JoinGroupRequest]) (*connect.Response[v1.JoinGroupResponse], error)
	// メンバー削除（退出）
	LeaveGroup(context.Context, *connect.Request[v1.LeaveGroupRequest]) (*connect.Response[v1.LeaveGroupResponse], error)
	// メンバー招待
	InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error)
	// メンバー追放
	RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[v1.RemoveMemberResponse], error)
	// メンバー役割更新
	UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error)
	// メンバー一覧取得
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	// メンバー取得
	GetMember(context.Context, *connect.Request[v1.GetMemberRequest]) (*connect.Response[v1.GetMemberResponse], error)
	// 参加申請承認
	ApproveMember(context.Context, *connect.Request[v1.ApproveMemberRequest]) (*connect.Response[v1.ApproveMemberResponse], error)
	// 参加申請拒否
	RejectMember(context.Context, *connect.Request[v1.RejectMemberRequest]) (*connect.Response[v1.RejectMemberResponse], error)
	// イベント管理
	// イベント作成
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	// イベント取得
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	// イベント更新
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	// イベント削除
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	// イベント一覧取得
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// イベント検索
	SearchEvents(context.Context, *connect.Request[v1.SearchEventsRequest]) (*connect.Response[v1.SearchEventsResponse], error)
	// イベント参加
	JoinEvent(context.Context, *connect.Request[v1.JoinEventRequest]) (*connect.Response[v1.JoinEventResponse], error)
	// イベント参加キャンセル
	LeaveEvent(context.Context, *connect.Request[v1.LeaveEventRequest]) (*connect.Response[v1.LeaveEventResponse], error)
	// イベント参加者一覧取得
	ListParticipants(context.Context, *connect.Request[v1.ListParticipantsRequest]) (*connect.Response[v1.ListParticipantsResponse], error)
	// イベント参加者ステータス更新
	UpdateParticipantStatus(context.Context, *connect.Request[v1.UpdateParticipantStatusRequest]) (*connect.Response[v1.UpdateParticipantStatusResponse], error)
	// チャンネル管理
	// チャンネル作成
	CreateChannel(context.Context, *connect.Request[v1.CreateChannelRequest]) (*connect.Response[v1.CreateChannelResponse], error)
	// チャンネル取得
	GetChannel(context.Context, *connect.Request[v1.GetChannelRequest]) (*connect.Response[v1.GetChannelResponse], error)
	// チャンネル更新
	UpdateChannel(context.Context, *connect.Request[v1.UpdateChannelRequest]) (*connect.Response[v1.UpdateChannelResponse], error)
	// チャンネル削除
	DeleteChannel(context.Context, *connect.Request[v1.DeleteChannelRequest]) (*connect.Response[v1.DeleteChannelResponse], error)
	// チャンネル一覧取得
	ListChannels(context.Context, *connect.Request[v1.ListChannelsRequest]) (*connect.Response[v1.ListChannelsResponse], error)
	// チャンネル並び替え
	ReorderChannels(context.Context, *connect.Request[v1.ReorderChannelsRequest]) (*connect.Response[v1.ReorderChannelsResponse], error)
	// 役割管理
	// 役割作成
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// 役割取得
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// 役割更新
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// 役割削除
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// 役割一覧取得
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// 役割メンバー一覧取得
	ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error)
	// 招待管理
	// 招待作成
	CreateInvite(context.Context, *connect.Request[v1.CreateInviteRequest]) (*connect.Response[v1.CreateInviteResponse], error)
	// 招待取得
	GetInvite(context.Context, *connect.Request[v1.GetInviteRequest]) (*connect.Response[v1.GetInviteResponse], error)
	// 招待削除
	RevokeInvite(context.Context, *connect.Request[v1.RevokeInviteRequest]) (*connect.Response[v1.RevokeInviteResponse], error)
	// 招待一覧取得
	ListInvites(context.Context, *connect.Request[v1.ListInvitesRequest]) (*connect.Response[v1.ListInvitesResponse], error)
	// 招待使用
	UseInvite(context.Context, *connect.Request[v1.UseInviteRequest]) (*connect.Response[v1.UseInviteResponse], error)
}

// NewCommunityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommunityServiceHandler(svc CommunityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	communityServiceMethods := v1.File_avion_community_v1_community_service_proto.Services().ByName("CommunityService").Methods()
	communityServiceCreateGroupHandler := connect.NewUnaryHandler(
		CommunityServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(communityServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetGroupHandler := connect.NewUnaryHandler(
		CommunityServiceGetGroupProcedure,
		svc.GetGroup,
		connect.WithSchema(communityServiceMethods.ByName("GetGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateGroupHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(communityServiceMethods.ByName("UpdateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceDeleteGroupHandler := connect.NewUnaryHandler(
		CommunityServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		connect.WithSchema(communityServiceMethods.ByName("DeleteGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListGroupsHandler := connect.NewUnaryHandler(
		CommunityServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(communityServiceMethods.ByName("ListGroups")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceSearchGroupsHandler := connect.NewUnaryHandler(
		CommunityServiceSearchGroupsProcedure,
		svc.SearchGroups,
		connect.WithSchema(communityServiceMethods.ByName("SearchGroups")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetGroupStatsHandler := connect.NewUnaryHandler(
		CommunityServiceGetGroupStatsProcedure,
		svc.GetGroupStats,
		connect.WithSchema(communityServiceMethods.ByName("GetGroupStats")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceJoinGroupHandler := connect.NewUnaryHandler(
		CommunityServiceJoinGroupProcedure,
		svc.JoinGroup,
		connect.WithSchema(communityServiceMethods.ByName("JoinGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceLeaveGroupHandler := connect.NewUnaryHandler(
		CommunityServiceLeaveGroupProcedure,
		svc.LeaveGroup,
		connect.WithSchema(communityServiceMethods.ByName("LeaveGroup")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceInviteMemberHandler := connect.NewUnaryHandler(
		CommunityServiceInviteMemberProcedure,
		svc.InviteMember,
		connect.WithSchema(communityServiceMethods.ByName("InviteMember")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceRemoveMemberHandler := connect.NewUnaryHandler(
		CommunityServiceRemoveMemberProcedure,
		svc.RemoveMember,
		connect.WithSchema(communityServiceMethods.ByName("RemoveMember")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateMemberRoleHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateMemberRoleProcedure,
		svc.UpdateMemberRole,
		connect.WithSchema(communityServiceMethods.ByName("UpdateMemberRole")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListMembersHandler := connect.NewUnaryHandler(
		CommunityServiceListMembersProcedure,
		svc.ListMembers,
		connect.WithSchema(communityServiceMethods.ByName("ListMembers")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetMemberHandler := connect.NewUnaryHandler(
		CommunityServiceGetMemberProcedure,
		svc.GetMember,
		connect.WithSchema(communityServiceMethods.ByName("GetMember")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceApproveMemberHandler := connect.NewUnaryHandler(
		CommunityServiceApproveMemberProcedure,
		svc.ApproveMember,
		connect.WithSchema(communityServiceMethods.ByName("ApproveMember")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceRejectMemberHandler := connect.NewUnaryHandler(
		CommunityServiceRejectMemberProcedure,
		svc.RejectMember,
		connect.WithSchema(communityServiceMethods.ByName("RejectMember")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceCreateEventHandler := connect.NewUnaryHandler(
		CommunityServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(communityServiceMethods.ByName("CreateEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetEventHandler := connect.NewUnaryHandler(
		CommunityServiceGetEventProcedure,
		svc.GetEvent,
		connect.WithSchema(communityServiceMethods.ByName("GetEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateEventHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateEventProcedure,
		svc.UpdateEvent,
		connect.WithSchema(communityServiceMethods.ByName("UpdateEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceDeleteEventHandler := connect.NewUnaryHandler(
		CommunityServiceDeleteEventProcedure,
		svc.DeleteEvent,
		connect.WithSchema(communityServiceMethods.ByName("DeleteEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListEventsHandler := connect.NewUnaryHandler(
		CommunityServiceListEventsProcedure,
		svc.ListEvents,
		connect.WithSchema(communityServiceMethods.ByName("ListEvents")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceSearchEventsHandler := connect.NewUnaryHandler(
		CommunityServiceSearchEventsProcedure,
		svc.SearchEvents,
		connect.WithSchema(communityServiceMethods.ByName("SearchEvents")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceJoinEventHandler := connect.NewUnaryHandler(
		CommunityServiceJoinEventProcedure,
		svc.JoinEvent,
		connect.WithSchema(communityServiceMethods.ByName("JoinEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceLeaveEventHandler := connect.NewUnaryHandler(
		CommunityServiceLeaveEventProcedure,
		svc.LeaveEvent,
		connect.WithSchema(communityServiceMethods.ByName("LeaveEvent")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListParticipantsHandler := connect.NewUnaryHandler(
		CommunityServiceListParticipantsProcedure,
		svc.ListParticipants,
		connect.WithSchema(communityServiceMethods.ByName("ListParticipants")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateParticipantStatusHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateParticipantStatusProcedure,
		svc.UpdateParticipantStatus,
		connect.WithSchema(communityServiceMethods.ByName("UpdateParticipantStatus")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceCreateChannelHandler := connect.NewUnaryHandler(
		CommunityServiceCreateChannelProcedure,
		svc.CreateChannel,
		connect.WithSchema(communityServiceMethods.ByName("CreateChannel")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetChannelHandler := connect.NewUnaryHandler(
		CommunityServiceGetChannelProcedure,
		svc.GetChannel,
		connect.WithSchema(communityServiceMethods.ByName("GetChannel")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateChannelHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateChannelProcedure,
		svc.UpdateChannel,
		connect.WithSchema(communityServiceMethods.ByName("UpdateChannel")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceDeleteChannelHandler := connect.NewUnaryHandler(
		CommunityServiceDeleteChannelProcedure,
		svc.DeleteChannel,
		connect.WithSchema(communityServiceMethods.ByName("DeleteChannel")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListChannelsHandler := connect.NewUnaryHandler(
		CommunityServiceListChannelsProcedure,
		svc.ListChannels,
		connect.WithSchema(communityServiceMethods.ByName("ListChannels")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceReorderChannelsHandler := connect.NewUnaryHandler(
		CommunityServiceReorderChannelsProcedure,
		svc.ReorderChannels,
		connect.WithSchema(communityServiceMethods.ByName("ReorderChannels")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceCreateRoleHandler := connect.NewUnaryHandler(
		CommunityServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(communityServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetRoleHandler := connect.NewUnaryHandler(
		CommunityServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(communityServiceMethods.ByName("GetRole")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUpdateRoleHandler := connect.NewUnaryHandler(
		CommunityServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(communityServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceDeleteRoleHandler := connect.NewUnaryHandler(
		CommunityServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(communityServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListRolesHandler := connect.NewUnaryHandler(
		CommunityServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(communityServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListRoleMembersHandler := connect.NewUnaryHandler(
		CommunityServiceListRoleMembersProcedure,
		svc.ListRoleMembers,
		connect.WithSchema(communityServiceMethods.ByName("ListRoleMembers")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceCreateInviteHandler := connect.NewUnaryHandler(
		CommunityServiceCreateInviteProcedure,
		svc.CreateInvite,
		connect.WithSchema(communityServiceMethods.ByName("CreateInvite")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceGetInviteHandler := connect.NewUnaryHandler(
		CommunityServiceGetInviteProcedure,
		svc.GetInvite,
		connect.WithSchema(communityServiceMethods.ByName("GetInvite")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceRevokeInviteHandler := connect.NewUnaryHandler(
		CommunityServiceRevokeInviteProcedure,
		svc.RevokeInvite,
		connect.WithSchema(communityServiceMethods.ByName("RevokeInvite")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceListInvitesHandler := connect.NewUnaryHandler(
		CommunityServiceListInvitesProcedure,
		svc.ListInvites,
		connect.WithSchema(communityServiceMethods.ByName("ListInvites")),
		connect.WithHandlerOptions(opts...),
	)
	communityServiceUseInviteHandler := connect.NewUnaryHandler(
		CommunityServiceUseInviteProcedure,
		svc.UseInvite,
		connect.WithSchema(communityServiceMethods.ByName("UseInvite")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.community.v1.CommunityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommunityServiceCreateGroupProcedure:
			communityServiceCreateGroupHandler.ServeHTTP(w, r)
		case CommunityServiceGetGroupProcedure:
			communityServiceGetGroupHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateGroupProcedure:
			communityServiceUpdateGroupHandler.ServeHTTP(w, r)
		case CommunityServiceDeleteGroupProcedure:
			communityServiceDeleteGroupHandler.ServeHTTP(w, r)
		case CommunityServiceListGroupsProcedure:
			communityServiceListGroupsHandler.ServeHTTP(w, r)
		case CommunityServiceSearchGroupsProcedure:
			communityServiceSearchGroupsHandler.ServeHTTP(w, r)
		case CommunityServiceGetGroupStatsProcedure:
			communityServiceGetGroupStatsHandler.ServeHTTP(w, r)
		case CommunityServiceJoinGroupProcedure:
			communityServiceJoinGroupHandler.ServeHTTP(w, r)
		case CommunityServiceLeaveGroupProcedure:
			communityServiceLeaveGroupHandler.ServeHTTP(w, r)
		case CommunityServiceInviteMemberProcedure:
			communityServiceInviteMemberHandler.ServeHTTP(w, r)
		case CommunityServiceRemoveMemberProcedure:
			communityServiceRemoveMemberHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateMemberRoleProcedure:
			communityServiceUpdateMemberRoleHandler.ServeHTTP(w, r)
		case CommunityServiceListMembersProcedure:
			communityServiceListMembersHandler.ServeHTTP(w, r)
		case CommunityServiceGetMemberProcedure:
			communityServiceGetMemberHandler.ServeHTTP(w, r)
		case CommunityServiceApproveMemberProcedure:
			communityServiceApproveMemberHandler.ServeHTTP(w, r)
		case CommunityServiceRejectMemberProcedure:
			communityServiceRejectMemberHandler.ServeHTTP(w, r)
		case CommunityServiceCreateEventProcedure:
			communityServiceCreateEventHandler.ServeHTTP(w, r)
		case CommunityServiceGetEventProcedure:
			communityServiceGetEventHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateEventProcedure:
			communityServiceUpdateEventHandler.ServeHTTP(w, r)
		case CommunityServiceDeleteEventProcedure:
			communityServiceDeleteEventHandler.ServeHTTP(w, r)
		case CommunityServiceListEventsProcedure:
			communityServiceListEventsHandler.ServeHTTP(w, r)
		case CommunityServiceSearchEventsProcedure:
			communityServiceSearchEventsHandler.ServeHTTP(w, r)
		case CommunityServiceJoinEventProcedure:
			communityServiceJoinEventHandler.ServeHTTP(w, r)
		case CommunityServiceLeaveEventProcedure:
			communityServiceLeaveEventHandler.ServeHTTP(w, r)
		case CommunityServiceListParticipantsProcedure:
			communityServiceListParticipantsHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateParticipantStatusProcedure:
			communityServiceUpdateParticipantStatusHandler.ServeHTTP(w, r)
		case CommunityServiceCreateChannelProcedure:
			communityServiceCreateChannelHandler.ServeHTTP(w, r)
		case CommunityServiceGetChannelProcedure:
			communityServiceGetChannelHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateChannelProcedure:
			communityServiceUpdateChannelHandler.ServeHTTP(w, r)
		case CommunityServiceDeleteChannelProcedure:
			communityServiceDeleteChannelHandler.ServeHTTP(w, r)
		case CommunityServiceListChannelsProcedure:
			communityServiceListChannelsHandler.ServeHTTP(w, r)
		case CommunityServiceReorderChannelsProcedure:
			communityServiceReorderChannelsHandler.ServeHTTP(w, r)
		case CommunityServiceCreateRoleProcedure:
			communityServiceCreateRoleHandler.ServeHTTP(w, r)
		case CommunityServiceGetRoleProcedure:
			communityServiceGetRoleHandler.ServeHTTP(w, r)
		case CommunityServiceUpdateRoleProcedure:
			communityServiceUpdateRoleHandler.ServeHTTP(w, r)
		case CommunityServiceDeleteRoleProcedure:
			communityServiceDeleteRoleHandler.ServeHTTP(w, r)
		case CommunityServiceListRolesProcedure:
			communityServiceListRolesHandler.ServeHTTP(w, r)
		case CommunityServiceListRoleMembersProcedure:
			communityServiceListRoleMembersHandler.ServeHTTP(w, r)
		case CommunityServiceCreateInviteProcedure:
			communityServiceCreateInviteHandler.ServeHTTP(w, r)
		case CommunityServiceGetInviteProcedure:
			communityServiceGetInviteHandler.ServeHTTP(w, r)
		case CommunityServiceRevokeInviteProcedure:
			communityServiceRevokeInviteHandler.ServeHTTP(w, r)
		case CommunityServiceListInvitesProcedure:
			communityServiceListInvitesHandler.ServeHTTP(w, r)
		case CommunityServiceUseInviteProcedure:
			communityServiceUseInviteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommunityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommunityServiceHandler struct{}

func (UnimplementedCommunityServiceHandler) CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.CreateGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.DeleteGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListGroups is not implemented"))
}

func (UnimplementedCommunityServiceHandler) SearchGroups(context.Context, *connect.Request[v1.SearchGroupsRequest]) (*connect.Response[v1.SearchGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.SearchGroups is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetGroupStats(context.Context, *connect.Request[v1.GetGroupStatsRequest]) (*connect.Response[v1.GetGroupStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetGroupStats is not implemented"))
}

func (UnimplementedCommunityServiceHandler) JoinGroup(context.Context, *connect.Request[v1.JoinGroupRequest]) (*connect.Response[v1.JoinGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.JoinGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) LeaveGroup(context.Context, *connect.Request[v1.LeaveGroupRequest]) (*connect.Response[v1.LeaveGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.LeaveGroup is not implemented"))
}

func (UnimplementedCommunityServiceHandler) InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.InviteMember is not implemented"))
}

func (UnimplementedCommunityServiceHandler) RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[v1.RemoveMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.RemoveMember is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateMemberRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListMembers is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetMember(context.Context, *connect.Request[v1.GetMemberRequest]) (*connect.Response[v1.GetMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetMember is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ApproveMember(context.Context, *connect.Request[v1.ApproveMemberRequest]) (*connect.Response[v1.ApproveMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ApproveMember is not implemented"))
}

func (UnimplementedCommunityServiceHandler) RejectMember(context.Context, *connect.Request[v1.RejectMemberRequest]) (*connect.Response[v1.RejectMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.RejectMember is not implemented"))
}

func (UnimplementedCommunityServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.CreateEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.DeleteEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListEvents is not implemented"))
}

func (UnimplementedCommunityServiceHandler) SearchEvents(context.Context, *connect.Request[v1.SearchEventsRequest]) (*connect.Response[v1.SearchEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.SearchEvents is not implemented"))
}

func (UnimplementedCommunityServiceHandler) JoinEvent(context.Context, *connect.Request[v1.JoinEventRequest]) (*connect.Response[v1.JoinEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.JoinEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) LeaveEvent(context.Context, *connect.Request[v1.LeaveEventRequest]) (*connect.Response[v1.LeaveEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.LeaveEvent is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListParticipants(context.Context, *connect.Request[v1.ListParticipantsRequest]) (*connect.Response[v1.ListParticipantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListParticipants is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateParticipantStatus(context.Context, *connect.Request[v1.UpdateParticipantStatusRequest]) (*connect.Response[v1.UpdateParticipantStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateParticipantStatus is not implemented"))
}

func (UnimplementedCommunityServiceHandler) CreateChannel(context.Context, *connect.Request[v1.CreateChannelRequest]) (*connect.Response[v1.CreateChannelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.CreateChannel is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetChannel(context.Context, *connect.Request[v1.GetChannelRequest]) (*connect.Response[v1.GetChannelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetChannel is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateChannel(context.Context, *connect.Request[v1.UpdateChannelRequest]) (*connect.Response[v1.UpdateChannelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateChannel is not implemented"))
}

func (UnimplementedCommunityServiceHandler) DeleteChannel(context.Context, *connect.Request[v1.DeleteChannelRequest]) (*connect.Response[v1.DeleteChannelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.DeleteChannel is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListChannels(context.Context, *connect.Request[v1.ListChannelsRequest]) (*connect.Response[v1.ListChannelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListChannels is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ReorderChannels(context.Context, *connect.Request[v1.ReorderChannelsRequest]) (*connect.Response[v1.ReorderChannelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ReorderChannels is not implemented"))
}

func (UnimplementedCommunityServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.CreateRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UpdateRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.DeleteRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListRoles is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListRoleMembers is not implemented"))
}

func (UnimplementedCommunityServiceHandler) CreateInvite(context.Context, *connect.Request[v1.CreateInviteRequest]) (*connect.Response[v1.CreateInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.CreateInvite is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetInvite(context.Context, *connect.Request[v1.GetInviteRequest]) (*connect.Response[v1.GetInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.GetInvite is not implemented"))
}

func (UnimplementedCommunityServiceHandler) RevokeInvite(context.Context, *connect.Request[v1.RevokeInviteRequest]) (*connect.Response[v1.RevokeInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.RevokeInvite is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListInvites(context.Context, *connect.Request[v1.ListInvitesRequest]) (*connect.Response[v1.ListInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.ListInvites is not implemented"))
}

func (UnimplementedCommunityServiceHandler) UseInvite(context.Context, *connect.Request[v1.UseInviteRequest]) (*connect.Response[v1.UseInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.community.v1.CommunityService.UseInvite is not implemented"))
}
