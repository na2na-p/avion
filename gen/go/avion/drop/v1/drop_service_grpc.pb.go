// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: avion/drop/v1/drop_service.proto

package dropv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DropService_CreateDrop_FullMethodName            = "/avion.drop.v1.DropService/CreateDrop"
	DropService_GetDrop_FullMethodName               = "/avion.drop.v1.DropService/GetDrop"
	DropService_UpdateDrop_FullMethodName            = "/avion.drop.v1.DropService/UpdateDrop"
	DropService_DeleteDrop_FullMethodName            = "/avion.drop.v1.DropService/DeleteDrop"
	DropService_ListDrops_FullMethodName             = "/avion.drop.v1.DropService/ListDrops"
	DropService_ListUserDrops_FullMethodName         = "/avion.drop.v1.DropService/ListUserDrops"
	DropService_AddLike_FullMethodName               = "/avion.drop.v1.DropService/AddLike"
	DropService_RemoveLike_FullMethodName            = "/avion.drop.v1.DropService/RemoveLike"
	DropService_AddRedrop_FullMethodName             = "/avion.drop.v1.DropService/AddRedrop"
	DropService_RemoveRedrop_FullMethodName          = "/avion.drop.v1.DropService/RemoveRedrop"
	DropService_AddBookmark_FullMethodName           = "/avion.drop.v1.DropService/AddBookmark"
	DropService_RemoveBookmark_FullMethodName        = "/avion.drop.v1.DropService/RemoveBookmark"
	DropService_ReplyToDrop_FullMethodName           = "/avion.drop.v1.DropService/ReplyToDrop"
	DropService_QuoteDrop_FullMethodName             = "/avion.drop.v1.DropService/QuoteDrop"
	DropService_SearchDrops_FullMethodName           = "/avion.drop.v1.DropService/SearchDrops"
	DropService_GetDropThread_FullMethodName         = "/avion.drop.v1.DropService/GetDropThread"
	DropService_CreateDraft_FullMethodName           = "/avion.drop.v1.DropService/CreateDraft"
	DropService_GetDraft_FullMethodName              = "/avion.drop.v1.DropService/GetDraft"
	DropService_UpdateDraft_FullMethodName           = "/avion.drop.v1.DropService/UpdateDraft"
	DropService_DeleteDraft_FullMethodName           = "/avion.drop.v1.DropService/DeleteDraft"
	DropService_ListDrafts_FullMethodName            = "/avion.drop.v1.DropService/ListDrafts"
	DropService_PublishDraft_FullMethodName          = "/avion.drop.v1.DropService/PublishDraft"
	DropService_AutoSaveDraft_FullMethodName         = "/avion.drop.v1.DropService/AutoSaveDraft"
	DropService_CreatePoll_FullMethodName            = "/avion.drop.v1.DropService/CreatePoll"
	DropService_VotePoll_FullMethodName              = "/avion.drop.v1.DropService/VotePoll"
	DropService_GetPollResults_FullMethodName        = "/avion.drop.v1.DropService/GetPollResults"
	DropService_ClosePoll_FullMethodName             = "/avion.drop.v1.DropService/ClosePoll"
	DropService_GetDropReactions_FullMethodName      = "/avion.drop.v1.DropService/GetDropReactions"
	DropService_ListUserBookmarks_FullMethodName     = "/avion.drop.v1.DropService/ListUserBookmarks"
	DropService_GetDropEditHistory_FullMethodName    = "/avion.drop.v1.DropService/GetDropEditHistory"
	DropService_GetDropStats_FullMethodName          = "/avion.drop.v1.DropService/GetDropStats"
	DropService_BatchGetDrops_FullMethodName         = "/avion.drop.v1.DropService/BatchGetDrops"
	DropService_BatchDeleteDrops_FullMethodName      = "/avion.drop.v1.DropService/BatchDeleteDrops"
	DropService_BatchUpdateDropStatus_FullMethodName = "/avion.drop.v1.DropService/BatchUpdateDropStatus"
)

// DropServiceClient is the client API for DropService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Dropサービス
type DropServiceClient interface {
	// Drop作成
	CreateDrop(ctx context.Context, in *CreateDropRequest, opts ...grpc.CallOption) (*CreateDropResponse, error)
	// Drop取得
	GetDrop(ctx context.Context, in *GetDropRequest, opts ...grpc.CallOption) (*GetDropResponse, error)
	// Drop更新
	UpdateDrop(ctx context.Context, in *UpdateDropRequest, opts ...grpc.CallOption) (*UpdateDropResponse, error)
	// Drop削除
	DeleteDrop(ctx context.Context, in *DeleteDropRequest, opts ...grpc.CallOption) (*DeleteDropResponse, error)
	// Drop一覧取得
	ListDrops(ctx context.Context, in *ListDropsRequest, opts ...grpc.CallOption) (*ListDropsResponse, error)
	// ユーザーのDrop一覧取得
	ListUserDrops(ctx context.Context, in *ListUserDropsRequest, opts ...grpc.CallOption) (*ListUserDropsResponse, error)
	// Dropにいいね追加
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error)
	// Dropのいいね削除
	RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error)
	// Dropをリドロップ追加
	AddRedrop(ctx context.Context, in *AddRedropRequest, opts ...grpc.CallOption) (*AddRedropResponse, error)
	// Dropのリドロップ削除
	RemoveRedrop(ctx context.Context, in *RemoveRedropRequest, opts ...grpc.CallOption) (*RemoveRedropResponse, error)
	// Dropをブックマーク追加
	AddBookmark(ctx context.Context, in *AddBookmarkRequest, opts ...grpc.CallOption) (*AddBookmarkResponse, error)
	// Dropのブックマーク削除
	RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*RemoveBookmarkResponse, error)
	// Dropにリプライ
	ReplyToDrop(ctx context.Context, in *ReplyToDropRequest, opts ...grpc.CallOption) (*ReplyToDropResponse, error)
	// Dropを引用
	QuoteDrop(ctx context.Context, in *QuoteDropRequest, opts ...grpc.CallOption) (*QuoteDropResponse, error)
	// Drop検索
	SearchDrops(ctx context.Context, in *SearchDropsRequest, opts ...grpc.CallOption) (*SearchDropsResponse, error)
	// Dropスレッド取得（リプライツリー）
	GetDropThread(ctx context.Context, in *GetDropThreadRequest, opts ...grpc.CallOption) (*GetDropThreadResponse, error)
	// 下書き関連のRPC
	// 下書き作成
	CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*CreateDraftResponse, error)
	// 下書き取得
	GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*GetDraftResponse, error)
	// 下書き更新
	UpdateDraft(ctx context.Context, in *UpdateDraftRequest, opts ...grpc.CallOption) (*UpdateDraftResponse, error)
	// 下書き削除
	DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*DeleteDraftResponse, error)
	// 下書き一覧取得
	ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error)
	// 下書きから投稿
	PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*PublishDraftResponse, error)
	// 自動保存（ストリーミング）
	AutoSaveDraft(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AutoSaveDraftRequest, AutoSaveDraftResponse], error)
	// 投票機能関連のRPC
	// 投票作成
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error)
	// 投票に投票
	VotePoll(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*VotePollResponse, error)
	// 投票結果取得
	GetPollResults(ctx context.Context, in *GetPollResultsRequest, opts ...grpc.CallOption) (*GetPollResultsResponse, error)
	// 投票を閉じる
	ClosePoll(ctx context.Context, in *ClosePollRequest, opts ...grpc.CallOption) (*ClosePollResponse, error)
	// リアクション詳細機能
	// リアクションしたユーザー一覧取得
	GetDropReactions(ctx context.Context, in *GetDropReactionsRequest, opts ...grpc.CallOption) (*GetDropReactionsResponse, error)
	// ブックマーク管理
	// ユーザーのブックマーク一覧取得
	ListUserBookmarks(ctx context.Context, in *ListUserBookmarksRequest, opts ...grpc.CallOption) (*ListUserBookmarksResponse, error)
	// 編集履歴管理
	// Drop編集履歴取得
	GetDropEditHistory(ctx context.Context, in *GetDropEditHistoryRequest, opts ...grpc.CallOption) (*GetDropEditHistoryResponse, error)
	// 統計情報
	// Drop統計情報取得
	GetDropStats(ctx context.Context, in *GetDropStatsRequest, opts ...grpc.CallOption) (*GetDropStatsResponse, error)
	// バッチ操作
	// 複数Drop一括取得
	BatchGetDrops(ctx context.Context, in *BatchGetDropsRequest, opts ...grpc.CallOption) (*BatchGetDropsResponse, error)
	// 複数Drop一括削除
	BatchDeleteDrops(ctx context.Context, in *BatchDeleteDropsRequest, opts ...grpc.CallOption) (*BatchDeleteDropsResponse, error)
	// 複数Dropステータス一括更新
	BatchUpdateDropStatus(ctx context.Context, in *BatchUpdateDropStatusRequest, opts ...grpc.CallOption) (*BatchUpdateDropStatusResponse, error)
}

type dropServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDropServiceClient(cc grpc.ClientConnInterface) DropServiceClient {
	return &dropServiceClient{cc}
}

func (c *dropServiceClient) CreateDrop(ctx context.Context, in *CreateDropRequest, opts ...grpc.CallOption) (*CreateDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDropResponse)
	err := c.cc.Invoke(ctx, DropService_CreateDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDrop(ctx context.Context, in *GetDropRequest, opts ...grpc.CallOption) (*GetDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDropResponse)
	err := c.cc.Invoke(ctx, DropService_GetDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) UpdateDrop(ctx context.Context, in *UpdateDropRequest, opts ...grpc.CallOption) (*UpdateDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDropResponse)
	err := c.cc.Invoke(ctx, DropService_UpdateDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) DeleteDrop(ctx context.Context, in *DeleteDropRequest, opts ...grpc.CallOption) (*DeleteDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDropResponse)
	err := c.cc.Invoke(ctx, DropService_DeleteDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ListDrops(ctx context.Context, in *ListDropsRequest, opts ...grpc.CallOption) (*ListDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDropsResponse)
	err := c.cc.Invoke(ctx, DropService_ListDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ListUserDrops(ctx context.Context, in *ListUserDropsRequest, opts ...grpc.CallOption) (*ListUserDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserDropsResponse)
	err := c.cc.Invoke(ctx, DropService_ListUserDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLikeResponse)
	err := c.cc.Invoke(ctx, DropService_AddLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLikeResponse)
	err := c.cc.Invoke(ctx, DropService_RemoveLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) AddRedrop(ctx context.Context, in *AddRedropRequest, opts ...grpc.CallOption) (*AddRedropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRedropResponse)
	err := c.cc.Invoke(ctx, DropService_AddRedrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) RemoveRedrop(ctx context.Context, in *RemoveRedropRequest, opts ...grpc.CallOption) (*RemoveRedropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRedropResponse)
	err := c.cc.Invoke(ctx, DropService_RemoveRedrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) AddBookmark(ctx context.Context, in *AddBookmarkRequest, opts ...grpc.CallOption) (*AddBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookmarkResponse)
	err := c.cc.Invoke(ctx, DropService_AddBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*RemoveBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBookmarkResponse)
	err := c.cc.Invoke(ctx, DropService_RemoveBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ReplyToDrop(ctx context.Context, in *ReplyToDropRequest, opts ...grpc.CallOption) (*ReplyToDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyToDropResponse)
	err := c.cc.Invoke(ctx, DropService_ReplyToDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) QuoteDrop(ctx context.Context, in *QuoteDropRequest, opts ...grpc.CallOption) (*QuoteDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuoteDropResponse)
	err := c.cc.Invoke(ctx, DropService_QuoteDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) SearchDrops(ctx context.Context, in *SearchDropsRequest, opts ...grpc.CallOption) (*SearchDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDropsResponse)
	err := c.cc.Invoke(ctx, DropService_SearchDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDropThread(ctx context.Context, in *GetDropThreadRequest, opts ...grpc.CallOption) (*GetDropThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDropThreadResponse)
	err := c.cc.Invoke(ctx, DropService_GetDropThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*CreateDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDraftResponse)
	err := c.cc.Invoke(ctx, DropService_CreateDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*GetDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDraftResponse)
	err := c.cc.Invoke(ctx, DropService_GetDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) UpdateDraft(ctx context.Context, in *UpdateDraftRequest, opts ...grpc.CallOption) (*UpdateDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDraftResponse)
	err := c.cc.Invoke(ctx, DropService_UpdateDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*DeleteDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDraftResponse)
	err := c.cc.Invoke(ctx, DropService_DeleteDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDraftsResponse)
	err := c.cc.Invoke(ctx, DropService_ListDrafts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*PublishDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishDraftResponse)
	err := c.cc.Invoke(ctx, DropService_PublishDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) AutoSaveDraft(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AutoSaveDraftRequest, AutoSaveDraftResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DropService_ServiceDesc.Streams[0], DropService_AutoSaveDraft_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AutoSaveDraftRequest, AutoSaveDraftResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DropService_AutoSaveDraftClient = grpc.BidiStreamingClient[AutoSaveDraftRequest, AutoSaveDraftResponse]

func (c *dropServiceClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePollResponse)
	err := c.cc.Invoke(ctx, DropService_CreatePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) VotePoll(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*VotePollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VotePollResponse)
	err := c.cc.Invoke(ctx, DropService_VotePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetPollResults(ctx context.Context, in *GetPollResultsRequest, opts ...grpc.CallOption) (*GetPollResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPollResultsResponse)
	err := c.cc.Invoke(ctx, DropService_GetPollResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ClosePoll(ctx context.Context, in *ClosePollRequest, opts ...grpc.CallOption) (*ClosePollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClosePollResponse)
	err := c.cc.Invoke(ctx, DropService_ClosePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDropReactions(ctx context.Context, in *GetDropReactionsRequest, opts ...grpc.CallOption) (*GetDropReactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDropReactionsResponse)
	err := c.cc.Invoke(ctx, DropService_GetDropReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) ListUserBookmarks(ctx context.Context, in *ListUserBookmarksRequest, opts ...grpc.CallOption) (*ListUserBookmarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBookmarksResponse)
	err := c.cc.Invoke(ctx, DropService_ListUserBookmarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDropEditHistory(ctx context.Context, in *GetDropEditHistoryRequest, opts ...grpc.CallOption) (*GetDropEditHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDropEditHistoryResponse)
	err := c.cc.Invoke(ctx, DropService_GetDropEditHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) GetDropStats(ctx context.Context, in *GetDropStatsRequest, opts ...grpc.CallOption) (*GetDropStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDropStatsResponse)
	err := c.cc.Invoke(ctx, DropService_GetDropStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) BatchGetDrops(ctx context.Context, in *BatchGetDropsRequest, opts ...grpc.CallOption) (*BatchGetDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetDropsResponse)
	err := c.cc.Invoke(ctx, DropService_BatchGetDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) BatchDeleteDrops(ctx context.Context, in *BatchDeleteDropsRequest, opts ...grpc.CallOption) (*BatchDeleteDropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteDropsResponse)
	err := c.cc.Invoke(ctx, DropService_BatchDeleteDrops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropServiceClient) BatchUpdateDropStatus(ctx context.Context, in *BatchUpdateDropStatusRequest, opts ...grpc.CallOption) (*BatchUpdateDropStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateDropStatusResponse)
	err := c.cc.Invoke(ctx, DropService_BatchUpdateDropStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropServiceServer is the server API for DropService service.
// All implementations must embed UnimplementedDropServiceServer
// for forward compatibility.
//
// Dropサービス
type DropServiceServer interface {
	// Drop作成
	CreateDrop(context.Context, *CreateDropRequest) (*CreateDropResponse, error)
	// Drop取得
	GetDrop(context.Context, *GetDropRequest) (*GetDropResponse, error)
	// Drop更新
	UpdateDrop(context.Context, *UpdateDropRequest) (*UpdateDropResponse, error)
	// Drop削除
	DeleteDrop(context.Context, *DeleteDropRequest) (*DeleteDropResponse, error)
	// Drop一覧取得
	ListDrops(context.Context, *ListDropsRequest) (*ListDropsResponse, error)
	// ユーザーのDrop一覧取得
	ListUserDrops(context.Context, *ListUserDropsRequest) (*ListUserDropsResponse, error)
	// Dropにいいね追加
	AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error)
	// Dropのいいね削除
	RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error)
	// Dropをリドロップ追加
	AddRedrop(context.Context, *AddRedropRequest) (*AddRedropResponse, error)
	// Dropのリドロップ削除
	RemoveRedrop(context.Context, *RemoveRedropRequest) (*RemoveRedropResponse, error)
	// Dropをブックマーク追加
	AddBookmark(context.Context, *AddBookmarkRequest) (*AddBookmarkResponse, error)
	// Dropのブックマーク削除
	RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*RemoveBookmarkResponse, error)
	// Dropにリプライ
	ReplyToDrop(context.Context, *ReplyToDropRequest) (*ReplyToDropResponse, error)
	// Dropを引用
	QuoteDrop(context.Context, *QuoteDropRequest) (*QuoteDropResponse, error)
	// Drop検索
	SearchDrops(context.Context, *SearchDropsRequest) (*SearchDropsResponse, error)
	// Dropスレッド取得（リプライツリー）
	GetDropThread(context.Context, *GetDropThreadRequest) (*GetDropThreadResponse, error)
	// 下書き関連のRPC
	// 下書き作成
	CreateDraft(context.Context, *CreateDraftRequest) (*CreateDraftResponse, error)
	// 下書き取得
	GetDraft(context.Context, *GetDraftRequest) (*GetDraftResponse, error)
	// 下書き更新
	UpdateDraft(context.Context, *UpdateDraftRequest) (*UpdateDraftResponse, error)
	// 下書き削除
	DeleteDraft(context.Context, *DeleteDraftRequest) (*DeleteDraftResponse, error)
	// 下書き一覧取得
	ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error)
	// 下書きから投稿
	PublishDraft(context.Context, *PublishDraftRequest) (*PublishDraftResponse, error)
	// 自動保存（ストリーミング）
	AutoSaveDraft(grpc.BidiStreamingServer[AutoSaveDraftRequest, AutoSaveDraftResponse]) error
	// 投票機能関連のRPC
	// 投票作成
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error)
	// 投票に投票
	VotePoll(context.Context, *VotePollRequest) (*VotePollResponse, error)
	// 投票結果取得
	GetPollResults(context.Context, *GetPollResultsRequest) (*GetPollResultsResponse, error)
	// 投票を閉じる
	ClosePoll(context.Context, *ClosePollRequest) (*ClosePollResponse, error)
	// リアクション詳細機能
	// リアクションしたユーザー一覧取得
	GetDropReactions(context.Context, *GetDropReactionsRequest) (*GetDropReactionsResponse, error)
	// ブックマーク管理
	// ユーザーのブックマーク一覧取得
	ListUserBookmarks(context.Context, *ListUserBookmarksRequest) (*ListUserBookmarksResponse, error)
	// 編集履歴管理
	// Drop編集履歴取得
	GetDropEditHistory(context.Context, *GetDropEditHistoryRequest) (*GetDropEditHistoryResponse, error)
	// 統計情報
	// Drop統計情報取得
	GetDropStats(context.Context, *GetDropStatsRequest) (*GetDropStatsResponse, error)
	// バッチ操作
	// 複数Drop一括取得
	BatchGetDrops(context.Context, *BatchGetDropsRequest) (*BatchGetDropsResponse, error)
	// 複数Drop一括削除
	BatchDeleteDrops(context.Context, *BatchDeleteDropsRequest) (*BatchDeleteDropsResponse, error)
	// 複数Dropステータス一括更新
	BatchUpdateDropStatus(context.Context, *BatchUpdateDropStatusRequest) (*BatchUpdateDropStatusResponse, error)
	mustEmbedUnimplementedDropServiceServer()
}

// UnimplementedDropServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropServiceServer struct{}

func (UnimplementedDropServiceServer) CreateDrop(context.Context, *CreateDropRequest) (*CreateDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrop not implemented")
}
func (UnimplementedDropServiceServer) GetDrop(context.Context, *GetDropRequest) (*GetDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrop not implemented")
}
func (UnimplementedDropServiceServer) UpdateDrop(context.Context, *UpdateDropRequest) (*UpdateDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrop not implemented")
}
func (UnimplementedDropServiceServer) DeleteDrop(context.Context, *DeleteDropRequest) (*DeleteDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrop not implemented")
}
func (UnimplementedDropServiceServer) ListDrops(context.Context, *ListDropsRequest) (*ListDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrops not implemented")
}
func (UnimplementedDropServiceServer) ListUserDrops(context.Context, *ListUserDropsRequest) (*ListUserDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDrops not implemented")
}
func (UnimplementedDropServiceServer) AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedDropServiceServer) RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedDropServiceServer) AddRedrop(context.Context, *AddRedropRequest) (*AddRedropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedrop not implemented")
}
func (UnimplementedDropServiceServer) RemoveRedrop(context.Context, *RemoveRedropRequest) (*RemoveRedropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRedrop not implemented")
}
func (UnimplementedDropServiceServer) AddBookmark(context.Context, *AddBookmarkRequest) (*AddBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBookmark not implemented")
}
func (UnimplementedDropServiceServer) RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*RemoveBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBookmark not implemented")
}
func (UnimplementedDropServiceServer) ReplyToDrop(context.Context, *ReplyToDropRequest) (*ReplyToDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyToDrop not implemented")
}
func (UnimplementedDropServiceServer) QuoteDrop(context.Context, *QuoteDropRequest) (*QuoteDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteDrop not implemented")
}
func (UnimplementedDropServiceServer) SearchDrops(context.Context, *SearchDropsRequest) (*SearchDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDrops not implemented")
}
func (UnimplementedDropServiceServer) GetDropThread(context.Context, *GetDropThreadRequest) (*GetDropThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropThread not implemented")
}
func (UnimplementedDropServiceServer) CreateDraft(context.Context, *CreateDraftRequest) (*CreateDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraft not implemented")
}
func (UnimplementedDropServiceServer) GetDraft(context.Context, *GetDraftRequest) (*GetDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraft not implemented")
}
func (UnimplementedDropServiceServer) UpdateDraft(context.Context, *UpdateDraftRequest) (*UpdateDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDraft not implemented")
}
func (UnimplementedDropServiceServer) DeleteDraft(context.Context, *DeleteDraftRequest) (*DeleteDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraft not implemented")
}
func (UnimplementedDropServiceServer) ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrafts not implemented")
}
func (UnimplementedDropServiceServer) PublishDraft(context.Context, *PublishDraftRequest) (*PublishDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDraft not implemented")
}
func (UnimplementedDropServiceServer) AutoSaveDraft(grpc.BidiStreamingServer[AutoSaveDraftRequest, AutoSaveDraftResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AutoSaveDraft not implemented")
}
func (UnimplementedDropServiceServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedDropServiceServer) VotePoll(context.Context, *VotePollRequest) (*VotePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoll not implemented")
}
func (UnimplementedDropServiceServer) GetPollResults(context.Context, *GetPollResultsRequest) (*GetPollResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPollResults not implemented")
}
func (UnimplementedDropServiceServer) ClosePoll(context.Context, *ClosePollRequest) (*ClosePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePoll not implemented")
}
func (UnimplementedDropServiceServer) GetDropReactions(context.Context, *GetDropReactionsRequest) (*GetDropReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropReactions not implemented")
}
func (UnimplementedDropServiceServer) ListUserBookmarks(context.Context, *ListUserBookmarksRequest) (*ListUserBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBookmarks not implemented")
}
func (UnimplementedDropServiceServer) GetDropEditHistory(context.Context, *GetDropEditHistoryRequest) (*GetDropEditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropEditHistory not implemented")
}
func (UnimplementedDropServiceServer) GetDropStats(context.Context, *GetDropStatsRequest) (*GetDropStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropStats not implemented")
}
func (UnimplementedDropServiceServer) BatchGetDrops(context.Context, *BatchGetDropsRequest) (*BatchGetDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetDrops not implemented")
}
func (UnimplementedDropServiceServer) BatchDeleteDrops(context.Context, *BatchDeleteDropsRequest) (*BatchDeleteDropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteDrops not implemented")
}
func (UnimplementedDropServiceServer) BatchUpdateDropStatus(context.Context, *BatchUpdateDropStatusRequest) (*BatchUpdateDropStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDropStatus not implemented")
}
func (UnimplementedDropServiceServer) mustEmbedUnimplementedDropServiceServer() {}
func (UnimplementedDropServiceServer) testEmbeddedByValue()                     {}

// UnsafeDropServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropServiceServer will
// result in compilation errors.
type UnsafeDropServiceServer interface {
	mustEmbedUnimplementedDropServiceServer()
}

func RegisterDropServiceServer(s grpc.ServiceRegistrar, srv DropServiceServer) {
	// If the following call pancis, it indicates UnimplementedDropServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DropService_ServiceDesc, srv)
}

func _DropService_CreateDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).CreateDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_CreateDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).CreateDrop(ctx, req.(*CreateDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDrop(ctx, req.(*GetDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_UpdateDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).UpdateDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_UpdateDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).UpdateDrop(ctx, req.(*UpdateDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_DeleteDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).DeleteDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_DeleteDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).DeleteDrop(ctx, req.(*DeleteDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ListDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ListDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ListDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ListDrops(ctx, req.(*ListDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ListUserDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ListUserDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ListUserDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ListUserDrops(ctx, req.(*ListUserDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_AddLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_RemoveLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).RemoveLike(ctx, req.(*RemoveLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_AddRedrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRedropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).AddRedrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_AddRedrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).AddRedrop(ctx, req.(*AddRedropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_RemoveRedrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRedropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).RemoveRedrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_RemoveRedrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).RemoveRedrop(ctx, req.(*RemoveRedropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_AddBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).AddBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_AddBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).AddBookmark(ctx, req.(*AddBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_RemoveBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).RemoveBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_RemoveBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).RemoveBookmark(ctx, req.(*RemoveBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ReplyToDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyToDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ReplyToDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ReplyToDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ReplyToDrop(ctx, req.(*ReplyToDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_QuoteDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).QuoteDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_QuoteDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).QuoteDrop(ctx, req.(*QuoteDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_SearchDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).SearchDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_SearchDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).SearchDrops(ctx, req.(*SearchDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDropThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDropThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDropThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDropThread(ctx, req.(*GetDropThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_CreateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).CreateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_CreateDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).CreateDraft(ctx, req.(*CreateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDraft(ctx, req.(*GetDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_UpdateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).UpdateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_UpdateDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).UpdateDraft(ctx, req.(*UpdateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_DeleteDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).DeleteDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_DeleteDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).DeleteDraft(ctx, req.(*DeleteDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ListDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDraftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ListDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ListDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ListDrafts(ctx, req.(*ListDraftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_PublishDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).PublishDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_PublishDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).PublishDraft(ctx, req.(*PublishDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_AutoSaveDraft_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DropServiceServer).AutoSaveDraft(&grpc.GenericServerStream[AutoSaveDraftRequest, AutoSaveDraftResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DropService_AutoSaveDraftServer = grpc.BidiStreamingServer[AutoSaveDraftRequest, AutoSaveDraftResponse]

func _DropService_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_VotePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).VotePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_VotePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).VotePoll(ctx, req.(*VotePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetPollResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetPollResults(ctx, req.(*GetPollResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ClosePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ClosePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ClosePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ClosePoll(ctx, req.(*ClosePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDropReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDropReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDropReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDropReactions(ctx, req.(*GetDropReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_ListUserBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).ListUserBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_ListUserBookmarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).ListUserBookmarks(ctx, req.(*ListUserBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDropEditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropEditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDropEditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDropEditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDropEditHistory(ctx, req.(*GetDropEditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_GetDropStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).GetDropStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_GetDropStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).GetDropStats(ctx, req.(*GetDropStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_BatchGetDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).BatchGetDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_BatchGetDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).BatchGetDrops(ctx, req.(*BatchGetDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_BatchDeleteDrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).BatchDeleteDrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_BatchDeleteDrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).BatchDeleteDrops(ctx, req.(*BatchDeleteDropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropService_BatchUpdateDropStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDropStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropServiceServer).BatchUpdateDropStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropService_BatchUpdateDropStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropServiceServer).BatchUpdateDropStatus(ctx, req.(*BatchUpdateDropStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropService_ServiceDesc is the grpc.ServiceDesc for DropService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avion.drop.v1.DropService",
	HandlerType: (*DropServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrop",
			Handler:    _DropService_CreateDrop_Handler,
		},
		{
			MethodName: "GetDrop",
			Handler:    _DropService_GetDrop_Handler,
		},
		{
			MethodName: "UpdateDrop",
			Handler:    _DropService_UpdateDrop_Handler,
		},
		{
			MethodName: "DeleteDrop",
			Handler:    _DropService_DeleteDrop_Handler,
		},
		{
			MethodName: "ListDrops",
			Handler:    _DropService_ListDrops_Handler,
		},
		{
			MethodName: "ListUserDrops",
			Handler:    _DropService_ListUserDrops_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _DropService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _DropService_RemoveLike_Handler,
		},
		{
			MethodName: "AddRedrop",
			Handler:    _DropService_AddRedrop_Handler,
		},
		{
			MethodName: "RemoveRedrop",
			Handler:    _DropService_RemoveRedrop_Handler,
		},
		{
			MethodName: "AddBookmark",
			Handler:    _DropService_AddBookmark_Handler,
		},
		{
			MethodName: "RemoveBookmark",
			Handler:    _DropService_RemoveBookmark_Handler,
		},
		{
			MethodName: "ReplyToDrop",
			Handler:    _DropService_ReplyToDrop_Handler,
		},
		{
			MethodName: "QuoteDrop",
			Handler:    _DropService_QuoteDrop_Handler,
		},
		{
			MethodName: "SearchDrops",
			Handler:    _DropService_SearchDrops_Handler,
		},
		{
			MethodName: "GetDropThread",
			Handler:    _DropService_GetDropThread_Handler,
		},
		{
			MethodName: "CreateDraft",
			Handler:    _DropService_CreateDraft_Handler,
		},
		{
			MethodName: "GetDraft",
			Handler:    _DropService_GetDraft_Handler,
		},
		{
			MethodName: "UpdateDraft",
			Handler:    _DropService_UpdateDraft_Handler,
		},
		{
			MethodName: "DeleteDraft",
			Handler:    _DropService_DeleteDraft_Handler,
		},
		{
			MethodName: "ListDrafts",
			Handler:    _DropService_ListDrafts_Handler,
		},
		{
			MethodName: "PublishDraft",
			Handler:    _DropService_PublishDraft_Handler,
		},
		{
			MethodName: "CreatePoll",
			Handler:    _DropService_CreatePoll_Handler,
		},
		{
			MethodName: "VotePoll",
			Handler:    _DropService_VotePoll_Handler,
		},
		{
			MethodName: "GetPollResults",
			Handler:    _DropService_GetPollResults_Handler,
		},
		{
			MethodName: "ClosePoll",
			Handler:    _DropService_ClosePoll_Handler,
		},
		{
			MethodName: "GetDropReactions",
			Handler:    _DropService_GetDropReactions_Handler,
		},
		{
			MethodName: "ListUserBookmarks",
			Handler:    _DropService_ListUserBookmarks_Handler,
		},
		{
			MethodName: "GetDropEditHistory",
			Handler:    _DropService_GetDropEditHistory_Handler,
		},
		{
			MethodName: "GetDropStats",
			Handler:    _DropService_GetDropStats_Handler,
		},
		{
			MethodName: "BatchGetDrops",
			Handler:    _DropService_BatchGetDrops_Handler,
		},
		{
			MethodName: "BatchDeleteDrops",
			Handler:    _DropService_BatchDeleteDrops_Handler,
		},
		{
			MethodName: "BatchUpdateDropStatus",
			Handler:    _DropService_BatchUpdateDropStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoSaveDraft",
			Handler:       _DropService_AutoSaveDraft_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "avion/drop/v1/drop_service.proto",
}
