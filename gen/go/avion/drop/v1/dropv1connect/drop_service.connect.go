// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: avion/drop/v1/drop_service.proto

package dropv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/na2na-p/avion/proto/avion/drop/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DropServiceName is the fully-qualified name of the DropService service.
	DropServiceName = "avion.drop.v1.DropService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DropServiceCreateDropProcedure is the fully-qualified name of the DropService's CreateDrop RPC.
	DropServiceCreateDropProcedure = "/avion.drop.v1.DropService/CreateDrop"
	// DropServiceGetDropProcedure is the fully-qualified name of the DropService's GetDrop RPC.
	DropServiceGetDropProcedure = "/avion.drop.v1.DropService/GetDrop"
	// DropServiceUpdateDropProcedure is the fully-qualified name of the DropService's UpdateDrop RPC.
	DropServiceUpdateDropProcedure = "/avion.drop.v1.DropService/UpdateDrop"
	// DropServiceDeleteDropProcedure is the fully-qualified name of the DropService's DeleteDrop RPC.
	DropServiceDeleteDropProcedure = "/avion.drop.v1.DropService/DeleteDrop"
	// DropServiceListDropsProcedure is the fully-qualified name of the DropService's ListDrops RPC.
	DropServiceListDropsProcedure = "/avion.drop.v1.DropService/ListDrops"
	// DropServiceListUserDropsProcedure is the fully-qualified name of the DropService's ListUserDrops
	// RPC.
	DropServiceListUserDropsProcedure = "/avion.drop.v1.DropService/ListUserDrops"
	// DropServiceAddLikeProcedure is the fully-qualified name of the DropService's AddLike RPC.
	DropServiceAddLikeProcedure = "/avion.drop.v1.DropService/AddLike"
	// DropServiceRemoveLikeProcedure is the fully-qualified name of the DropService's RemoveLike RPC.
	DropServiceRemoveLikeProcedure = "/avion.drop.v1.DropService/RemoveLike"
	// DropServiceAddRedropProcedure is the fully-qualified name of the DropService's AddRedrop RPC.
	DropServiceAddRedropProcedure = "/avion.drop.v1.DropService/AddRedrop"
	// DropServiceRemoveRedropProcedure is the fully-qualified name of the DropService's RemoveRedrop
	// RPC.
	DropServiceRemoveRedropProcedure = "/avion.drop.v1.DropService/RemoveRedrop"
	// DropServiceAddBookmarkProcedure is the fully-qualified name of the DropService's AddBookmark RPC.
	DropServiceAddBookmarkProcedure = "/avion.drop.v1.DropService/AddBookmark"
	// DropServiceRemoveBookmarkProcedure is the fully-qualified name of the DropService's
	// RemoveBookmark RPC.
	DropServiceRemoveBookmarkProcedure = "/avion.drop.v1.DropService/RemoveBookmark"
	// DropServiceReplyToDropProcedure is the fully-qualified name of the DropService's ReplyToDrop RPC.
	DropServiceReplyToDropProcedure = "/avion.drop.v1.DropService/ReplyToDrop"
	// DropServiceQuoteDropProcedure is the fully-qualified name of the DropService's QuoteDrop RPC.
	DropServiceQuoteDropProcedure = "/avion.drop.v1.DropService/QuoteDrop"
	// DropServiceSearchDropsProcedure is the fully-qualified name of the DropService's SearchDrops RPC.
	DropServiceSearchDropsProcedure = "/avion.drop.v1.DropService/SearchDrops"
	// DropServiceGetDropThreadProcedure is the fully-qualified name of the DropService's GetDropThread
	// RPC.
	DropServiceGetDropThreadProcedure = "/avion.drop.v1.DropService/GetDropThread"
	// DropServiceCreateDraftProcedure is the fully-qualified name of the DropService's CreateDraft RPC.
	DropServiceCreateDraftProcedure = "/avion.drop.v1.DropService/CreateDraft"
	// DropServiceGetDraftProcedure is the fully-qualified name of the DropService's GetDraft RPC.
	DropServiceGetDraftProcedure = "/avion.drop.v1.DropService/GetDraft"
	// DropServiceUpdateDraftProcedure is the fully-qualified name of the DropService's UpdateDraft RPC.
	DropServiceUpdateDraftProcedure = "/avion.drop.v1.DropService/UpdateDraft"
	// DropServiceDeleteDraftProcedure is the fully-qualified name of the DropService's DeleteDraft RPC.
	DropServiceDeleteDraftProcedure = "/avion.drop.v1.DropService/DeleteDraft"
	// DropServiceListDraftsProcedure is the fully-qualified name of the DropService's ListDrafts RPC.
	DropServiceListDraftsProcedure = "/avion.drop.v1.DropService/ListDrafts"
	// DropServicePublishDraftProcedure is the fully-qualified name of the DropService's PublishDraft
	// RPC.
	DropServicePublishDraftProcedure = "/avion.drop.v1.DropService/PublishDraft"
	// DropServiceAutoSaveDraftProcedure is the fully-qualified name of the DropService's AutoSaveDraft
	// RPC.
	DropServiceAutoSaveDraftProcedure = "/avion.drop.v1.DropService/AutoSaveDraft"
	// DropServiceCreatePollProcedure is the fully-qualified name of the DropService's CreatePoll RPC.
	DropServiceCreatePollProcedure = "/avion.drop.v1.DropService/CreatePoll"
	// DropServiceVotePollProcedure is the fully-qualified name of the DropService's VotePoll RPC.
	DropServiceVotePollProcedure = "/avion.drop.v1.DropService/VotePoll"
	// DropServiceGetPollResultsProcedure is the fully-qualified name of the DropService's
	// GetPollResults RPC.
	DropServiceGetPollResultsProcedure = "/avion.drop.v1.DropService/GetPollResults"
	// DropServiceClosePollProcedure is the fully-qualified name of the DropService's ClosePoll RPC.
	DropServiceClosePollProcedure = "/avion.drop.v1.DropService/ClosePoll"
	// DropServiceGetDropReactionsProcedure is the fully-qualified name of the DropService's
	// GetDropReactions RPC.
	DropServiceGetDropReactionsProcedure = "/avion.drop.v1.DropService/GetDropReactions"
	// DropServiceListUserBookmarksProcedure is the fully-qualified name of the DropService's
	// ListUserBookmarks RPC.
	DropServiceListUserBookmarksProcedure = "/avion.drop.v1.DropService/ListUserBookmarks"
	// DropServiceGetDropEditHistoryProcedure is the fully-qualified name of the DropService's
	// GetDropEditHistory RPC.
	DropServiceGetDropEditHistoryProcedure = "/avion.drop.v1.DropService/GetDropEditHistory"
	// DropServiceGetDropStatsProcedure is the fully-qualified name of the DropService's GetDropStats
	// RPC.
	DropServiceGetDropStatsProcedure = "/avion.drop.v1.DropService/GetDropStats"
	// DropServiceBatchGetDropsProcedure is the fully-qualified name of the DropService's BatchGetDrops
	// RPC.
	DropServiceBatchGetDropsProcedure = "/avion.drop.v1.DropService/BatchGetDrops"
	// DropServiceBatchDeleteDropsProcedure is the fully-qualified name of the DropService's
	// BatchDeleteDrops RPC.
	DropServiceBatchDeleteDropsProcedure = "/avion.drop.v1.DropService/BatchDeleteDrops"
	// DropServiceBatchUpdateDropStatusProcedure is the fully-qualified name of the DropService's
	// BatchUpdateDropStatus RPC.
	DropServiceBatchUpdateDropStatusProcedure = "/avion.drop.v1.DropService/BatchUpdateDropStatus"
)

// DropServiceClient is a client for the avion.drop.v1.DropService service.
type DropServiceClient interface {
	// Drop作成
	CreateDrop(context.Context, *connect.Request[v1.CreateDropRequest]) (*connect.Response[v1.CreateDropResponse], error)
	// Drop取得
	GetDrop(context.Context, *connect.Request[v1.GetDropRequest]) (*connect.Response[v1.GetDropResponse], error)
	// Drop更新
	UpdateDrop(context.Context, *connect.Request[v1.UpdateDropRequest]) (*connect.Response[v1.UpdateDropResponse], error)
	// Drop削除
	DeleteDrop(context.Context, *connect.Request[v1.DeleteDropRequest]) (*connect.Response[v1.DeleteDropResponse], error)
	// Drop一覧取得
	ListDrops(context.Context, *connect.Request[v1.ListDropsRequest]) (*connect.Response[v1.ListDropsResponse], error)
	// ユーザーのDrop一覧取得
	ListUserDrops(context.Context, *connect.Request[v1.ListUserDropsRequest]) (*connect.Response[v1.ListUserDropsResponse], error)
	// Dropにいいね追加
	AddLike(context.Context, *connect.Request[v1.AddLikeRequest]) (*connect.Response[v1.AddLikeResponse], error)
	// Dropのいいね削除
	RemoveLike(context.Context, *connect.Request[v1.RemoveLikeRequest]) (*connect.Response[v1.RemoveLikeResponse], error)
	// Dropをリドロップ追加
	AddRedrop(context.Context, *connect.Request[v1.AddRedropRequest]) (*connect.Response[v1.AddRedropResponse], error)
	// Dropのリドロップ削除
	RemoveRedrop(context.Context, *connect.Request[v1.RemoveRedropRequest]) (*connect.Response[v1.RemoveRedropResponse], error)
	// Dropをブックマーク追加
	AddBookmark(context.Context, *connect.Request[v1.AddBookmarkRequest]) (*connect.Response[v1.AddBookmarkResponse], error)
	// Dropのブックマーク削除
	RemoveBookmark(context.Context, *connect.Request[v1.RemoveBookmarkRequest]) (*connect.Response[v1.RemoveBookmarkResponse], error)
	// Dropにリプライ
	ReplyToDrop(context.Context, *connect.Request[v1.ReplyToDropRequest]) (*connect.Response[v1.ReplyToDropResponse], error)
	// Dropを引用
	QuoteDrop(context.Context, *connect.Request[v1.QuoteDropRequest]) (*connect.Response[v1.QuoteDropResponse], error)
	// Drop検索
	SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error)
	// Dropスレッド取得（リプライツリー）
	GetDropThread(context.Context, *connect.Request[v1.GetDropThreadRequest]) (*connect.Response[v1.GetDropThreadResponse], error)
	// 下書き関連のRPC
	// 下書き作成
	CreateDraft(context.Context, *connect.Request[v1.CreateDraftRequest]) (*connect.Response[v1.CreateDraftResponse], error)
	// 下書き取得
	GetDraft(context.Context, *connect.Request[v1.GetDraftRequest]) (*connect.Response[v1.GetDraftResponse], error)
	// 下書き更新
	UpdateDraft(context.Context, *connect.Request[v1.UpdateDraftRequest]) (*connect.Response[v1.UpdateDraftResponse], error)
	// 下書き削除
	DeleteDraft(context.Context, *connect.Request[v1.DeleteDraftRequest]) (*connect.Response[v1.DeleteDraftResponse], error)
	// 下書き一覧取得
	ListDrafts(context.Context, *connect.Request[v1.ListDraftsRequest]) (*connect.Response[v1.ListDraftsResponse], error)
	// 下書きから投稿
	PublishDraft(context.Context, *connect.Request[v1.PublishDraftRequest]) (*connect.Response[v1.PublishDraftResponse], error)
	// 自動保存（ストリーミング）
	AutoSaveDraft(context.Context) *connect.BidiStreamForClient[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse]
	// 投票機能関連のRPC
	// 投票作成
	CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error)
	// 投票に投票
	VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error)
	// 投票結果取得
	GetPollResults(context.Context, *connect.Request[v1.GetPollResultsRequest]) (*connect.Response[v1.GetPollResultsResponse], error)
	// 投票を閉じる
	ClosePoll(context.Context, *connect.Request[v1.ClosePollRequest]) (*connect.Response[v1.ClosePollResponse], error)
	// リアクション詳細機能
	// リアクションしたユーザー一覧取得
	GetDropReactions(context.Context, *connect.Request[v1.GetDropReactionsRequest]) (*connect.Response[v1.GetDropReactionsResponse], error)
	// ブックマーク管理
	// ユーザーのブックマーク一覧取得
	ListUserBookmarks(context.Context, *connect.Request[v1.ListUserBookmarksRequest]) (*connect.Response[v1.ListUserBookmarksResponse], error)
	// 編集履歴管理
	// Drop編集履歴取得
	GetDropEditHistory(context.Context, *connect.Request[v1.GetDropEditHistoryRequest]) (*connect.Response[v1.GetDropEditHistoryResponse], error)
	// 統計情報
	// Drop統計情報取得
	GetDropStats(context.Context, *connect.Request[v1.GetDropStatsRequest]) (*connect.Response[v1.GetDropStatsResponse], error)
	// バッチ操作
	// 複数Drop一括取得
	BatchGetDrops(context.Context, *connect.Request[v1.BatchGetDropsRequest]) (*connect.Response[v1.BatchGetDropsResponse], error)
	// 複数Drop一括削除
	BatchDeleteDrops(context.Context, *connect.Request[v1.BatchDeleteDropsRequest]) (*connect.Response[v1.BatchDeleteDropsResponse], error)
	// 複数Dropステータス一括更新
	BatchUpdateDropStatus(context.Context, *connect.Request[v1.BatchUpdateDropStatusRequest]) (*connect.Response[v1.BatchUpdateDropStatusResponse], error)
}

// NewDropServiceClient constructs a client for the avion.drop.v1.DropService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDropServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DropServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dropServiceMethods := v1.File_avion_drop_v1_drop_service_proto.Services().ByName("DropService").Methods()
	return &dropServiceClient{
		createDrop: connect.NewClient[v1.CreateDropRequest, v1.CreateDropResponse](
			httpClient,
			baseURL+DropServiceCreateDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("CreateDrop")),
			connect.WithClientOptions(opts...),
		),
		getDrop: connect.NewClient[v1.GetDropRequest, v1.GetDropResponse](
			httpClient,
			baseURL+DropServiceGetDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDrop")),
			connect.WithClientOptions(opts...),
		),
		updateDrop: connect.NewClient[v1.UpdateDropRequest, v1.UpdateDropResponse](
			httpClient,
			baseURL+DropServiceUpdateDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("UpdateDrop")),
			connect.WithClientOptions(opts...),
		),
		deleteDrop: connect.NewClient[v1.DeleteDropRequest, v1.DeleteDropResponse](
			httpClient,
			baseURL+DropServiceDeleteDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("DeleteDrop")),
			connect.WithClientOptions(opts...),
		),
		listDrops: connect.NewClient[v1.ListDropsRequest, v1.ListDropsResponse](
			httpClient,
			baseURL+DropServiceListDropsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ListDrops")),
			connect.WithClientOptions(opts...),
		),
		listUserDrops: connect.NewClient[v1.ListUserDropsRequest, v1.ListUserDropsResponse](
			httpClient,
			baseURL+DropServiceListUserDropsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ListUserDrops")),
			connect.WithClientOptions(opts...),
		),
		addLike: connect.NewClient[v1.AddLikeRequest, v1.AddLikeResponse](
			httpClient,
			baseURL+DropServiceAddLikeProcedure,
			connect.WithSchema(dropServiceMethods.ByName("AddLike")),
			connect.WithClientOptions(opts...),
		),
		removeLike: connect.NewClient[v1.RemoveLikeRequest, v1.RemoveLikeResponse](
			httpClient,
			baseURL+DropServiceRemoveLikeProcedure,
			connect.WithSchema(dropServiceMethods.ByName("RemoveLike")),
			connect.WithClientOptions(opts...),
		),
		addRedrop: connect.NewClient[v1.AddRedropRequest, v1.AddRedropResponse](
			httpClient,
			baseURL+DropServiceAddRedropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("AddRedrop")),
			connect.WithClientOptions(opts...),
		),
		removeRedrop: connect.NewClient[v1.RemoveRedropRequest, v1.RemoveRedropResponse](
			httpClient,
			baseURL+DropServiceRemoveRedropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("RemoveRedrop")),
			connect.WithClientOptions(opts...),
		),
		addBookmark: connect.NewClient[v1.AddBookmarkRequest, v1.AddBookmarkResponse](
			httpClient,
			baseURL+DropServiceAddBookmarkProcedure,
			connect.WithSchema(dropServiceMethods.ByName("AddBookmark")),
			connect.WithClientOptions(opts...),
		),
		removeBookmark: connect.NewClient[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse](
			httpClient,
			baseURL+DropServiceRemoveBookmarkProcedure,
			connect.WithSchema(dropServiceMethods.ByName("RemoveBookmark")),
			connect.WithClientOptions(opts...),
		),
		replyToDrop: connect.NewClient[v1.ReplyToDropRequest, v1.ReplyToDropResponse](
			httpClient,
			baseURL+DropServiceReplyToDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ReplyToDrop")),
			connect.WithClientOptions(opts...),
		),
		quoteDrop: connect.NewClient[v1.QuoteDropRequest, v1.QuoteDropResponse](
			httpClient,
			baseURL+DropServiceQuoteDropProcedure,
			connect.WithSchema(dropServiceMethods.ByName("QuoteDrop")),
			connect.WithClientOptions(opts...),
		),
		searchDrops: connect.NewClient[v1.SearchDropsRequest, v1.SearchDropsResponse](
			httpClient,
			baseURL+DropServiceSearchDropsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("SearchDrops")),
			connect.WithClientOptions(opts...),
		),
		getDropThread: connect.NewClient[v1.GetDropThreadRequest, v1.GetDropThreadResponse](
			httpClient,
			baseURL+DropServiceGetDropThreadProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDropThread")),
			connect.WithClientOptions(opts...),
		),
		createDraft: connect.NewClient[v1.CreateDraftRequest, v1.CreateDraftResponse](
			httpClient,
			baseURL+DropServiceCreateDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("CreateDraft")),
			connect.WithClientOptions(opts...),
		),
		getDraft: connect.NewClient[v1.GetDraftRequest, v1.GetDraftResponse](
			httpClient,
			baseURL+DropServiceGetDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDraft")),
			connect.WithClientOptions(opts...),
		),
		updateDraft: connect.NewClient[v1.UpdateDraftRequest, v1.UpdateDraftResponse](
			httpClient,
			baseURL+DropServiceUpdateDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("UpdateDraft")),
			connect.WithClientOptions(opts...),
		),
		deleteDraft: connect.NewClient[v1.DeleteDraftRequest, v1.DeleteDraftResponse](
			httpClient,
			baseURL+DropServiceDeleteDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("DeleteDraft")),
			connect.WithClientOptions(opts...),
		),
		listDrafts: connect.NewClient[v1.ListDraftsRequest, v1.ListDraftsResponse](
			httpClient,
			baseURL+DropServiceListDraftsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ListDrafts")),
			connect.WithClientOptions(opts...),
		),
		publishDraft: connect.NewClient[v1.PublishDraftRequest, v1.PublishDraftResponse](
			httpClient,
			baseURL+DropServicePublishDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("PublishDraft")),
			connect.WithClientOptions(opts...),
		),
		autoSaveDraft: connect.NewClient[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse](
			httpClient,
			baseURL+DropServiceAutoSaveDraftProcedure,
			connect.WithSchema(dropServiceMethods.ByName("AutoSaveDraft")),
			connect.WithClientOptions(opts...),
		),
		createPoll: connect.NewClient[v1.CreatePollRequest, v1.CreatePollResponse](
			httpClient,
			baseURL+DropServiceCreatePollProcedure,
			connect.WithSchema(dropServiceMethods.ByName("CreatePoll")),
			connect.WithClientOptions(opts...),
		),
		votePoll: connect.NewClient[v1.VotePollRequest, v1.VotePollResponse](
			httpClient,
			baseURL+DropServiceVotePollProcedure,
			connect.WithSchema(dropServiceMethods.ByName("VotePoll")),
			connect.WithClientOptions(opts...),
		),
		getPollResults: connect.NewClient[v1.GetPollResultsRequest, v1.GetPollResultsResponse](
			httpClient,
			baseURL+DropServiceGetPollResultsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetPollResults")),
			connect.WithClientOptions(opts...),
		),
		closePoll: connect.NewClient[v1.ClosePollRequest, v1.ClosePollResponse](
			httpClient,
			baseURL+DropServiceClosePollProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ClosePoll")),
			connect.WithClientOptions(opts...),
		),
		getDropReactions: connect.NewClient[v1.GetDropReactionsRequest, v1.GetDropReactionsResponse](
			httpClient,
			baseURL+DropServiceGetDropReactionsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDropReactions")),
			connect.WithClientOptions(opts...),
		),
		listUserBookmarks: connect.NewClient[v1.ListUserBookmarksRequest, v1.ListUserBookmarksResponse](
			httpClient,
			baseURL+DropServiceListUserBookmarksProcedure,
			connect.WithSchema(dropServiceMethods.ByName("ListUserBookmarks")),
			connect.WithClientOptions(opts...),
		),
		getDropEditHistory: connect.NewClient[v1.GetDropEditHistoryRequest, v1.GetDropEditHistoryResponse](
			httpClient,
			baseURL+DropServiceGetDropEditHistoryProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDropEditHistory")),
			connect.WithClientOptions(opts...),
		),
		getDropStats: connect.NewClient[v1.GetDropStatsRequest, v1.GetDropStatsResponse](
			httpClient,
			baseURL+DropServiceGetDropStatsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("GetDropStats")),
			connect.WithClientOptions(opts...),
		),
		batchGetDrops: connect.NewClient[v1.BatchGetDropsRequest, v1.BatchGetDropsResponse](
			httpClient,
			baseURL+DropServiceBatchGetDropsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("BatchGetDrops")),
			connect.WithClientOptions(opts...),
		),
		batchDeleteDrops: connect.NewClient[v1.BatchDeleteDropsRequest, v1.BatchDeleteDropsResponse](
			httpClient,
			baseURL+DropServiceBatchDeleteDropsProcedure,
			connect.WithSchema(dropServiceMethods.ByName("BatchDeleteDrops")),
			connect.WithClientOptions(opts...),
		),
		batchUpdateDropStatus: connect.NewClient[v1.BatchUpdateDropStatusRequest, v1.BatchUpdateDropStatusResponse](
			httpClient,
			baseURL+DropServiceBatchUpdateDropStatusProcedure,
			connect.WithSchema(dropServiceMethods.ByName("BatchUpdateDropStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dropServiceClient implements DropServiceClient.
type dropServiceClient struct {
	createDrop            *connect.Client[v1.CreateDropRequest, v1.CreateDropResponse]
	getDrop               *connect.Client[v1.GetDropRequest, v1.GetDropResponse]
	updateDrop            *connect.Client[v1.UpdateDropRequest, v1.UpdateDropResponse]
	deleteDrop            *connect.Client[v1.DeleteDropRequest, v1.DeleteDropResponse]
	listDrops             *connect.Client[v1.ListDropsRequest, v1.ListDropsResponse]
	listUserDrops         *connect.Client[v1.ListUserDropsRequest, v1.ListUserDropsResponse]
	addLike               *connect.Client[v1.AddLikeRequest, v1.AddLikeResponse]
	removeLike            *connect.Client[v1.RemoveLikeRequest, v1.RemoveLikeResponse]
	addRedrop             *connect.Client[v1.AddRedropRequest, v1.AddRedropResponse]
	removeRedrop          *connect.Client[v1.RemoveRedropRequest, v1.RemoveRedropResponse]
	addBookmark           *connect.Client[v1.AddBookmarkRequest, v1.AddBookmarkResponse]
	removeBookmark        *connect.Client[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse]
	replyToDrop           *connect.Client[v1.ReplyToDropRequest, v1.ReplyToDropResponse]
	quoteDrop             *connect.Client[v1.QuoteDropRequest, v1.QuoteDropResponse]
	searchDrops           *connect.Client[v1.SearchDropsRequest, v1.SearchDropsResponse]
	getDropThread         *connect.Client[v1.GetDropThreadRequest, v1.GetDropThreadResponse]
	createDraft           *connect.Client[v1.CreateDraftRequest, v1.CreateDraftResponse]
	getDraft              *connect.Client[v1.GetDraftRequest, v1.GetDraftResponse]
	updateDraft           *connect.Client[v1.UpdateDraftRequest, v1.UpdateDraftResponse]
	deleteDraft           *connect.Client[v1.DeleteDraftRequest, v1.DeleteDraftResponse]
	listDrafts            *connect.Client[v1.ListDraftsRequest, v1.ListDraftsResponse]
	publishDraft          *connect.Client[v1.PublishDraftRequest, v1.PublishDraftResponse]
	autoSaveDraft         *connect.Client[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse]
	createPoll            *connect.Client[v1.CreatePollRequest, v1.CreatePollResponse]
	votePoll              *connect.Client[v1.VotePollRequest, v1.VotePollResponse]
	getPollResults        *connect.Client[v1.GetPollResultsRequest, v1.GetPollResultsResponse]
	closePoll             *connect.Client[v1.ClosePollRequest, v1.ClosePollResponse]
	getDropReactions      *connect.Client[v1.GetDropReactionsRequest, v1.GetDropReactionsResponse]
	listUserBookmarks     *connect.Client[v1.ListUserBookmarksRequest, v1.ListUserBookmarksResponse]
	getDropEditHistory    *connect.Client[v1.GetDropEditHistoryRequest, v1.GetDropEditHistoryResponse]
	getDropStats          *connect.Client[v1.GetDropStatsRequest, v1.GetDropStatsResponse]
	batchGetDrops         *connect.Client[v1.BatchGetDropsRequest, v1.BatchGetDropsResponse]
	batchDeleteDrops      *connect.Client[v1.BatchDeleteDropsRequest, v1.BatchDeleteDropsResponse]
	batchUpdateDropStatus *connect.Client[v1.BatchUpdateDropStatusRequest, v1.BatchUpdateDropStatusResponse]
}

// CreateDrop calls avion.drop.v1.DropService.CreateDrop.
func (c *dropServiceClient) CreateDrop(ctx context.Context, req *connect.Request[v1.CreateDropRequest]) (*connect.Response[v1.CreateDropResponse], error) {
	return c.createDrop.CallUnary(ctx, req)
}

// GetDrop calls avion.drop.v1.DropService.GetDrop.
func (c *dropServiceClient) GetDrop(ctx context.Context, req *connect.Request[v1.GetDropRequest]) (*connect.Response[v1.GetDropResponse], error) {
	return c.getDrop.CallUnary(ctx, req)
}

// UpdateDrop calls avion.drop.v1.DropService.UpdateDrop.
func (c *dropServiceClient) UpdateDrop(ctx context.Context, req *connect.Request[v1.UpdateDropRequest]) (*connect.Response[v1.UpdateDropResponse], error) {
	return c.updateDrop.CallUnary(ctx, req)
}

// DeleteDrop calls avion.drop.v1.DropService.DeleteDrop.
func (c *dropServiceClient) DeleteDrop(ctx context.Context, req *connect.Request[v1.DeleteDropRequest]) (*connect.Response[v1.DeleteDropResponse], error) {
	return c.deleteDrop.CallUnary(ctx, req)
}

// ListDrops calls avion.drop.v1.DropService.ListDrops.
func (c *dropServiceClient) ListDrops(ctx context.Context, req *connect.Request[v1.ListDropsRequest]) (*connect.Response[v1.ListDropsResponse], error) {
	return c.listDrops.CallUnary(ctx, req)
}

// ListUserDrops calls avion.drop.v1.DropService.ListUserDrops.
func (c *dropServiceClient) ListUserDrops(ctx context.Context, req *connect.Request[v1.ListUserDropsRequest]) (*connect.Response[v1.ListUserDropsResponse], error) {
	return c.listUserDrops.CallUnary(ctx, req)
}

// AddLike calls avion.drop.v1.DropService.AddLike.
func (c *dropServiceClient) AddLike(ctx context.Context, req *connect.Request[v1.AddLikeRequest]) (*connect.Response[v1.AddLikeResponse], error) {
	return c.addLike.CallUnary(ctx, req)
}

// RemoveLike calls avion.drop.v1.DropService.RemoveLike.
func (c *dropServiceClient) RemoveLike(ctx context.Context, req *connect.Request[v1.RemoveLikeRequest]) (*connect.Response[v1.RemoveLikeResponse], error) {
	return c.removeLike.CallUnary(ctx, req)
}

// AddRedrop calls avion.drop.v1.DropService.AddRedrop.
func (c *dropServiceClient) AddRedrop(ctx context.Context, req *connect.Request[v1.AddRedropRequest]) (*connect.Response[v1.AddRedropResponse], error) {
	return c.addRedrop.CallUnary(ctx, req)
}

// RemoveRedrop calls avion.drop.v1.DropService.RemoveRedrop.
func (c *dropServiceClient) RemoveRedrop(ctx context.Context, req *connect.Request[v1.RemoveRedropRequest]) (*connect.Response[v1.RemoveRedropResponse], error) {
	return c.removeRedrop.CallUnary(ctx, req)
}

// AddBookmark calls avion.drop.v1.DropService.AddBookmark.
func (c *dropServiceClient) AddBookmark(ctx context.Context, req *connect.Request[v1.AddBookmarkRequest]) (*connect.Response[v1.AddBookmarkResponse], error) {
	return c.addBookmark.CallUnary(ctx, req)
}

// RemoveBookmark calls avion.drop.v1.DropService.RemoveBookmark.
func (c *dropServiceClient) RemoveBookmark(ctx context.Context, req *connect.Request[v1.RemoveBookmarkRequest]) (*connect.Response[v1.RemoveBookmarkResponse], error) {
	return c.removeBookmark.CallUnary(ctx, req)
}

// ReplyToDrop calls avion.drop.v1.DropService.ReplyToDrop.
func (c *dropServiceClient) ReplyToDrop(ctx context.Context, req *connect.Request[v1.ReplyToDropRequest]) (*connect.Response[v1.ReplyToDropResponse], error) {
	return c.replyToDrop.CallUnary(ctx, req)
}

// QuoteDrop calls avion.drop.v1.DropService.QuoteDrop.
func (c *dropServiceClient) QuoteDrop(ctx context.Context, req *connect.Request[v1.QuoteDropRequest]) (*connect.Response[v1.QuoteDropResponse], error) {
	return c.quoteDrop.CallUnary(ctx, req)
}

// SearchDrops calls avion.drop.v1.DropService.SearchDrops.
func (c *dropServiceClient) SearchDrops(ctx context.Context, req *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error) {
	return c.searchDrops.CallUnary(ctx, req)
}

// GetDropThread calls avion.drop.v1.DropService.GetDropThread.
func (c *dropServiceClient) GetDropThread(ctx context.Context, req *connect.Request[v1.GetDropThreadRequest]) (*connect.Response[v1.GetDropThreadResponse], error) {
	return c.getDropThread.CallUnary(ctx, req)
}

// CreateDraft calls avion.drop.v1.DropService.CreateDraft.
func (c *dropServiceClient) CreateDraft(ctx context.Context, req *connect.Request[v1.CreateDraftRequest]) (*connect.Response[v1.CreateDraftResponse], error) {
	return c.createDraft.CallUnary(ctx, req)
}

// GetDraft calls avion.drop.v1.DropService.GetDraft.
func (c *dropServiceClient) GetDraft(ctx context.Context, req *connect.Request[v1.GetDraftRequest]) (*connect.Response[v1.GetDraftResponse], error) {
	return c.getDraft.CallUnary(ctx, req)
}

// UpdateDraft calls avion.drop.v1.DropService.UpdateDraft.
func (c *dropServiceClient) UpdateDraft(ctx context.Context, req *connect.Request[v1.UpdateDraftRequest]) (*connect.Response[v1.UpdateDraftResponse], error) {
	return c.updateDraft.CallUnary(ctx, req)
}

// DeleteDraft calls avion.drop.v1.DropService.DeleteDraft.
func (c *dropServiceClient) DeleteDraft(ctx context.Context, req *connect.Request[v1.DeleteDraftRequest]) (*connect.Response[v1.DeleteDraftResponse], error) {
	return c.deleteDraft.CallUnary(ctx, req)
}

// ListDrafts calls avion.drop.v1.DropService.ListDrafts.
func (c *dropServiceClient) ListDrafts(ctx context.Context, req *connect.Request[v1.ListDraftsRequest]) (*connect.Response[v1.ListDraftsResponse], error) {
	return c.listDrafts.CallUnary(ctx, req)
}

// PublishDraft calls avion.drop.v1.DropService.PublishDraft.
func (c *dropServiceClient) PublishDraft(ctx context.Context, req *connect.Request[v1.PublishDraftRequest]) (*connect.Response[v1.PublishDraftResponse], error) {
	return c.publishDraft.CallUnary(ctx, req)
}

// AutoSaveDraft calls avion.drop.v1.DropService.AutoSaveDraft.
func (c *dropServiceClient) AutoSaveDraft(ctx context.Context) *connect.BidiStreamForClient[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse] {
	return c.autoSaveDraft.CallBidiStream(ctx)
}

// CreatePoll calls avion.drop.v1.DropService.CreatePoll.
func (c *dropServiceClient) CreatePoll(ctx context.Context, req *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error) {
	return c.createPoll.CallUnary(ctx, req)
}

// VotePoll calls avion.drop.v1.DropService.VotePoll.
func (c *dropServiceClient) VotePoll(ctx context.Context, req *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error) {
	return c.votePoll.CallUnary(ctx, req)
}

// GetPollResults calls avion.drop.v1.DropService.GetPollResults.
func (c *dropServiceClient) GetPollResults(ctx context.Context, req *connect.Request[v1.GetPollResultsRequest]) (*connect.Response[v1.GetPollResultsResponse], error) {
	return c.getPollResults.CallUnary(ctx, req)
}

// ClosePoll calls avion.drop.v1.DropService.ClosePoll.
func (c *dropServiceClient) ClosePoll(ctx context.Context, req *connect.Request[v1.ClosePollRequest]) (*connect.Response[v1.ClosePollResponse], error) {
	return c.closePoll.CallUnary(ctx, req)
}

// GetDropReactions calls avion.drop.v1.DropService.GetDropReactions.
func (c *dropServiceClient) GetDropReactions(ctx context.Context, req *connect.Request[v1.GetDropReactionsRequest]) (*connect.Response[v1.GetDropReactionsResponse], error) {
	return c.getDropReactions.CallUnary(ctx, req)
}

// ListUserBookmarks calls avion.drop.v1.DropService.ListUserBookmarks.
func (c *dropServiceClient) ListUserBookmarks(ctx context.Context, req *connect.Request[v1.ListUserBookmarksRequest]) (*connect.Response[v1.ListUserBookmarksResponse], error) {
	return c.listUserBookmarks.CallUnary(ctx, req)
}

// GetDropEditHistory calls avion.drop.v1.DropService.GetDropEditHistory.
func (c *dropServiceClient) GetDropEditHistory(ctx context.Context, req *connect.Request[v1.GetDropEditHistoryRequest]) (*connect.Response[v1.GetDropEditHistoryResponse], error) {
	return c.getDropEditHistory.CallUnary(ctx, req)
}

// GetDropStats calls avion.drop.v1.DropService.GetDropStats.
func (c *dropServiceClient) GetDropStats(ctx context.Context, req *connect.Request[v1.GetDropStatsRequest]) (*connect.Response[v1.GetDropStatsResponse], error) {
	return c.getDropStats.CallUnary(ctx, req)
}

// BatchGetDrops calls avion.drop.v1.DropService.BatchGetDrops.
func (c *dropServiceClient) BatchGetDrops(ctx context.Context, req *connect.Request[v1.BatchGetDropsRequest]) (*connect.Response[v1.BatchGetDropsResponse], error) {
	return c.batchGetDrops.CallUnary(ctx, req)
}

// BatchDeleteDrops calls avion.drop.v1.DropService.BatchDeleteDrops.
func (c *dropServiceClient) BatchDeleteDrops(ctx context.Context, req *connect.Request[v1.BatchDeleteDropsRequest]) (*connect.Response[v1.BatchDeleteDropsResponse], error) {
	return c.batchDeleteDrops.CallUnary(ctx, req)
}

// BatchUpdateDropStatus calls avion.drop.v1.DropService.BatchUpdateDropStatus.
func (c *dropServiceClient) BatchUpdateDropStatus(ctx context.Context, req *connect.Request[v1.BatchUpdateDropStatusRequest]) (*connect.Response[v1.BatchUpdateDropStatusResponse], error) {
	return c.batchUpdateDropStatus.CallUnary(ctx, req)
}

// DropServiceHandler is an implementation of the avion.drop.v1.DropService service.
type DropServiceHandler interface {
	// Drop作成
	CreateDrop(context.Context, *connect.Request[v1.CreateDropRequest]) (*connect.Response[v1.CreateDropResponse], error)
	// Drop取得
	GetDrop(context.Context, *connect.Request[v1.GetDropRequest]) (*connect.Response[v1.GetDropResponse], error)
	// Drop更新
	UpdateDrop(context.Context, *connect.Request[v1.UpdateDropRequest]) (*connect.Response[v1.UpdateDropResponse], error)
	// Drop削除
	DeleteDrop(context.Context, *connect.Request[v1.DeleteDropRequest]) (*connect.Response[v1.DeleteDropResponse], error)
	// Drop一覧取得
	ListDrops(context.Context, *connect.Request[v1.ListDropsRequest]) (*connect.Response[v1.ListDropsResponse], error)
	// ユーザーのDrop一覧取得
	ListUserDrops(context.Context, *connect.Request[v1.ListUserDropsRequest]) (*connect.Response[v1.ListUserDropsResponse], error)
	// Dropにいいね追加
	AddLike(context.Context, *connect.Request[v1.AddLikeRequest]) (*connect.Response[v1.AddLikeResponse], error)
	// Dropのいいね削除
	RemoveLike(context.Context, *connect.Request[v1.RemoveLikeRequest]) (*connect.Response[v1.RemoveLikeResponse], error)
	// Dropをリドロップ追加
	AddRedrop(context.Context, *connect.Request[v1.AddRedropRequest]) (*connect.Response[v1.AddRedropResponse], error)
	// Dropのリドロップ削除
	RemoveRedrop(context.Context, *connect.Request[v1.RemoveRedropRequest]) (*connect.Response[v1.RemoveRedropResponse], error)
	// Dropをブックマーク追加
	AddBookmark(context.Context, *connect.Request[v1.AddBookmarkRequest]) (*connect.Response[v1.AddBookmarkResponse], error)
	// Dropのブックマーク削除
	RemoveBookmark(context.Context, *connect.Request[v1.RemoveBookmarkRequest]) (*connect.Response[v1.RemoveBookmarkResponse], error)
	// Dropにリプライ
	ReplyToDrop(context.Context, *connect.Request[v1.ReplyToDropRequest]) (*connect.Response[v1.ReplyToDropResponse], error)
	// Dropを引用
	QuoteDrop(context.Context, *connect.Request[v1.QuoteDropRequest]) (*connect.Response[v1.QuoteDropResponse], error)
	// Drop検索
	SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error)
	// Dropスレッド取得（リプライツリー）
	GetDropThread(context.Context, *connect.Request[v1.GetDropThreadRequest]) (*connect.Response[v1.GetDropThreadResponse], error)
	// 下書き関連のRPC
	// 下書き作成
	CreateDraft(context.Context, *connect.Request[v1.CreateDraftRequest]) (*connect.Response[v1.CreateDraftResponse], error)
	// 下書き取得
	GetDraft(context.Context, *connect.Request[v1.GetDraftRequest]) (*connect.Response[v1.GetDraftResponse], error)
	// 下書き更新
	UpdateDraft(context.Context, *connect.Request[v1.UpdateDraftRequest]) (*connect.Response[v1.UpdateDraftResponse], error)
	// 下書き削除
	DeleteDraft(context.Context, *connect.Request[v1.DeleteDraftRequest]) (*connect.Response[v1.DeleteDraftResponse], error)
	// 下書き一覧取得
	ListDrafts(context.Context, *connect.Request[v1.ListDraftsRequest]) (*connect.Response[v1.ListDraftsResponse], error)
	// 下書きから投稿
	PublishDraft(context.Context, *connect.Request[v1.PublishDraftRequest]) (*connect.Response[v1.PublishDraftResponse], error)
	// 自動保存（ストリーミング）
	AutoSaveDraft(context.Context, *connect.BidiStream[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse]) error
	// 投票機能関連のRPC
	// 投票作成
	CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error)
	// 投票に投票
	VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error)
	// 投票結果取得
	GetPollResults(context.Context, *connect.Request[v1.GetPollResultsRequest]) (*connect.Response[v1.GetPollResultsResponse], error)
	// 投票を閉じる
	ClosePoll(context.Context, *connect.Request[v1.ClosePollRequest]) (*connect.Response[v1.ClosePollResponse], error)
	// リアクション詳細機能
	// リアクションしたユーザー一覧取得
	GetDropReactions(context.Context, *connect.Request[v1.GetDropReactionsRequest]) (*connect.Response[v1.GetDropReactionsResponse], error)
	// ブックマーク管理
	// ユーザーのブックマーク一覧取得
	ListUserBookmarks(context.Context, *connect.Request[v1.ListUserBookmarksRequest]) (*connect.Response[v1.ListUserBookmarksResponse], error)
	// 編集履歴管理
	// Drop編集履歴取得
	GetDropEditHistory(context.Context, *connect.Request[v1.GetDropEditHistoryRequest]) (*connect.Response[v1.GetDropEditHistoryResponse], error)
	// 統計情報
	// Drop統計情報取得
	GetDropStats(context.Context, *connect.Request[v1.GetDropStatsRequest]) (*connect.Response[v1.GetDropStatsResponse], error)
	// バッチ操作
	// 複数Drop一括取得
	BatchGetDrops(context.Context, *connect.Request[v1.BatchGetDropsRequest]) (*connect.Response[v1.BatchGetDropsResponse], error)
	// 複数Drop一括削除
	BatchDeleteDrops(context.Context, *connect.Request[v1.BatchDeleteDropsRequest]) (*connect.Response[v1.BatchDeleteDropsResponse], error)
	// 複数Dropステータス一括更新
	BatchUpdateDropStatus(context.Context, *connect.Request[v1.BatchUpdateDropStatusRequest]) (*connect.Response[v1.BatchUpdateDropStatusResponse], error)
}

// NewDropServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDropServiceHandler(svc DropServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dropServiceMethods := v1.File_avion_drop_v1_drop_service_proto.Services().ByName("DropService").Methods()
	dropServiceCreateDropHandler := connect.NewUnaryHandler(
		DropServiceCreateDropProcedure,
		svc.CreateDrop,
		connect.WithSchema(dropServiceMethods.ByName("CreateDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDropHandler := connect.NewUnaryHandler(
		DropServiceGetDropProcedure,
		svc.GetDrop,
		connect.WithSchema(dropServiceMethods.ByName("GetDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceUpdateDropHandler := connect.NewUnaryHandler(
		DropServiceUpdateDropProcedure,
		svc.UpdateDrop,
		connect.WithSchema(dropServiceMethods.ByName("UpdateDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceDeleteDropHandler := connect.NewUnaryHandler(
		DropServiceDeleteDropProcedure,
		svc.DeleteDrop,
		connect.WithSchema(dropServiceMethods.ByName("DeleteDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceListDropsHandler := connect.NewUnaryHandler(
		DropServiceListDropsProcedure,
		svc.ListDrops,
		connect.WithSchema(dropServiceMethods.ByName("ListDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceListUserDropsHandler := connect.NewUnaryHandler(
		DropServiceListUserDropsProcedure,
		svc.ListUserDrops,
		connect.WithSchema(dropServiceMethods.ByName("ListUserDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceAddLikeHandler := connect.NewUnaryHandler(
		DropServiceAddLikeProcedure,
		svc.AddLike,
		connect.WithSchema(dropServiceMethods.ByName("AddLike")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceRemoveLikeHandler := connect.NewUnaryHandler(
		DropServiceRemoveLikeProcedure,
		svc.RemoveLike,
		connect.WithSchema(dropServiceMethods.ByName("RemoveLike")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceAddRedropHandler := connect.NewUnaryHandler(
		DropServiceAddRedropProcedure,
		svc.AddRedrop,
		connect.WithSchema(dropServiceMethods.ByName("AddRedrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceRemoveRedropHandler := connect.NewUnaryHandler(
		DropServiceRemoveRedropProcedure,
		svc.RemoveRedrop,
		connect.WithSchema(dropServiceMethods.ByName("RemoveRedrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceAddBookmarkHandler := connect.NewUnaryHandler(
		DropServiceAddBookmarkProcedure,
		svc.AddBookmark,
		connect.WithSchema(dropServiceMethods.ByName("AddBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceRemoveBookmarkHandler := connect.NewUnaryHandler(
		DropServiceRemoveBookmarkProcedure,
		svc.RemoveBookmark,
		connect.WithSchema(dropServiceMethods.ByName("RemoveBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceReplyToDropHandler := connect.NewUnaryHandler(
		DropServiceReplyToDropProcedure,
		svc.ReplyToDrop,
		connect.WithSchema(dropServiceMethods.ByName("ReplyToDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceQuoteDropHandler := connect.NewUnaryHandler(
		DropServiceQuoteDropProcedure,
		svc.QuoteDrop,
		connect.WithSchema(dropServiceMethods.ByName("QuoteDrop")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceSearchDropsHandler := connect.NewUnaryHandler(
		DropServiceSearchDropsProcedure,
		svc.SearchDrops,
		connect.WithSchema(dropServiceMethods.ByName("SearchDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDropThreadHandler := connect.NewUnaryHandler(
		DropServiceGetDropThreadProcedure,
		svc.GetDropThread,
		connect.WithSchema(dropServiceMethods.ByName("GetDropThread")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceCreateDraftHandler := connect.NewUnaryHandler(
		DropServiceCreateDraftProcedure,
		svc.CreateDraft,
		connect.WithSchema(dropServiceMethods.ByName("CreateDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDraftHandler := connect.NewUnaryHandler(
		DropServiceGetDraftProcedure,
		svc.GetDraft,
		connect.WithSchema(dropServiceMethods.ByName("GetDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceUpdateDraftHandler := connect.NewUnaryHandler(
		DropServiceUpdateDraftProcedure,
		svc.UpdateDraft,
		connect.WithSchema(dropServiceMethods.ByName("UpdateDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceDeleteDraftHandler := connect.NewUnaryHandler(
		DropServiceDeleteDraftProcedure,
		svc.DeleteDraft,
		connect.WithSchema(dropServiceMethods.ByName("DeleteDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceListDraftsHandler := connect.NewUnaryHandler(
		DropServiceListDraftsProcedure,
		svc.ListDrafts,
		connect.WithSchema(dropServiceMethods.ByName("ListDrafts")),
		connect.WithHandlerOptions(opts...),
	)
	dropServicePublishDraftHandler := connect.NewUnaryHandler(
		DropServicePublishDraftProcedure,
		svc.PublishDraft,
		connect.WithSchema(dropServiceMethods.ByName("PublishDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceAutoSaveDraftHandler := connect.NewBidiStreamHandler(
		DropServiceAutoSaveDraftProcedure,
		svc.AutoSaveDraft,
		connect.WithSchema(dropServiceMethods.ByName("AutoSaveDraft")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceCreatePollHandler := connect.NewUnaryHandler(
		DropServiceCreatePollProcedure,
		svc.CreatePoll,
		connect.WithSchema(dropServiceMethods.ByName("CreatePoll")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceVotePollHandler := connect.NewUnaryHandler(
		DropServiceVotePollProcedure,
		svc.VotePoll,
		connect.WithSchema(dropServiceMethods.ByName("VotePoll")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetPollResultsHandler := connect.NewUnaryHandler(
		DropServiceGetPollResultsProcedure,
		svc.GetPollResults,
		connect.WithSchema(dropServiceMethods.ByName("GetPollResults")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceClosePollHandler := connect.NewUnaryHandler(
		DropServiceClosePollProcedure,
		svc.ClosePoll,
		connect.WithSchema(dropServiceMethods.ByName("ClosePoll")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDropReactionsHandler := connect.NewUnaryHandler(
		DropServiceGetDropReactionsProcedure,
		svc.GetDropReactions,
		connect.WithSchema(dropServiceMethods.ByName("GetDropReactions")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceListUserBookmarksHandler := connect.NewUnaryHandler(
		DropServiceListUserBookmarksProcedure,
		svc.ListUserBookmarks,
		connect.WithSchema(dropServiceMethods.ByName("ListUserBookmarks")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDropEditHistoryHandler := connect.NewUnaryHandler(
		DropServiceGetDropEditHistoryProcedure,
		svc.GetDropEditHistory,
		connect.WithSchema(dropServiceMethods.ByName("GetDropEditHistory")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceGetDropStatsHandler := connect.NewUnaryHandler(
		DropServiceGetDropStatsProcedure,
		svc.GetDropStats,
		connect.WithSchema(dropServiceMethods.ByName("GetDropStats")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceBatchGetDropsHandler := connect.NewUnaryHandler(
		DropServiceBatchGetDropsProcedure,
		svc.BatchGetDrops,
		connect.WithSchema(dropServiceMethods.ByName("BatchGetDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceBatchDeleteDropsHandler := connect.NewUnaryHandler(
		DropServiceBatchDeleteDropsProcedure,
		svc.BatchDeleteDrops,
		connect.WithSchema(dropServiceMethods.ByName("BatchDeleteDrops")),
		connect.WithHandlerOptions(opts...),
	)
	dropServiceBatchUpdateDropStatusHandler := connect.NewUnaryHandler(
		DropServiceBatchUpdateDropStatusProcedure,
		svc.BatchUpdateDropStatus,
		connect.WithSchema(dropServiceMethods.ByName("BatchUpdateDropStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/avion.drop.v1.DropService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DropServiceCreateDropProcedure:
			dropServiceCreateDropHandler.ServeHTTP(w, r)
		case DropServiceGetDropProcedure:
			dropServiceGetDropHandler.ServeHTTP(w, r)
		case DropServiceUpdateDropProcedure:
			dropServiceUpdateDropHandler.ServeHTTP(w, r)
		case DropServiceDeleteDropProcedure:
			dropServiceDeleteDropHandler.ServeHTTP(w, r)
		case DropServiceListDropsProcedure:
			dropServiceListDropsHandler.ServeHTTP(w, r)
		case DropServiceListUserDropsProcedure:
			dropServiceListUserDropsHandler.ServeHTTP(w, r)
		case DropServiceAddLikeProcedure:
			dropServiceAddLikeHandler.ServeHTTP(w, r)
		case DropServiceRemoveLikeProcedure:
			dropServiceRemoveLikeHandler.ServeHTTP(w, r)
		case DropServiceAddRedropProcedure:
			dropServiceAddRedropHandler.ServeHTTP(w, r)
		case DropServiceRemoveRedropProcedure:
			dropServiceRemoveRedropHandler.ServeHTTP(w, r)
		case DropServiceAddBookmarkProcedure:
			dropServiceAddBookmarkHandler.ServeHTTP(w, r)
		case DropServiceRemoveBookmarkProcedure:
			dropServiceRemoveBookmarkHandler.ServeHTTP(w, r)
		case DropServiceReplyToDropProcedure:
			dropServiceReplyToDropHandler.ServeHTTP(w, r)
		case DropServiceQuoteDropProcedure:
			dropServiceQuoteDropHandler.ServeHTTP(w, r)
		case DropServiceSearchDropsProcedure:
			dropServiceSearchDropsHandler.ServeHTTP(w, r)
		case DropServiceGetDropThreadProcedure:
			dropServiceGetDropThreadHandler.ServeHTTP(w, r)
		case DropServiceCreateDraftProcedure:
			dropServiceCreateDraftHandler.ServeHTTP(w, r)
		case DropServiceGetDraftProcedure:
			dropServiceGetDraftHandler.ServeHTTP(w, r)
		case DropServiceUpdateDraftProcedure:
			dropServiceUpdateDraftHandler.ServeHTTP(w, r)
		case DropServiceDeleteDraftProcedure:
			dropServiceDeleteDraftHandler.ServeHTTP(w, r)
		case DropServiceListDraftsProcedure:
			dropServiceListDraftsHandler.ServeHTTP(w, r)
		case DropServicePublishDraftProcedure:
			dropServicePublishDraftHandler.ServeHTTP(w, r)
		case DropServiceAutoSaveDraftProcedure:
			dropServiceAutoSaveDraftHandler.ServeHTTP(w, r)
		case DropServiceCreatePollProcedure:
			dropServiceCreatePollHandler.ServeHTTP(w, r)
		case DropServiceVotePollProcedure:
			dropServiceVotePollHandler.ServeHTTP(w, r)
		case DropServiceGetPollResultsProcedure:
			dropServiceGetPollResultsHandler.ServeHTTP(w, r)
		case DropServiceClosePollProcedure:
			dropServiceClosePollHandler.ServeHTTP(w, r)
		case DropServiceGetDropReactionsProcedure:
			dropServiceGetDropReactionsHandler.ServeHTTP(w, r)
		case DropServiceListUserBookmarksProcedure:
			dropServiceListUserBookmarksHandler.ServeHTTP(w, r)
		case DropServiceGetDropEditHistoryProcedure:
			dropServiceGetDropEditHistoryHandler.ServeHTTP(w, r)
		case DropServiceGetDropStatsProcedure:
			dropServiceGetDropStatsHandler.ServeHTTP(w, r)
		case DropServiceBatchGetDropsProcedure:
			dropServiceBatchGetDropsHandler.ServeHTTP(w, r)
		case DropServiceBatchDeleteDropsProcedure:
			dropServiceBatchDeleteDropsHandler.ServeHTTP(w, r)
		case DropServiceBatchUpdateDropStatusProcedure:
			dropServiceBatchUpdateDropStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDropServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDropServiceHandler struct{}

func (UnimplementedDropServiceHandler) CreateDrop(context.Context, *connect.Request[v1.CreateDropRequest]) (*connect.Response[v1.CreateDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.CreateDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDrop(context.Context, *connect.Request[v1.GetDropRequest]) (*connect.Response[v1.GetDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) UpdateDrop(context.Context, *connect.Request[v1.UpdateDropRequest]) (*connect.Response[v1.UpdateDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.UpdateDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) DeleteDrop(context.Context, *connect.Request[v1.DeleteDropRequest]) (*connect.Response[v1.DeleteDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.DeleteDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) ListDrops(context.Context, *connect.Request[v1.ListDropsRequest]) (*connect.Response[v1.ListDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ListDrops is not implemented"))
}

func (UnimplementedDropServiceHandler) ListUserDrops(context.Context, *connect.Request[v1.ListUserDropsRequest]) (*connect.Response[v1.ListUserDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ListUserDrops is not implemented"))
}

func (UnimplementedDropServiceHandler) AddLike(context.Context, *connect.Request[v1.AddLikeRequest]) (*connect.Response[v1.AddLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.AddLike is not implemented"))
}

func (UnimplementedDropServiceHandler) RemoveLike(context.Context, *connect.Request[v1.RemoveLikeRequest]) (*connect.Response[v1.RemoveLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.RemoveLike is not implemented"))
}

func (UnimplementedDropServiceHandler) AddRedrop(context.Context, *connect.Request[v1.AddRedropRequest]) (*connect.Response[v1.AddRedropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.AddRedrop is not implemented"))
}

func (UnimplementedDropServiceHandler) RemoveRedrop(context.Context, *connect.Request[v1.RemoveRedropRequest]) (*connect.Response[v1.RemoveRedropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.RemoveRedrop is not implemented"))
}

func (UnimplementedDropServiceHandler) AddBookmark(context.Context, *connect.Request[v1.AddBookmarkRequest]) (*connect.Response[v1.AddBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.AddBookmark is not implemented"))
}

func (UnimplementedDropServiceHandler) RemoveBookmark(context.Context, *connect.Request[v1.RemoveBookmarkRequest]) (*connect.Response[v1.RemoveBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.RemoveBookmark is not implemented"))
}

func (UnimplementedDropServiceHandler) ReplyToDrop(context.Context, *connect.Request[v1.ReplyToDropRequest]) (*connect.Response[v1.ReplyToDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ReplyToDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) QuoteDrop(context.Context, *connect.Request[v1.QuoteDropRequest]) (*connect.Response[v1.QuoteDropResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.QuoteDrop is not implemented"))
}

func (UnimplementedDropServiceHandler) SearchDrops(context.Context, *connect.Request[v1.SearchDropsRequest]) (*connect.Response[v1.SearchDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.SearchDrops is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDropThread(context.Context, *connect.Request[v1.GetDropThreadRequest]) (*connect.Response[v1.GetDropThreadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDropThread is not implemented"))
}

func (UnimplementedDropServiceHandler) CreateDraft(context.Context, *connect.Request[v1.CreateDraftRequest]) (*connect.Response[v1.CreateDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.CreateDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDraft(context.Context, *connect.Request[v1.GetDraftRequest]) (*connect.Response[v1.GetDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) UpdateDraft(context.Context, *connect.Request[v1.UpdateDraftRequest]) (*connect.Response[v1.UpdateDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.UpdateDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) DeleteDraft(context.Context, *connect.Request[v1.DeleteDraftRequest]) (*connect.Response[v1.DeleteDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.DeleteDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) ListDrafts(context.Context, *connect.Request[v1.ListDraftsRequest]) (*connect.Response[v1.ListDraftsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ListDrafts is not implemented"))
}

func (UnimplementedDropServiceHandler) PublishDraft(context.Context, *connect.Request[v1.PublishDraftRequest]) (*connect.Response[v1.PublishDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.PublishDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) AutoSaveDraft(context.Context, *connect.BidiStream[v1.AutoSaveDraftRequest, v1.AutoSaveDraftResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.AutoSaveDraft is not implemented"))
}

func (UnimplementedDropServiceHandler) CreatePoll(context.Context, *connect.Request[v1.CreatePollRequest]) (*connect.Response[v1.CreatePollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.CreatePoll is not implemented"))
}

func (UnimplementedDropServiceHandler) VotePoll(context.Context, *connect.Request[v1.VotePollRequest]) (*connect.Response[v1.VotePollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.VotePoll is not implemented"))
}

func (UnimplementedDropServiceHandler) GetPollResults(context.Context, *connect.Request[v1.GetPollResultsRequest]) (*connect.Response[v1.GetPollResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetPollResults is not implemented"))
}

func (UnimplementedDropServiceHandler) ClosePoll(context.Context, *connect.Request[v1.ClosePollRequest]) (*connect.Response[v1.ClosePollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ClosePoll is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDropReactions(context.Context, *connect.Request[v1.GetDropReactionsRequest]) (*connect.Response[v1.GetDropReactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDropReactions is not implemented"))
}

func (UnimplementedDropServiceHandler) ListUserBookmarks(context.Context, *connect.Request[v1.ListUserBookmarksRequest]) (*connect.Response[v1.ListUserBookmarksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.ListUserBookmarks is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDropEditHistory(context.Context, *connect.Request[v1.GetDropEditHistoryRequest]) (*connect.Response[v1.GetDropEditHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDropEditHistory is not implemented"))
}

func (UnimplementedDropServiceHandler) GetDropStats(context.Context, *connect.Request[v1.GetDropStatsRequest]) (*connect.Response[v1.GetDropStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.GetDropStats is not implemented"))
}

func (UnimplementedDropServiceHandler) BatchGetDrops(context.Context, *connect.Request[v1.BatchGetDropsRequest]) (*connect.Response[v1.BatchGetDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.BatchGetDrops is not implemented"))
}

func (UnimplementedDropServiceHandler) BatchDeleteDrops(context.Context, *connect.Request[v1.BatchDeleteDropsRequest]) (*connect.Response[v1.BatchDeleteDropsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.BatchDeleteDrops is not implemented"))
}

func (UnimplementedDropServiceHandler) BatchUpdateDropStatus(context.Context, *connect.Request[v1.BatchUpdateDropStatusRequest]) (*connect.Response[v1.BatchUpdateDropStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("avion.drop.v1.DropService.BatchUpdateDropStatus is not implemented"))
}
