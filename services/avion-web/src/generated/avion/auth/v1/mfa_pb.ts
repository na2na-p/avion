// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file avion/auth/v1/mfa.proto (package avion.auth.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { ErrorDetail } from "../../common/v1/error_pb";
import { file_avion_common_v1_error } from "../../common/v1/error_pb";
import type { PaginationRequest, PaginationResponse } from "../../common/v1/pagination_pb";
import { file_avion_common_v1_pagination } from "../../common/v1/pagination_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file avion/auth/v1/mfa.proto.
 */
export const file_avion_auth_v1_mfa: GenFile = /*@__PURE__*/
  fileDesc("Chdhdmlvbi9hdXRoL3YxL21mYS5wcm90bxINYXZpb24uYXV0aC52MSLTAgoJTWZhRGV2aWNlEgoKAmlkGAEgASgJEg8KB3VzZXJfaWQYAiABKAkSJAoEdHlwZRgDIAEoDjIWLmF2aW9uLmF1dGgudjEuTWZhVHlwZRIMCgRuYW1lGAQgASgJEigKBnN0YXR1cxgFIAEoDjIYLmF2aW9uLmF1dGgudjEuTWZhU3RhdHVzEi4KCmNyZWF0ZWRfYXQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjAKDGxhc3RfdXNlZF9hdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOAoIbWV0YWRhdGEYCCADKAsyJi5hdmlvbi5hdXRoLnYxLk1mYURldmljZS5NZXRhZGF0YUVudHJ5Gi8KDU1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKJAQoJVG90cFNldHVwEg4KBnNlY3JldBgBIAEoCRITCgtxcl9jb2RlX3VyaRgCIAEoCRIUCgxhY2NvdW50X25hbWUYAyABKAkSDgoGaXNzdWVyGAQgASgJEhEKCWFsZ29yaXRobRgFIAEoCRIOCgZkaWdpdHMYBiABKAUSDgoGcGVyaW9kGAcgASgFIpEBCgpCYWNrdXBDb2RlEgoKAmlkGAEgASgJEgwKBGNvZGUYAiABKAkSDAoEdXNlZBgDIAEoCBIrCgd1c2VkX2F0GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgpjcmVhdGVkX2F0GAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJiChBFbmFibGVNZmFSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSKAoIbWZhX3R5cGUYAiABKA4yFi5hdmlvbi5hdXRoLnYxLk1mYVR5cGUSEwoLZGV2aWNlX25hbWUYAyABKAkinAEKEUVuYWJsZU1mYVJlc3BvbnNlEigKBmRldmljZRgBIAEoCzIYLmF2aW9uLmF1dGgudjEuTWZhRGV2aWNlEiwKCnRvdHBfc2V0dXAYAiABKAsyGC5hdmlvbi5hdXRoLnYxLlRvdHBTZXR1cBIvCgxiYWNrdXBfY29kZXMYAyADKAsyGS5hdmlvbi5hdXRoLnYxLkJhY2t1cENvZGUiXgoRRGlzYWJsZU1mYVJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkSEwoLZGlzYWJsZV9hbGwYAyABKAgSEAoIcGFzc3dvcmQYBCABKAkiPQoSRGlzYWJsZU1mYVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSFgoOZGlzYWJsZWRfY291bnQYAiABKAUiOAoQU2V0dXBUb3RwUmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEhMKC2RldmljZV9uYW1lGAIgASgJIlMKEVNldHVwVG90cFJlc3BvbnNlEhAKCHNldHVwX2lkGAEgASgJEiwKCnRvdHBfc2V0dXAYAiABKAsyGC5hdmlvbi5hdXRoLnYxLlRvdHBTZXR1cCJXChFWZXJpZnlUb3RwUmVxdWVzdBIQCghzZXR1cF9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJEhEKCWRldmljZV9pZBgDIAEoCRIMCgRjb2RlGAQgASgJIn4KElZlcmlmeVRvdHBSZXNwb25zZRINCgV2YWxpZBgBIAEoCBIoCgZkZXZpY2UYAiABKAsyGC5hdmlvbi5hdXRoLnYxLk1mYURldmljZRIvCgxiYWNrdXBfY29kZXMYAyADKAsyGS5hdmlvbi5hdXRoLnYxLkJhY2t1cENvZGUiWQoaR2VuZXJhdGVCYWNrdXBDb2Rlc1JlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRINCgVjb3VudBgCIAEoBRIbChNpbnZhbGlkYXRlX2V4aXN0aW5nGAMgASgIIk4KG0dlbmVyYXRlQmFja3VwQ29kZXNSZXNwb25zZRIvCgxiYWNrdXBfY29kZXMYASADKAsyGS5hdmlvbi5hdXRoLnYxLkJhY2t1cENvZGUiTgoXVmVyaWZ5QmFja3VwQ29kZVJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIMCgRjb2RlGAIgASgJEhQKDG1hcmtfYXNfdXNlZBgDIAEoCCJCChhWZXJpZnlCYWNrdXBDb2RlUmVzcG9uc2USDQoFdmFsaWQYASABKAgSFwoPcmVtYWluaW5nX2NvZGVzGAIgASgFIp8BChVMaXN0TWZhRGV2aWNlc1JlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRI2CgpwYWdpbmF0aW9uGAIgASgLMiIuYXZpb24uY29tbW9uLnYxLlBhZ2luYXRpb25SZXF1ZXN0EigKCG1mYV90eXBlGAMgASgOMhYuYXZpb24uYXV0aC52MS5NZmFUeXBlEhMKC2FjdGl2ZV9vbmx5GAQgASgIIpEBChZMaXN0TWZhRGV2aWNlc1Jlc3BvbnNlEikKB2RldmljZXMYASADKAsyGC5hdmlvbi5hdXRoLnYxLk1mYURldmljZRI3CgpwYWdpbmF0aW9uGAIgASgLMiMuYXZpb24uY29tbW9uLnYxLlBhZ2luYXRpb25SZXNwb25zZRITCgttZmFfZW5hYmxlZBgDIAEoCCI5ChNHZXRNZmFEZXZpY2VSZXF1ZXN0EhEKCWRldmljZV9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJIkAKFEdldE1mYURldmljZVJlc3BvbnNlEigKBmRldmljZRgBIAEoCzIYLmF2aW9uLmF1dGgudjEuTWZhRGV2aWNlIsIBChZVcGRhdGVNZmFEZXZpY2VSZXF1ZXN0EhEKCWRldmljZV9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJEgwKBG5hbWUYAyABKAkSRQoIbWV0YWRhdGEYBCADKAsyMy5hdmlvbi5hdXRoLnYxLlVwZGF0ZU1mYURldmljZVJlcXVlc3QuTWV0YWRhdGFFbnRyeRovCg1NZXRhZGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiQwoXVXBkYXRlTWZhRGV2aWNlUmVzcG9uc2USKAoGZGV2aWNlGAEgASgLMhguYXZpb24uYXV0aC52MS5NZmFEZXZpY2UiagoTTWZhQ2hhbGxlbmdlUmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEhIKCnNlc3Npb25faWQYAiABKAkSLgoOcHJlZmVycmVkX3R5cGUYAyABKA4yFi5hdmlvbi5hdXRoLnYxLk1mYVR5cGUi+gEKFE1mYUNoYWxsZW5nZVJlc3BvbnNlEhQKDGNoYWxsZW5nZV9pZBgBIAEoCRIvCg9hdmFpbGFibGVfdHlwZXMYAiADKA4yFi5hdmlvbi5hdXRoLnYxLk1mYVR5cGUSLgoKZXhwaXJlc19hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASPQoFaGludHMYBCADKAsyLi5hdmlvbi5hdXRoLnYxLk1mYUNoYWxsZW5nZVJlc3BvbnNlLkhpbnRzRW50cnkaLAoKSGludHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBInwKGVZlcmlmeU1mYUNoYWxsZW5nZVJlcXVlc3QSFAoMY2hhbGxlbmdlX2lkGAEgASgJEigKCG1mYV90eXBlGAIgASgOMhYuYXZpb24uYXV0aC52MS5NZmFUeXBlEgwKBGNvZGUYAyABKAkSEQoJZGV2aWNlX2lkGAQgASgJIosBChpWZXJpZnlNZmFDaGFsbGVuZ2VSZXNwb25zZRINCgV2YWxpZBgBIAEoCBIVCg1zZXNzaW9uX3Rva2VuGAIgASgJEisKBWVycm9yGAMgASgLMhwuYXZpb24uY29tbW9uLnYxLkVycm9yRGV0YWlsEhoKEnJlbWFpbmluZ19hdHRlbXB0cxgEIAEoBSqMAQoHTWZhVHlwZRIYChRNRkFfVFlQRV9VTlNQRUNJRklFRBAAEhEKDU1GQV9UWVBFX1RPVFAQARIQCgxNRkFfVFlQRV9TTVMQAhISCg5NRkFfVFlQRV9FTUFJTBADEhgKFE1GQV9UWVBFX0JBQ0tVUF9DT0RFEAQSFAoQTUZBX1RZUEVfUEFTU0tFWRAFKnAKCU1mYVN0YXR1cxIaChZNRkFfU1RBVFVTX1VOU1BFQ0lGSUVEEAASFwoTTUZBX1NUQVRVU19ESVNBQkxFRBABEhYKEk1GQV9TVEFUVVNfUEVORElORxACEhYKEk1GQV9TVEFUVVNfRU5BQkxFRBADQqgBChFjb20uYXZpb24uYXV0aC52MUIITWZhUHJvdG9QAVozZ2l0aHViLmNvbS9uYTJuYS1wL2F2aW9uL3Byb3RvL2F2aW9uL2F1dGgvdjE7YXV0aHYxogIDQUFYqgINQXZpb24uQXV0aC5WMcoCDUF2aW9uXEF1dGhcVjHiAhlBdmlvblxBdXRoXFYxXEdQQk1ldGFkYXRh6gIPQXZpb246OkF1dGg6OlYxYgZwcm90bzM", [file_google_protobuf_timestamp, file_avion_common_v1_error, file_avion_common_v1_pagination]);

/**
 * MFAデバイス情報
 *
 * @generated from message avion.auth.v1.MfaDevice
 */
export type MfaDevice = Message<"avion.auth.v1.MfaDevice"> & {
  /**
   * デバイスID
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * MFAタイプ
   *
   * @generated from field: avion.auth.v1.MfaType type = 3;
   */
  type: MfaType;

  /**
   * デバイス名（ユーザーが設定）
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * 状態
   *
   * @generated from field: avion.auth.v1.MfaStatus status = 5;
   */
  status: MfaStatus;

  /**
   * 作成日時
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * 最終使用日時
   *
   * @generated from field: google.protobuf.Timestamp last_used_at = 7;
   */
  lastUsedAt?: Timestamp;

  /**
   * デバイス固有のメタデータ
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message avion.auth.v1.MfaDevice.
 * Use `create(MfaDeviceSchema)` to create a new message.
 */
export const MfaDeviceSchema: GenMessage<MfaDevice> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 0);

/**
 * TOTPセットアップ情報
 *
 * @generated from message avion.auth.v1.TotpSetup
 */
export type TotpSetup = Message<"avion.auth.v1.TotpSetup"> & {
  /**
   * シークレットキー（Base32エンコード）
   *
   * @generated from field: string secret = 1;
   */
  secret: string;

  /**
   * QRコード用URI
   *
   * @generated from field: string qr_code_uri = 2;
   */
  qrCodeUri: string;

  /**
   * 手動入力用のアカウント名
   *
   * @generated from field: string account_name = 3;
   */
  accountName: string;

  /**
   * 発行者名
   *
   * @generated from field: string issuer = 4;
   */
  issuer: string;

  /**
   * アルゴリズム（SHA1, SHA256, SHA512）
   *
   * @generated from field: string algorithm = 5;
   */
  algorithm: string;

  /**
   * 桁数（通常6桁）
   *
   * @generated from field: int32 digits = 6;
   */
  digits: number;

  /**
   * 有効期間（秒、通常30秒）
   *
   * @generated from field: int32 period = 7;
   */
  period: number;
};

/**
 * Describes the message avion.auth.v1.TotpSetup.
 * Use `create(TotpSetupSchema)` to create a new message.
 */
export const TotpSetupSchema: GenMessage<TotpSetup> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 1);

/**
 * バックアップコード
 *
 * @generated from message avion.auth.v1.BackupCode
 */
export type BackupCode = Message<"avion.auth.v1.BackupCode"> & {
  /**
   * コードID
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * コード値（ハッシュ化されていない場合のみ）
   *
   * @generated from field: string code = 2;
   */
  code: string;

  /**
   * 使用済みフラグ
   *
   * @generated from field: bool used = 3;
   */
  used: boolean;

  /**
   * 使用日時
   *
   * @generated from field: google.protobuf.Timestamp used_at = 4;
   */
  usedAt?: Timestamp;

  /**
   * 作成日時
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message avion.auth.v1.BackupCode.
 * Use `create(BackupCodeSchema)` to create a new message.
 */
export const BackupCodeSchema: GenMessage<BackupCode> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 2);

/**
 * MFA有効化リクエスト
 *
 * @generated from message avion.auth.v1.EnableMfaRequest
 */
export type EnableMfaRequest = Message<"avion.auth.v1.EnableMfaRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * MFAタイプ
   *
   * @generated from field: avion.auth.v1.MfaType mfa_type = 2;
   */
  mfaType: MfaType;

  /**
   * デバイス名
   *
   * @generated from field: string device_name = 3;
   */
  deviceName: string;
};

/**
 * Describes the message avion.auth.v1.EnableMfaRequest.
 * Use `create(EnableMfaRequestSchema)` to create a new message.
 */
export const EnableMfaRequestSchema: GenMessage<EnableMfaRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 3);

/**
 * MFA有効化レスポンス
 *
 * @generated from message avion.auth.v1.EnableMfaResponse
 */
export type EnableMfaResponse = Message<"avion.auth.v1.EnableMfaResponse"> & {
  /**
   * MFAデバイス
   *
   * @generated from field: avion.auth.v1.MfaDevice device = 1;
   */
  device?: MfaDevice;

  /**
   * TOTPセットアップ情報（MFA_TYPE_TOTPの場合）
   *
   * @generated from field: avion.auth.v1.TotpSetup totp_setup = 2;
   */
  totpSetup?: TotpSetup;

  /**
   * バックアップコード
   *
   * @generated from field: repeated avion.auth.v1.BackupCode backup_codes = 3;
   */
  backupCodes: BackupCode[];
};

/**
 * Describes the message avion.auth.v1.EnableMfaResponse.
 * Use `create(EnableMfaResponseSchema)` to create a new message.
 */
export const EnableMfaResponseSchema: GenMessage<EnableMfaResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 4);

/**
 * MFA無効化リクエスト
 *
 * @generated from message avion.auth.v1.DisableMfaRequest
 */
export type DisableMfaRequest = Message<"avion.auth.v1.DisableMfaRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * デバイスID（特定のデバイスを無効化）
   *
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * 全てのMFAを無効化
   *
   * @generated from field: bool disable_all = 3;
   */
  disableAll: boolean;

  /**
   * 確認用パスワード
   *
   * @generated from field: string password = 4;
   */
  password: string;
};

/**
 * Describes the message avion.auth.v1.DisableMfaRequest.
 * Use `create(DisableMfaRequestSchema)` to create a new message.
 */
export const DisableMfaRequestSchema: GenMessage<DisableMfaRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 5);

/**
 * MFA無効化レスポンス
 *
 * @generated from message avion.auth.v1.DisableMfaResponse
 */
export type DisableMfaResponse = Message<"avion.auth.v1.DisableMfaResponse"> & {
  /**
   * 成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 無効化されたデバイス数
   *
   * @generated from field: int32 disabled_count = 2;
   */
  disabledCount: number;
};

/**
 * Describes the message avion.auth.v1.DisableMfaResponse.
 * Use `create(DisableMfaResponseSchema)` to create a new message.
 */
export const DisableMfaResponseSchema: GenMessage<DisableMfaResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 6);

/**
 * TOTPセットアップ開始リクエスト
 *
 * @generated from message avion.auth.v1.SetupTotpRequest
 */
export type SetupTotpRequest = Message<"avion.auth.v1.SetupTotpRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * デバイス名
   *
   * @generated from field: string device_name = 2;
   */
  deviceName: string;
};

/**
 * Describes the message avion.auth.v1.SetupTotpRequest.
 * Use `create(SetupTotpRequestSchema)` to create a new message.
 */
export const SetupTotpRequestSchema: GenMessage<SetupTotpRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 7);

/**
 * TOTPセットアップ開始レスポンス
 *
 * @generated from message avion.auth.v1.SetupTotpResponse
 */
export type SetupTotpResponse = Message<"avion.auth.v1.SetupTotpResponse"> & {
  /**
   * セットアップID（確認時に使用）
   *
   * @generated from field: string setup_id = 1;
   */
  setupId: string;

  /**
   * TOTPセットアップ情報
   *
   * @generated from field: avion.auth.v1.TotpSetup totp_setup = 2;
   */
  totpSetup?: TotpSetup;
};

/**
 * Describes the message avion.auth.v1.SetupTotpResponse.
 * Use `create(SetupTotpResponseSchema)` to create a new message.
 */
export const SetupTotpResponseSchema: GenMessage<SetupTotpResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 8);

/**
 * TOTP確認リクエスト
 *
 * @generated from message avion.auth.v1.VerifyTotpRequest
 */
export type VerifyTotpRequest = Message<"avion.auth.v1.VerifyTotpRequest"> & {
  /**
   * セットアップID（初回セットアップ時）
   *
   * @generated from field: string setup_id = 1;
   */
  setupId: string;

  /**
   * ユーザーID（通常の認証時）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * デバイスID（通常の認証時）
   *
   * @generated from field: string device_id = 3;
   */
  deviceId: string;

  /**
   * TOTPコード
   *
   * @generated from field: string code = 4;
   */
  code: string;
};

/**
 * Describes the message avion.auth.v1.VerifyTotpRequest.
 * Use `create(VerifyTotpRequestSchema)` to create a new message.
 */
export const VerifyTotpRequestSchema: GenMessage<VerifyTotpRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 9);

/**
 * TOTP確認レスポンス
 *
 * @generated from message avion.auth.v1.VerifyTotpResponse
 */
export type VerifyTotpResponse = Message<"avion.auth.v1.VerifyTotpResponse"> & {
  /**
   * 検証成功フラグ
   *
   * @generated from field: bool valid = 1;
   */
  valid: boolean;

  /**
   * MFAデバイス（セットアップ完了時）
   *
   * @generated from field: avion.auth.v1.MfaDevice device = 2;
   */
  device?: MfaDevice;

  /**
   * バックアップコード（セットアップ完了時）
   *
   * @generated from field: repeated avion.auth.v1.BackupCode backup_codes = 3;
   */
  backupCodes: BackupCode[];
};

/**
 * Describes the message avion.auth.v1.VerifyTotpResponse.
 * Use `create(VerifyTotpResponseSchema)` to create a new message.
 */
export const VerifyTotpResponseSchema: GenMessage<VerifyTotpResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 10);

/**
 * バックアップコード生成リクエスト
 *
 * @generated from message avion.auth.v1.GenerateBackupCodesRequest
 */
export type GenerateBackupCodesRequest = Message<"avion.auth.v1.GenerateBackupCodesRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 生成するコード数（デフォルト: 10）
   *
   * @generated from field: int32 count = 2;
   */
  count: number;

  /**
   * 既存のコードを無効化
   *
   * @generated from field: bool invalidate_existing = 3;
   */
  invalidateExisting: boolean;
};

/**
 * Describes the message avion.auth.v1.GenerateBackupCodesRequest.
 * Use `create(GenerateBackupCodesRequestSchema)` to create a new message.
 */
export const GenerateBackupCodesRequestSchema: GenMessage<GenerateBackupCodesRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 11);

/**
 * バックアップコード生成レスポンス
 *
 * @generated from message avion.auth.v1.GenerateBackupCodesResponse
 */
export type GenerateBackupCodesResponse = Message<"avion.auth.v1.GenerateBackupCodesResponse"> & {
  /**
   * バックアップコード
   *
   * @generated from field: repeated avion.auth.v1.BackupCode backup_codes = 1;
   */
  backupCodes: BackupCode[];
};

/**
 * Describes the message avion.auth.v1.GenerateBackupCodesResponse.
 * Use `create(GenerateBackupCodesResponseSchema)` to create a new message.
 */
export const GenerateBackupCodesResponseSchema: GenMessage<GenerateBackupCodesResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 12);

/**
 * バックアップコード検証リクエスト
 *
 * @generated from message avion.auth.v1.VerifyBackupCodeRequest
 */
export type VerifyBackupCodeRequest = Message<"avion.auth.v1.VerifyBackupCodeRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * バックアップコード
   *
   * @generated from field: string code = 2;
   */
  code: string;

  /**
   * 使用済みとしてマーク
   *
   * @generated from field: bool mark_as_used = 3;
   */
  markAsUsed: boolean;
};

/**
 * Describes the message avion.auth.v1.VerifyBackupCodeRequest.
 * Use `create(VerifyBackupCodeRequestSchema)` to create a new message.
 */
export const VerifyBackupCodeRequestSchema: GenMessage<VerifyBackupCodeRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 13);

/**
 * バックアップコード検証レスポンス
 *
 * @generated from message avion.auth.v1.VerifyBackupCodeResponse
 */
export type VerifyBackupCodeResponse = Message<"avion.auth.v1.VerifyBackupCodeResponse"> & {
  /**
   * 検証成功フラグ
   *
   * @generated from field: bool valid = 1;
   */
  valid: boolean;

  /**
   * 残りのコード数
   *
   * @generated from field: int32 remaining_codes = 2;
   */
  remainingCodes: number;
};

/**
 * Describes the message avion.auth.v1.VerifyBackupCodeResponse.
 * Use `create(VerifyBackupCodeResponseSchema)` to create a new message.
 */
export const VerifyBackupCodeResponseSchema: GenMessage<VerifyBackupCodeResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 14);

/**
 * MFAデバイス一覧取得リクエスト
 *
 * @generated from message avion.auth.v1.ListMfaDevicesRequest
 */
export type ListMfaDevicesRequest = Message<"avion.auth.v1.ListMfaDevicesRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * MFAタイプでフィルタ（オプション）
   *
   * @generated from field: avion.auth.v1.MfaType mfa_type = 3;
   */
  mfaType: MfaType;

  /**
   * アクティブなデバイスのみ
   *
   * @generated from field: bool active_only = 4;
   */
  activeOnly: boolean;
};

/**
 * Describes the message avion.auth.v1.ListMfaDevicesRequest.
 * Use `create(ListMfaDevicesRequestSchema)` to create a new message.
 */
export const ListMfaDevicesRequestSchema: GenMessage<ListMfaDevicesRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 15);

/**
 * MFAデバイス一覧取得レスポンス
 *
 * @generated from message avion.auth.v1.ListMfaDevicesResponse
 */
export type ListMfaDevicesResponse = Message<"avion.auth.v1.ListMfaDevicesResponse"> & {
  /**
   * MFAデバイスのリスト
   *
   * @generated from field: repeated avion.auth.v1.MfaDevice devices = 1;
   */
  devices: MfaDevice[];

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  /**
   * MFAが有効かどうか
   *
   * @generated from field: bool mfa_enabled = 3;
   */
  mfaEnabled: boolean;
};

/**
 * Describes the message avion.auth.v1.ListMfaDevicesResponse.
 * Use `create(ListMfaDevicesResponseSchema)` to create a new message.
 */
export const ListMfaDevicesResponseSchema: GenMessage<ListMfaDevicesResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 16);

/**
 * MFAデバイス取得リクエスト
 *
 * @generated from message avion.auth.v1.GetMfaDeviceRequest
 */
export type GetMfaDeviceRequest = Message<"avion.auth.v1.GetMfaDeviceRequest"> & {
  /**
   * デバイスID
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.auth.v1.GetMfaDeviceRequest.
 * Use `create(GetMfaDeviceRequestSchema)` to create a new message.
 */
export const GetMfaDeviceRequestSchema: GenMessage<GetMfaDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 17);

/**
 * MFAデバイス取得レスポンス
 *
 * @generated from message avion.auth.v1.GetMfaDeviceResponse
 */
export type GetMfaDeviceResponse = Message<"avion.auth.v1.GetMfaDeviceResponse"> & {
  /**
   * MFAデバイス
   *
   * @generated from field: avion.auth.v1.MfaDevice device = 1;
   */
  device?: MfaDevice;
};

/**
 * Describes the message avion.auth.v1.GetMfaDeviceResponse.
 * Use `create(GetMfaDeviceResponseSchema)` to create a new message.
 */
export const GetMfaDeviceResponseSchema: GenMessage<GetMfaDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 18);

/**
 * MFAデバイス更新リクエスト
 *
 * @generated from message avion.auth.v1.UpdateMfaDeviceRequest
 */
export type UpdateMfaDeviceRequest = Message<"avion.auth.v1.UpdateMfaDeviceRequest"> & {
  /**
   * デバイスID
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * 新しいデバイス名
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * メタデータの更新
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message avion.auth.v1.UpdateMfaDeviceRequest.
 * Use `create(UpdateMfaDeviceRequestSchema)` to create a new message.
 */
export const UpdateMfaDeviceRequestSchema: GenMessage<UpdateMfaDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 19);

/**
 * MFAデバイス更新レスポンス
 *
 * @generated from message avion.auth.v1.UpdateMfaDeviceResponse
 */
export type UpdateMfaDeviceResponse = Message<"avion.auth.v1.UpdateMfaDeviceResponse"> & {
  /**
   * 更新されたMFAデバイス
   *
   * @generated from field: avion.auth.v1.MfaDevice device = 1;
   */
  device?: MfaDevice;
};

/**
 * Describes the message avion.auth.v1.UpdateMfaDeviceResponse.
 * Use `create(UpdateMfaDeviceResponseSchema)` to create a new message.
 */
export const UpdateMfaDeviceResponseSchema: GenMessage<UpdateMfaDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 20);

/**
 * MFAチャレンジリクエスト
 *
 * @generated from message avion.auth.v1.MfaChallengeRequest
 */
export type MfaChallengeRequest = Message<"avion.auth.v1.MfaChallengeRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * セッションID
   *
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * 使用するMFAタイプ（指定しない場合は利用可能な全タイプ）
   *
   * @generated from field: avion.auth.v1.MfaType preferred_type = 3;
   */
  preferredType: MfaType;
};

/**
 * Describes the message avion.auth.v1.MfaChallengeRequest.
 * Use `create(MfaChallengeRequestSchema)` to create a new message.
 */
export const MfaChallengeRequestSchema: GenMessage<MfaChallengeRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 21);

/**
 * MFAチャレンジレスポンス
 *
 * @generated from message avion.auth.v1.MfaChallengeResponse
 */
export type MfaChallengeResponse = Message<"avion.auth.v1.MfaChallengeResponse"> & {
  /**
   * チャレンジID
   *
   * @generated from field: string challenge_id = 1;
   */
  challengeId: string;

  /**
   * 利用可能なMFAタイプ
   *
   * @generated from field: repeated avion.auth.v1.MfaType available_types = 2;
   */
  availableTypes: MfaType[];

  /**
   * チャレンジの有効期限
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 3;
   */
  expiresAt?: Timestamp;

  /**
   * 追加情報（SMS送信先の末尾4桁など）
   *
   * @generated from field: map<string, string> hints = 4;
   */
  hints: { [key: string]: string };
};

/**
 * Describes the message avion.auth.v1.MfaChallengeResponse.
 * Use `create(MfaChallengeResponseSchema)` to create a new message.
 */
export const MfaChallengeResponseSchema: GenMessage<MfaChallengeResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 22);

/**
 * MFAチャレンジ検証リクエスト
 *
 * @generated from message avion.auth.v1.VerifyMfaChallengeRequest
 */
export type VerifyMfaChallengeRequest = Message<"avion.auth.v1.VerifyMfaChallengeRequest"> & {
  /**
   * チャレンジID
   *
   * @generated from field: string challenge_id = 1;
   */
  challengeId: string;

  /**
   * MFAタイプ
   *
   * @generated from field: avion.auth.v1.MfaType mfa_type = 2;
   */
  mfaType: MfaType;

  /**
   * 認証コード
   *
   * @generated from field: string code = 3;
   */
  code: string;

  /**
   * デバイスID（TOTP/Passkeyの場合）
   *
   * @generated from field: string device_id = 4;
   */
  deviceId: string;
};

/**
 * Describes the message avion.auth.v1.VerifyMfaChallengeRequest.
 * Use `create(VerifyMfaChallengeRequestSchema)` to create a new message.
 */
export const VerifyMfaChallengeRequestSchema: GenMessage<VerifyMfaChallengeRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 23);

/**
 * MFAチャレンジ検証レスポンス
 *
 * @generated from message avion.auth.v1.VerifyMfaChallengeResponse
 */
export type VerifyMfaChallengeResponse = Message<"avion.auth.v1.VerifyMfaChallengeResponse"> & {
  /**
   * 検証成功フラグ
   *
   * @generated from field: bool valid = 1;
   */
  valid: boolean;

  /**
   * セッション更新トークン（成功時）
   *
   * @generated from field: string session_token = 2;
   */
  sessionToken: string;

  /**
   * エラー詳細（失敗時）
   *
   * @generated from field: avion.common.v1.ErrorDetail error = 3;
   */
  error?: ErrorDetail;

  /**
   * 残り試行回数
   *
   * @generated from field: int32 remaining_attempts = 4;
   */
  remainingAttempts: number;
};

/**
 * Describes the message avion.auth.v1.VerifyMfaChallengeResponse.
 * Use `create(VerifyMfaChallengeResponseSchema)` to create a new message.
 */
export const VerifyMfaChallengeResponseSchema: GenMessage<VerifyMfaChallengeResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_mfa, 24);

/**
 * MFA（多要素認証）の種類
 *
 * @generated from enum avion.auth.v1.MfaType
 */
export enum MfaType {
  /**
   * 未指定
   *
   * @generated from enum value: MFA_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * TOTP（Time-based One-Time Password）
   *
   * @generated from enum value: MFA_TYPE_TOTP = 1;
   */
  TOTP = 1,

  /**
   * SMS認証
   *
   * @generated from enum value: MFA_TYPE_SMS = 2;
   */
  SMS = 2,

  /**
   * メール認証
   *
   * @generated from enum value: MFA_TYPE_EMAIL = 3;
   */
  EMAIL = 3,

  /**
   * バックアップコード
   *
   * @generated from enum value: MFA_TYPE_BACKUP_CODE = 4;
   */
  BACKUP_CODE = 4,

  /**
   * Passkey/WebAuthn
   *
   * @generated from enum value: MFA_TYPE_PASSKEY = 5;
   */
  PASSKEY = 5,
}

/**
 * Describes the enum avion.auth.v1.MfaType.
 */
export const MfaTypeSchema: GenEnum<MfaType> = /*@__PURE__*/
  enumDesc(file_avion_auth_v1_mfa, 0);

/**
 * MFAの状態
 *
 * @generated from enum avion.auth.v1.MfaStatus
 */
export enum MfaStatus {
  /**
   * 未指定
   *
   * @generated from enum value: MFA_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 無効
   *
   * @generated from enum value: MFA_STATUS_DISABLED = 1;
   */
  DISABLED = 1,

  /**
   * 有効化中（セットアップ中）
   *
   * @generated from enum value: MFA_STATUS_PENDING = 2;
   */
  PENDING = 2,

  /**
   * 有効
   *
   * @generated from enum value: MFA_STATUS_ENABLED = 3;
   */
  ENABLED = 3,
}

/**
 * Describes the enum avion.auth.v1.MfaStatus.
 */
export const MfaStatusSchema: GenEnum<MfaStatus> = /*@__PURE__*/
  enumDesc(file_avion_auth_v1_mfa, 1);

