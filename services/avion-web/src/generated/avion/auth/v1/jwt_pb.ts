// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file avion/auth/v1/jwt.proto (package avion.auth.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file avion/auth/v1/jwt.proto.
 */
export const file_avion_auth_v1_jwt: GenFile = /*@__PURE__*/
  fileDesc("Chdhdmlvbi9hdXRoL3YxL2p3dC5wcm90bxINYXZpb24uYXV0aC52MSLVAgoJSnd0Q2xhaW1zEg4KBmlzc3VlchgBIAEoCRIPCgdzdWJqZWN0GAIgASgJEhAKCGF1ZGllbmNlGAMgAygJEi4KCmV4cGlyYXRpb24YBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCm5vdF9iZWZvcmUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi0KCWlzc3VlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDgoGand0X2lkGAcgASgJEkEKDWN1c3RvbV9jbGFpbXMYCCADKAsyKi5hdmlvbi5hdXRoLnYxLkp3dENsYWltcy5DdXN0b21DbGFpbXNFbnRyeRozChFDdXN0b21DbGFpbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIo4BCghKd3RUb2tlbhINCgV0b2tlbhgBIAEoCRImCgR0eXBlGAIgASgOMhguYXZpb24uYXV0aC52MS5Ub2tlblR5cGUSKAoGY2xhaW1zGAMgASgLMhguYXZpb24uYXV0aC52MS5Kd3RDbGFpbXMSEQoJYWxnb3JpdGhtGAQgASgJEg4KBmtleV9pZBgFIAEoCSKKAgoSR2VuZXJhdGVKd3RSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSLAoKdG9rZW5fdHlwZRgCIAEoDjIYLmF2aW9uLmF1dGgudjEuVG9rZW5UeXBlEg4KBnNjb3BlcxgDIAMoCRJKCg1jdXN0b21fY2xhaW1zGAQgAygLMjMuYXZpb24uYXV0aC52MS5HZW5lcmF0ZUp3dFJlcXVlc3QuQ3VzdG9tQ2xhaW1zRW50cnkSEgoKZXhwaXJlc19pbhgFIAEoBRIQCghhdWRpZW5jZRgGIAMoCRozChFDdXN0b21DbGFpbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIm0KE0dlbmVyYXRlSnd0UmVzcG9uc2USJgoFdG9rZW4YASABKAsyFy5hdmlvbi5hdXRoLnYxLkp3dFRva2VuEi4KCmV4cGlyZXNfYXQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIoYBChBWZXJpZnlKd3RSZXF1ZXN0Eg0KBXRva2VuGAEgASgJEi8KDWV4cGVjdGVkX3R5cGUYAiABKA4yGC5hdmlvbi5hdXRoLnYxLlRva2VuVHlwZRIZChFleHBlY3RlZF9hdWRpZW5jZRgDIAMoCRIXCg9leHBlY3RlZF9pc3N1ZXIYBCABKAkiogEKEVZlcmlmeUp3dFJlc3BvbnNlEhAKCGlzX3ZhbGlkGAEgASgIEisKCnRva2VuX2luZm8YAiABKAsyFy5hdmlvbi5hdXRoLnYxLkp3dFRva2VuEhUKDWVycm9yX21lc3NhZ2UYAyABKAkSNwoKZXJyb3JfY29kZRgEIAEoDjIjLmF2aW9uLmF1dGgudjEuSnd0VmVyaWZpY2F0aW9uRXJyb3IiOgoRUmVmcmVzaEp3dFJlcXVlc3QSFQoNcmVmcmVzaF90b2tlbhgBIAEoCRIOCgZzY29wZXMYAiADKAki7gEKElJlZnJlc2hKd3RSZXNwb25zZRItCgxhY2Nlc3NfdG9rZW4YASABKAsyFy5hdmlvbi5hdXRoLnYxLkp3dFRva2VuEi4KDXJlZnJlc2hfdG9rZW4YAiABKAsyFy5hdmlvbi5hdXRoLnYxLkp3dFRva2VuEjsKF2FjY2Vzc190b2tlbl9leHBpcmVzX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI8ChhyZWZyZXNoX3Rva2VuX2V4cGlyZXNfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wImMKEFJldm9rZUp3dFJlcXVlc3QSDQoFdG9rZW4YASABKAkSLAoKdG9rZW5fdHlwZRgCIAEoDjIYLmF2aW9uLmF1dGgudjEuVG9rZW5UeXBlEhIKCnJldm9rZV9hbGwYAyABKAgiOwoRUmV2b2tlSnd0UmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIVCg1yZXZva2VkX2NvdW50GAIgASgFIj4KFEludHJvc3BlY3RKd3RSZXF1ZXN0Eg0KBXRva2VuGAEgASgJEhcKD3Rva2VuX3R5cGVfaGludBgCIAEoCSLGAgoVSW50cm9zcGVjdEp3dFJlc3BvbnNlEg4KBmFjdGl2ZRgBIAEoCBINCgVzY29wZRgCIAEoCRIRCgljbGllbnRfaWQYAyABKAkSEAoIdXNlcm5hbWUYBCABKAkSEgoKdG9rZW5fdHlwZRgFIAEoCRInCgNleHAYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEicKA2lhdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJwoDbmJmGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBILCgNzdWIYCSABKAkSCwoDYXVkGAogAygJEgsKA2lzcxgLIAEoCRILCgNqdGkYDCABKAkSJgoFZXh0cmEYDSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0ItgBCg1Kd3RTaWduaW5nS2V5Eg4KBmtleV9pZBgBIAEoCRIRCglhbGdvcml0aG0YAiABKAkSEgoKcHVibGljX2tleRgDIAEoCRILCgN1c2UYBCABKAkSEAoIa2V5X3R5cGUYBSABKAkSLgoKY3JlYXRlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKZXhwaXJlc19hdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEQoJaXNfYWN0aXZlGAggASgIIiAKDkdldEp3a3NSZXF1ZXN0Eg4KBmtleV9pZBgBIAEoCSI4Cg9HZXRKd2tzUmVzcG9uc2USJQoEa2V5cxgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QiKgoTR2V0Snd0Q29uZmlnUmVxdWVzdBITCgtjb25maWdfbmFtZRgBIAEoCSLrAQoUR2V0Snd0Q29uZmlnUmVzcG9uc2USGAoQYWNjZXNzX3Rva2VuX3R0bBgBIAEoBRIZChFyZWZyZXNoX3Rva2VuX3R0bBgCIAEoBRIUCgxpZF90b2tlbl90dGwYAyABKAUSGQoRc2lnbmluZ19hbGdvcml0aG0YBCABKAkSDgoGaXNzdWVyGAUgASgJEhgKEGRlZmF1bHRfYXVkaWVuY2UYBiADKAkSHgoWcmVmcmVzaF90b2tlbl9yb3RhdGlvbhgHIAEoCBIPCgd1c2VfanRpGAggASgIEhIKCmNsb2NrX3NrZXcYCSABKAUqaQoJVG9rZW5UeXBlEhoKFlRPS0VOX1RZUEVfVU5TUEVDSUZJRUQQABIVChFUT0tFTl9UWVBFX0FDQ0VTUxABEhYKElRPS0VOX1RZUEVfUkVGUkVTSBACEhEKDVRPS0VOX1RZUEVfSUQQAyqMAwoUSnd0VmVyaWZpY2F0aW9uRXJyb3ISJgoiSldUX1ZFUklGSUNBVElPTl9FUlJPUl9VTlNQRUNJRklFRBAAEiwKKEpXVF9WRVJJRklDQVRJT05fRVJST1JfSU5WQUxJRF9TSUdOQVRVUkUQARIiCh5KV1RfVkVSSUZJQ0FUSU9OX0VSUk9SX0VYUElSRUQQAhIoCiRKV1RfVkVSSUZJQ0FUSU9OX0VSUk9SX05PVF9ZRVRfVkFMSUQQAxIpCiVKV1RfVkVSSUZJQ0FUSU9OX0VSUk9SX0lOVkFMSURfSVNTVUVSEAQSKwonSldUX1ZFUklGSUNBVElPTl9FUlJPUl9JTlZBTElEX0FVRElFTkNFEAUSKQolSldUX1ZFUklGSUNBVElPTl9FUlJPUl9JTlZBTElEX0ZPUk1BVBAGEikKJUpXVF9WRVJJRklDQVRJT05fRVJST1JfSU5WQUxJRF9LRVlfSUQQBxIiCh5KV1RfVkVSSUZJQ0FUSU9OX0VSUk9SX1JFVk9LRUQQCEKoAQoRY29tLmF2aW9uLmF1dGgudjFCCEp3dFByb3RvUAFaM2dpdGh1Yi5jb20vbmEybmEtcC9hdmlvbi9wcm90by9hdmlvbi9hdXRoL3YxO2F1dGh2MaICA0FBWKoCDUF2aW9uLkF1dGguVjHKAg1BdmlvblxBdXRoXFYx4gIZQXZpb25cQXV0aFxWMVxHUEJNZXRhZGF0YeoCD0F2aW9uOjpBdXRoOjpWMWIGcHJvdG8z", [file_google_protobuf_timestamp, file_google_protobuf_struct]);

/**
 * JWTクレーム
 *
 * @generated from message avion.auth.v1.JwtClaims
 */
export type JwtClaims = Message<"avion.auth.v1.JwtClaims"> & {
  /**
   * 発行者（iss）
   *
   * @generated from field: string issuer = 1;
   */
  issuer: string;

  /**
   * サブジェクト（sub）- ユーザーID
   *
   * @generated from field: string subject = 2;
   */
  subject: string;

  /**
   * オーディエンス（aud）
   *
   * @generated from field: repeated string audience = 3;
   */
  audience: string[];

  /**
   * 有効期限（exp）
   *
   * @generated from field: google.protobuf.Timestamp expiration = 4;
   */
  expiration?: Timestamp;

  /**
   * 有効開始時刻（nbf）
   *
   * @generated from field: google.protobuf.Timestamp not_before = 5;
   */
  notBefore?: Timestamp;

  /**
   * 発行時刻（iat）
   *
   * @generated from field: google.protobuf.Timestamp issued_at = 6;
   */
  issuedAt?: Timestamp;

  /**
   * JWT ID（jti）
   *
   * @generated from field: string jwt_id = 7;
   */
  jwtId: string;

  /**
   * カスタムクレーム
   *
   * @generated from field: map<string, string> custom_claims = 8;
   */
  customClaims: { [key: string]: string };
};

/**
 * Describes the message avion.auth.v1.JwtClaims.
 * Use `create(JwtClaimsSchema)` to create a new message.
 */
export const JwtClaimsSchema: GenMessage<JwtClaims> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 0);

/**
 * JWTトークン情報
 *
 * @generated from message avion.auth.v1.JwtToken
 */
export type JwtToken = Message<"avion.auth.v1.JwtToken"> & {
  /**
   * トークン文字列
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * トークンタイプ
   *
   * @generated from field: avion.auth.v1.TokenType type = 2;
   */
  type: TokenType;

  /**
   * クレーム情報
   *
   * @generated from field: avion.auth.v1.JwtClaims claims = 3;
   */
  claims?: JwtClaims;

  /**
   * 署名アルゴリズム（RS256, HS256等）
   *
   * @generated from field: string algorithm = 4;
   */
  algorithm: string;

  /**
   * キーID（複数の署名キーを管理する場合）
   *
   * @generated from field: string key_id = 5;
   */
  keyId: string;
};

/**
 * Describes the message avion.auth.v1.JwtToken.
 * Use `create(JwtTokenSchema)` to create a new message.
 */
export const JwtTokenSchema: GenMessage<JwtToken> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 1);

/**
 * JWT生成リクエスト
 *
 * @generated from message avion.auth.v1.GenerateJwtRequest
 */
export type GenerateJwtRequest = Message<"avion.auth.v1.GenerateJwtRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * トークンタイプ
   *
   * @generated from field: avion.auth.v1.TokenType token_type = 2;
   */
  tokenType: TokenType;

  /**
   * スコープ（権限）
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[];

  /**
   * カスタムクレーム
   *
   * @generated from field: map<string, string> custom_claims = 4;
   */
  customClaims: { [key: string]: string };

  /**
   * 有効期限（秒）
   *
   * @generated from field: int32 expires_in = 5;
   */
  expiresIn: number;

  /**
   * オーディエンス
   *
   * @generated from field: repeated string audience = 6;
   */
  audience: string[];
};

/**
 * Describes the message avion.auth.v1.GenerateJwtRequest.
 * Use `create(GenerateJwtRequestSchema)` to create a new message.
 */
export const GenerateJwtRequestSchema: GenMessage<GenerateJwtRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 2);

/**
 * JWT生成レスポンス
 *
 * @generated from message avion.auth.v1.GenerateJwtResponse
 */
export type GenerateJwtResponse = Message<"avion.auth.v1.GenerateJwtResponse"> & {
  /**
   * 生成されたトークン
   *
   * @generated from field: avion.auth.v1.JwtToken token = 1;
   */
  token?: JwtToken;

  /**
   * トークンの有効期限
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 2;
   */
  expiresAt?: Timestamp;
};

/**
 * Describes the message avion.auth.v1.GenerateJwtResponse.
 * Use `create(GenerateJwtResponseSchema)` to create a new message.
 */
export const GenerateJwtResponseSchema: GenMessage<GenerateJwtResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 3);

/**
 * JWT検証リクエスト
 *
 * @generated from message avion.auth.v1.VerifyJwtRequest
 */
export type VerifyJwtRequest = Message<"avion.auth.v1.VerifyJwtRequest"> & {
  /**
   * 検証するトークン
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * 期待するトークンタイプ（オプション）
   *
   * @generated from field: avion.auth.v1.TokenType expected_type = 2;
   */
  expectedType: TokenType;

  /**
   * 期待するオーディエンス（オプション）
   *
   * @generated from field: repeated string expected_audience = 3;
   */
  expectedAudience: string[];

  /**
   * 期待する発行者（オプション）
   *
   * @generated from field: string expected_issuer = 4;
   */
  expectedIssuer: string;
};

/**
 * Describes the message avion.auth.v1.VerifyJwtRequest.
 * Use `create(VerifyJwtRequestSchema)` to create a new message.
 */
export const VerifyJwtRequestSchema: GenMessage<VerifyJwtRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 4);

/**
 * JWT検証レスポンス
 *
 * @generated from message avion.auth.v1.VerifyJwtResponse
 */
export type VerifyJwtResponse = Message<"avion.auth.v1.VerifyJwtResponse"> & {
  /**
   * 検証結果
   *
   * @generated from field: bool is_valid = 1;
   */
  isValid: boolean;

  /**
   * トークン情報（有効な場合）
   *
   * @generated from field: avion.auth.v1.JwtToken token_info = 2;
   */
  tokenInfo?: JwtToken;

  /**
   * エラーメッセージ（無効な場合）
   *
   * @generated from field: string error_message = 3;
   */
  errorMessage: string;

  /**
   * エラーコード（無効な場合）
   *
   * @generated from field: avion.auth.v1.JwtVerificationError error_code = 4;
   */
  errorCode: JwtVerificationError;
};

/**
 * Describes the message avion.auth.v1.VerifyJwtResponse.
 * Use `create(VerifyJwtResponseSchema)` to create a new message.
 */
export const VerifyJwtResponseSchema: GenMessage<VerifyJwtResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 5);

/**
 * JWTリフレッシュリクエスト
 *
 * @generated from message avion.auth.v1.RefreshJwtRequest
 */
export type RefreshJwtRequest = Message<"avion.auth.v1.RefreshJwtRequest"> & {
  /**
   * リフレッシュトークン
   *
   * @generated from field: string refresh_token = 1;
   */
  refreshToken: string;

  /**
   * 新しいスコープ（オプション、元のスコープ以下である必要がある）
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * Describes the message avion.auth.v1.RefreshJwtRequest.
 * Use `create(RefreshJwtRequestSchema)` to create a new message.
 */
export const RefreshJwtRequestSchema: GenMessage<RefreshJwtRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 6);

/**
 * JWTリフレッシュレスポンス
 *
 * @generated from message avion.auth.v1.RefreshJwtResponse
 */
export type RefreshJwtResponse = Message<"avion.auth.v1.RefreshJwtResponse"> & {
  /**
   * 新しいアクセストークン
   *
   * @generated from field: avion.auth.v1.JwtToken access_token = 1;
   */
  accessToken?: JwtToken;

  /**
   * 新しいリフレッシュトークン（ローテーションする場合）
   *
   * @generated from field: avion.auth.v1.JwtToken refresh_token = 2;
   */
  refreshToken?: JwtToken;

  /**
   * アクセストークンの有効期限
   *
   * @generated from field: google.protobuf.Timestamp access_token_expires_at = 3;
   */
  accessTokenExpiresAt?: Timestamp;

  /**
   * リフレッシュトークンの有効期限
   *
   * @generated from field: google.protobuf.Timestamp refresh_token_expires_at = 4;
   */
  refreshTokenExpiresAt?: Timestamp;
};

/**
 * Describes the message avion.auth.v1.RefreshJwtResponse.
 * Use `create(RefreshJwtResponseSchema)` to create a new message.
 */
export const RefreshJwtResponseSchema: GenMessage<RefreshJwtResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 7);

/**
 * JWT失効リクエスト
 *
 * @generated from message avion.auth.v1.RevokeJwtRequest
 */
export type RevokeJwtRequest = Message<"avion.auth.v1.RevokeJwtRequest"> & {
  /**
   * 失効させるトークン
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * トークンタイプ
   *
   * @generated from field: avion.auth.v1.TokenType token_type = 2;
   */
  tokenType: TokenType;

  /**
   * 全トークンを失効させる（ユーザーの全セッション終了）
   *
   * @generated from field: bool revoke_all = 3;
   */
  revokeAll: boolean;
};

/**
 * Describes the message avion.auth.v1.RevokeJwtRequest.
 * Use `create(RevokeJwtRequestSchema)` to create a new message.
 */
export const RevokeJwtRequestSchema: GenMessage<RevokeJwtRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 8);

/**
 * JWT失効レスポンス
 *
 * @generated from message avion.auth.v1.RevokeJwtResponse
 */
export type RevokeJwtResponse = Message<"avion.auth.v1.RevokeJwtResponse"> & {
  /**
   * 失効成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 失効したトークン数
   *
   * @generated from field: int32 revoked_count = 2;
   */
  revokedCount: number;
};

/**
 * Describes the message avion.auth.v1.RevokeJwtResponse.
 * Use `create(RevokeJwtResponseSchema)` to create a new message.
 */
export const RevokeJwtResponseSchema: GenMessage<RevokeJwtResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 9);

/**
 * JWTイントロスペクションリクエスト（RFC 7662準拠）
 *
 * @generated from message avion.auth.v1.IntrospectJwtRequest
 */
export type IntrospectJwtRequest = Message<"avion.auth.v1.IntrospectJwtRequest"> & {
  /**
   * イントロスペクション対象のトークン
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * トークンタイプヒント（オプション）
   *
   * @generated from field: string token_type_hint = 2;
   */
  tokenTypeHint: string;
};

/**
 * Describes the message avion.auth.v1.IntrospectJwtRequest.
 * Use `create(IntrospectJwtRequestSchema)` to create a new message.
 */
export const IntrospectJwtRequestSchema: GenMessage<IntrospectJwtRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 10);

/**
 * JWTイントロスペクションレスポンス（RFC 7662準拠）
 *
 * @generated from message avion.auth.v1.IntrospectJwtResponse
 */
export type IntrospectJwtResponse = Message<"avion.auth.v1.IntrospectJwtResponse"> & {
  /**
   * トークンがアクティブかどうか
   *
   * @generated from field: bool active = 1;
   */
  active: boolean;

  /**
   * スコープ
   *
   * @generated from field: string scope = 2;
   */
  scope: string;

  /**
   * クライアントID
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;

  /**
   * ユーザー名
   *
   * @generated from field: string username = 4;
   */
  username: string;

  /**
   * トークンタイプ
   *
   * @generated from field: string token_type = 5;
   */
  tokenType: string;

  /**
   * 有効期限
   *
   * @generated from field: google.protobuf.Timestamp exp = 6;
   */
  exp?: Timestamp;

  /**
   * 発行時刻
   *
   * @generated from field: google.protobuf.Timestamp iat = 7;
   */
  iat?: Timestamp;

  /**
   * 有効開始時刻
   *
   * @generated from field: google.protobuf.Timestamp nbf = 8;
   */
  nbf?: Timestamp;

  /**
   * サブジェクト
   *
   * @generated from field: string sub = 9;
   */
  sub: string;

  /**
   * オーディエンス
   *
   * @generated from field: repeated string aud = 10;
   */
  aud: string[];

  /**
   * 発行者
   *
   * @generated from field: string iss = 11;
   */
  iss: string;

  /**
   * JWT ID
   *
   * @generated from field: string jti = 12;
   */
  jti: string;

  /**
   * 追加情報
   *
   * @generated from field: google.protobuf.Struct extra = 13;
   */
  extra?: JsonObject;
};

/**
 * Describes the message avion.auth.v1.IntrospectJwtResponse.
 * Use `create(IntrospectJwtResponseSchema)` to create a new message.
 */
export const IntrospectJwtResponseSchema: GenMessage<IntrospectJwtResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 11);

/**
 * JWT署名キー情報
 *
 * @generated from message avion.auth.v1.JwtSigningKey
 */
export type JwtSigningKey = Message<"avion.auth.v1.JwtSigningKey"> & {
  /**
   * キーID
   *
   * @generated from field: string key_id = 1;
   */
  keyId: string;

  /**
   * アルゴリズム（RS256, HS256等）
   *
   * @generated from field: string algorithm = 2;
   */
  algorithm: string;

  /**
   * 公開鍵（RSA等の場合）
   *
   * @generated from field: string public_key = 3;
   */
  publicKey: string;

  /**
   * キーの用途（sig, enc）
   *
   * @generated from field: string use = 4;
   */
  use: string;

  /**
   * キータイプ（RSA, EC等）
   *
   * @generated from field: string key_type = 5;
   */
  keyType: string;

  /**
   * 作成日時
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * 有効期限
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 7;
   */
  expiresAt?: Timestamp;

  /**
   * アクティブフラグ
   *
   * @generated from field: bool is_active = 8;
   */
  isActive: boolean;
};

/**
 * Describes the message avion.auth.v1.JwtSigningKey.
 * Use `create(JwtSigningKeySchema)` to create a new message.
 */
export const JwtSigningKeySchema: GenMessage<JwtSigningKey> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 12);

/**
 * JWKS（JSON Web Key Set）取得リクエスト
 *
 * @generated from message avion.auth.v1.GetJwksRequest
 */
export type GetJwksRequest = Message<"avion.auth.v1.GetJwksRequest"> & {
  /**
   * 特定のキーIDを指定（オプション）
   *
   * @generated from field: string key_id = 1;
   */
  keyId: string;
};

/**
 * Describes the message avion.auth.v1.GetJwksRequest.
 * Use `create(GetJwksRequestSchema)` to create a new message.
 */
export const GetJwksRequestSchema: GenMessage<GetJwksRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 13);

/**
 * JWKS（JSON Web Key Set）取得レスポンス
 *
 * @generated from message avion.auth.v1.GetJwksResponse
 */
export type GetJwksResponse = Message<"avion.auth.v1.GetJwksResponse"> & {
  /**
   * JWKSのJSON表現
   *
   * @generated from field: google.protobuf.Struct keys = 1;
   */
  keys?: JsonObject;
};

/**
 * Describes the message avion.auth.v1.GetJwksResponse.
 * Use `create(GetJwksResponseSchema)` to create a new message.
 */
export const GetJwksResponseSchema: GenMessage<GetJwksResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 14);

/**
 * JWT設定取得リクエスト
 *
 * @generated from message avion.auth.v1.GetJwtConfigRequest
 */
export type GetJwtConfigRequest = Message<"avion.auth.v1.GetJwtConfigRequest"> & {
  /**
   * 設定名（オプション）
   *
   * @generated from field: string config_name = 1;
   */
  configName: string;
};

/**
 * Describes the message avion.auth.v1.GetJwtConfigRequest.
 * Use `create(GetJwtConfigRequestSchema)` to create a new message.
 */
export const GetJwtConfigRequestSchema: GenMessage<GetJwtConfigRequest> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 15);

/**
 * JWT設定取得レスポンス
 *
 * @generated from message avion.auth.v1.GetJwtConfigResponse
 */
export type GetJwtConfigResponse = Message<"avion.auth.v1.GetJwtConfigResponse"> & {
  /**
   * アクセストークンの有効期限（秒）
   *
   * @generated from field: int32 access_token_ttl = 1;
   */
  accessTokenTtl: number;

  /**
   * リフレッシュトークンの有効期限（秒）
   *
   * @generated from field: int32 refresh_token_ttl = 2;
   */
  refreshTokenTtl: number;

  /**
   * IDトークンの有効期限（秒）
   *
   * @generated from field: int32 id_token_ttl = 3;
   */
  idTokenTtl: number;

  /**
   * 署名アルゴリズム
   *
   * @generated from field: string signing_algorithm = 4;
   */
  signingAlgorithm: string;

  /**
   * 発行者
   *
   * @generated from field: string issuer = 5;
   */
  issuer: string;

  /**
   * デフォルトオーディエンス
   *
   * @generated from field: repeated string default_audience = 6;
   */
  defaultAudience: string[];

  /**
   * リフレッシュトークンのローテーション有効フラグ
   *
   * @generated from field: bool refresh_token_rotation = 7;
   */
  refreshTokenRotation: boolean;

  /**
   * JTI（JWT ID）の使用フラグ
   *
   * @generated from field: bool use_jti = 8;
   */
  useJti: boolean;

  /**
   * クロックスキュー（秒）
   *
   * @generated from field: int32 clock_skew = 9;
   */
  clockSkew: number;
};

/**
 * Describes the message avion.auth.v1.GetJwtConfigResponse.
 * Use `create(GetJwtConfigResponseSchema)` to create a new message.
 */
export const GetJwtConfigResponseSchema: GenMessage<GetJwtConfigResponse> = /*@__PURE__*/
  messageDesc(file_avion_auth_v1_jwt, 16);

/**
 * JWTトークンのタイプ
 *
 * @generated from enum avion.auth.v1.TokenType
 */
export enum TokenType {
  /**
   * 未指定
   *
   * @generated from enum value: TOKEN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * アクセストークン
   *
   * @generated from enum value: TOKEN_TYPE_ACCESS = 1;
   */
  ACCESS = 1,

  /**
   * リフレッシュトークン
   *
   * @generated from enum value: TOKEN_TYPE_REFRESH = 2;
   */
  REFRESH = 2,

  /**
   * IDトークン（OpenID Connect）
   *
   * @generated from enum value: TOKEN_TYPE_ID = 3;
   */
  ID = 3,
}

/**
 * Describes the enum avion.auth.v1.TokenType.
 */
export const TokenTypeSchema: GenEnum<TokenType> = /*@__PURE__*/
  enumDesc(file_avion_auth_v1_jwt, 0);

/**
 * JWT検証エラーコード
 *
 * @generated from enum avion.auth.v1.JwtVerificationError
 */
export enum JwtVerificationError {
  /**
   * 未指定
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 無効な署名
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_INVALID_SIGNATURE = 1;
   */
  INVALID_SIGNATURE = 1,

  /**
   * 期限切れ
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_EXPIRED = 2;
   */
  EXPIRED = 2,

  /**
   * まだ有効でない
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_NOT_YET_VALID = 3;
   */
  NOT_YET_VALID = 3,

  /**
   * 無効な発行者
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_INVALID_ISSUER = 4;
   */
  INVALID_ISSUER = 4,

  /**
   * 無効なオーディエンス
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_INVALID_AUDIENCE = 5;
   */
  INVALID_AUDIENCE = 5,

  /**
   * 無効なフォーマット
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_INVALID_FORMAT = 6;
   */
  INVALID_FORMAT = 6,

  /**
   * 無効なキーID
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_INVALID_KEY_ID = 7;
   */
  INVALID_KEY_ID = 7,

  /**
   * 失効済み
   *
   * @generated from enum value: JWT_VERIFICATION_ERROR_REVOKED = 8;
   */
  REVOKED = 8,
}

/**
 * Describes the enum avion.auth.v1.JwtVerificationError.
 */
export const JwtVerificationErrorSchema: GenEnum<JwtVerificationError> = /*@__PURE__*/
  enumDesc(file_avion_auth_v1_jwt, 1);

