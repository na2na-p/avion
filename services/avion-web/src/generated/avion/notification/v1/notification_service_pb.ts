// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file avion/notification/v1/notification_service.proto (package avion.notification.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { PaginationRequest, PaginationResponse } from "../../common/v1/pagination_pb";
import { file_avion_common_v1_pagination } from "../../common/v1/pagination_pb";
import type { Notification, NotificationChannel, NotificationDelivery, NotificationPreference, NotificationTemplate, NotificationType, PushDevice, UnreadCount, WebSocketConnection, WebSocketMessage } from "./notification_pb";
import { file_avion_notification_v1_notification } from "./notification_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file avion/notification/v1/notification_service.proto.
 */
export const file_avion_notification_v1_notification_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_avion_common_v1_pagination, file_avion_notification_v1_notification, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * 通知作成リクエスト
 *
 * @generated from message avion.notification.v1.CreateNotificationRequest
 */
export type CreateNotificationRequest = Message<"avion.notification.v1.CreateNotificationRequest"> & {
  /**
   * 受信ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 通知タイプ
   *
   * @generated from field: avion.notification.v1.NotificationType type = 2;
   */
  type: NotificationType;

  /**
   * タイトル
   *
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * 本文
   *
   * @generated from field: string body = 4;
   */
  body: string;

  /**
   * 追加データ（JSON文字列形式）
   *
   * @generated from field: string data = 5;
   */
  data: string;

  /**
   * アクションURL
   *
   * @generated from field: string action_url = 6;
   */
  actionUrl: string;

  /**
   * 送信者ID（フォロー、いいね等の場合）
   *
   * @generated from field: string sender_id = 7;
   */
  senderId: string;

  /**
   * 関連エンティティID（Drop ID等）
   *
   * @generated from field: string entity_id = 8;
   */
  entityId: string;
};

/**
 * Describes the message avion.notification.v1.CreateNotificationRequest.
 * Use `create(CreateNotificationRequestSchema)` to create a new message.
 */
export const CreateNotificationRequestSchema: GenMessage<CreateNotificationRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 0);

/**
 * 通知作成レスポンス
 *
 * @generated from message avion.notification.v1.CreateNotificationResponse
 */
export type CreateNotificationResponse = Message<"avion.notification.v1.CreateNotificationResponse"> & {
  /**
   * 作成された通知
   *
   * @generated from field: avion.notification.v1.Notification notification = 1;
   */
  notification?: Notification;

  /**
   * 配信ステータス
   *
   * @generated from field: repeated avion.notification.v1.NotificationDelivery deliveries = 2;
   */
  deliveries: NotificationDelivery[];
};

/**
 * Describes the message avion.notification.v1.CreateNotificationResponse.
 * Use `create(CreateNotificationResponseSchema)` to create a new message.
 */
export const CreateNotificationResponseSchema: GenMessage<CreateNotificationResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 1);

/**
 * 通知取得リクエスト
 *
 * @generated from message avion.notification.v1.GetNotificationRequest
 */
export type GetNotificationRequest = Message<"avion.notification.v1.GetNotificationRequest"> & {
  /**
   * 通知ID
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;

  /**
   * ユーザーID（権限確認用）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.GetNotificationRequest.
 * Use `create(GetNotificationRequestSchema)` to create a new message.
 */
export const GetNotificationRequestSchema: GenMessage<GetNotificationRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 2);

/**
 * 通知取得レスポンス
 *
 * @generated from message avion.notification.v1.GetNotificationResponse
 */
export type GetNotificationResponse = Message<"avion.notification.v1.GetNotificationResponse"> & {
  /**
   * 通知
   *
   * @generated from field: avion.notification.v1.Notification notification = 1;
   */
  notification?: Notification;
};

/**
 * Describes the message avion.notification.v1.GetNotificationResponse.
 * Use `create(GetNotificationResponseSchema)` to create a new message.
 */
export const GetNotificationResponseSchema: GenMessage<GetNotificationResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 3);

/**
 * 通知一覧取得リクエスト
 *
 * @generated from message avion.notification.v1.ListNotificationsRequest
 */
export type ListNotificationsRequest = Message<"avion.notification.v1.ListNotificationsRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * ページネーション
   *
   * @generated from field: avion.common.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * フィルター
   *
   * @generated from field: avion.notification.v1.ListNotificationsFilter filter = 3;
   */
  filter?: ListNotificationsFilter;
};

/**
 * Describes the message avion.notification.v1.ListNotificationsRequest.
 * Use `create(ListNotificationsRequestSchema)` to create a new message.
 */
export const ListNotificationsRequestSchema: GenMessage<ListNotificationsRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 4);

/**
 * 通知一覧フィルター
 *
 * @generated from message avion.notification.v1.ListNotificationsFilter
 */
export type ListNotificationsFilter = Message<"avion.notification.v1.ListNotificationsFilter"> & {
  /**
   * 通知タイプでフィルター
   *
   * @generated from field: repeated avion.notification.v1.NotificationType types = 1;
   */
  types: NotificationType[];

  /**
   * 未読のみ表示
   *
   * @generated from field: bool unread_only = 2;
   */
  unreadOnly: boolean;

  /**
   * 開始日時
   *
   * @generated from field: google.protobuf.Timestamp from = 3;
   */
  from?: Timestamp;

  /**
   * 終了日時
   *
   * @generated from field: google.protobuf.Timestamp to = 4;
   */
  to?: Timestamp;

  /**
   * 送信者IDでフィルター
   *
   * @generated from field: repeated string sender_ids = 5;
   */
  senderIds: string[];

  /**
   * エンティティIDでフィルター
   *
   * @generated from field: repeated string entity_ids = 6;
   */
  entityIds: string[];

  /**
   * 既読のみ表示
   *
   * @generated from field: bool read_only = 7;
   */
  readOnly: boolean;

  /**
   * アクションURLパターンでフィルター（部分一致）
   *
   * @generated from field: string action_url_pattern = 8;
   */
  actionUrlPattern: string;

  /**
   * ソート順（created_at_desc, created_at_asc, read_at_desc, read_at_asc）
   *
   * @generated from field: string sort_by = 9;
   */
  sortBy: string;
};

/**
 * Describes the message avion.notification.v1.ListNotificationsFilter.
 * Use `create(ListNotificationsFilterSchema)` to create a new message.
 */
export const ListNotificationsFilterSchema: GenMessage<ListNotificationsFilter> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 5);

/**
 * 通知一覧取得レスポンス
 *
 * @generated from message avion.notification.v1.ListNotificationsResponse
 */
export type ListNotificationsResponse = Message<"avion.notification.v1.ListNotificationsResponse"> & {
  /**
   * 通知リスト
   *
   * @generated from field: repeated avion.notification.v1.Notification notifications = 1;
   */
  notifications: Notification[];

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message avion.notification.v1.ListNotificationsResponse.
 * Use `create(ListNotificationsResponseSchema)` to create a new message.
 */
export const ListNotificationsResponseSchema: GenMessage<ListNotificationsResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 6);

/**
 * 既読マークリクエスト
 *
 * @generated from message avion.notification.v1.MarkAsReadRequest
 */
export type MarkAsReadRequest = Message<"avion.notification.v1.MarkAsReadRequest"> & {
  /**
   * 通知ID
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.MarkAsReadRequest.
 * Use `create(MarkAsReadRequestSchema)` to create a new message.
 */
export const MarkAsReadRequestSchema: GenMessage<MarkAsReadRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 7);

/**
 * 既読マークレスポンス
 *
 * @generated from message avion.notification.v1.MarkAsReadResponse
 */
export type MarkAsReadResponse = Message<"avion.notification.v1.MarkAsReadResponse"> & {
  /**
   * 更新された通知
   *
   * @generated from field: avion.notification.v1.Notification notification = 1;
   */
  notification?: Notification;
};

/**
 * Describes the message avion.notification.v1.MarkAsReadResponse.
 * Use `create(MarkAsReadResponseSchema)` to create a new message.
 */
export const MarkAsReadResponseSchema: GenMessage<MarkAsReadResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 8);

/**
 * 全て既読マークリクエスト
 *
 * @generated from message avion.notification.v1.MarkAllAsReadRequest
 */
export type MarkAllAsReadRequest = Message<"avion.notification.v1.MarkAllAsReadRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 通知タイプでフィルター（省略時は全タイプ）
   *
   * @generated from field: repeated avion.notification.v1.NotificationType types = 2;
   */
  types: NotificationType[];

  /**
   * 指定日時以前の通知のみ（省略時は全て）
   *
   * @generated from field: google.protobuf.Timestamp before = 3;
   */
  before?: Timestamp;
};

/**
 * Describes the message avion.notification.v1.MarkAllAsReadRequest.
 * Use `create(MarkAllAsReadRequestSchema)` to create a new message.
 */
export const MarkAllAsReadRequestSchema: GenMessage<MarkAllAsReadRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 9);

/**
 * 全て既読マークレスポンス
 *
 * @generated from message avion.notification.v1.MarkAllAsReadResponse
 */
export type MarkAllAsReadResponse = Message<"avion.notification.v1.MarkAllAsReadResponse"> & {
  /**
   * 既読にした通知数
   *
   * @generated from field: int32 marked_count = 1;
   */
  markedCount: number;
};

/**
 * Describes the message avion.notification.v1.MarkAllAsReadResponse.
 * Use `create(MarkAllAsReadResponseSchema)` to create a new message.
 */
export const MarkAllAsReadResponseSchema: GenMessage<MarkAllAsReadResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 10);

/**
 * バッチ既読マークリクエスト
 *
 * @generated from message avion.notification.v1.BatchMarkAsReadRequest
 */
export type BatchMarkAsReadRequest = Message<"avion.notification.v1.BatchMarkAsReadRequest"> & {
  /**
   * 既読にする通知IDリスト
   *
   * @generated from field: repeated string notification_ids = 1;
   */
  notificationIds: string[];

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.BatchMarkAsReadRequest.
 * Use `create(BatchMarkAsReadRequestSchema)` to create a new message.
 */
export const BatchMarkAsReadRequestSchema: GenMessage<BatchMarkAsReadRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 11);

/**
 * バッチ既読マークレスポンス
 *
 * @generated from message avion.notification.v1.BatchMarkAsReadResponse
 */
export type BatchMarkAsReadResponse = Message<"avion.notification.v1.BatchMarkAsReadResponse"> & {
  /**
   * 成功した通知IDリスト
   *
   * @generated from field: repeated string succeeded_ids = 1;
   */
  succeededIds: string[];

  /**
   * 失敗した通知IDとエラーメッセージ
   *
   * @generated from field: map<string, string> failed_ids = 2;
   */
  failedIds: { [key: string]: string };

  /**
   * 成功数
   *
   * @generated from field: int32 success_count = 3;
   */
  successCount: number;

  /**
   * 失敗数
   *
   * @generated from field: int32 failure_count = 4;
   */
  failureCount: number;
};

/**
 * Describes the message avion.notification.v1.BatchMarkAsReadResponse.
 * Use `create(BatchMarkAsReadResponseSchema)` to create a new message.
 */
export const BatchMarkAsReadResponseSchema: GenMessage<BatchMarkAsReadResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 12);

/**
 * 通知削除リクエスト
 *
 * @generated from message avion.notification.v1.DeleteNotificationRequest
 */
export type DeleteNotificationRequest = Message<"avion.notification.v1.DeleteNotificationRequest"> & {
  /**
   * 通知ID
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.DeleteNotificationRequest.
 * Use `create(DeleteNotificationRequestSchema)` to create a new message.
 */
export const DeleteNotificationRequestSchema: GenMessage<DeleteNotificationRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 13);

/**
 * 通知削除レスポンス
 *
 * @generated from message avion.notification.v1.DeleteNotificationResponse
 */
export type DeleteNotificationResponse = Message<"avion.notification.v1.DeleteNotificationResponse"> & {
  /**
   * 削除成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 削除された通知ID
   *
   * @generated from field: string deleted_notification_id = 2;
   */
  deletedNotificationId: string;
};

/**
 * Describes the message avion.notification.v1.DeleteNotificationResponse.
 * Use `create(DeleteNotificationResponseSchema)` to create a new message.
 */
export const DeleteNotificationResponseSchema: GenMessage<DeleteNotificationResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 14);

/**
 * バッチ通知削除リクエスト
 *
 * @generated from message avion.notification.v1.BatchDeleteNotificationsRequest
 */
export type BatchDeleteNotificationsRequest = Message<"avion.notification.v1.BatchDeleteNotificationsRequest"> & {
  /**
   * 削除する通知IDリスト
   *
   * @generated from field: repeated string notification_ids = 1;
   */
  notificationIds: string[];

  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.BatchDeleteNotificationsRequest.
 * Use `create(BatchDeleteNotificationsRequestSchema)` to create a new message.
 */
export const BatchDeleteNotificationsRequestSchema: GenMessage<BatchDeleteNotificationsRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 15);

/**
 * バッチ通知削除レスポンス
 *
 * @generated from message avion.notification.v1.BatchDeleteNotificationsResponse
 */
export type BatchDeleteNotificationsResponse = Message<"avion.notification.v1.BatchDeleteNotificationsResponse"> & {
  /**
   * 成功した通知IDリスト
   *
   * @generated from field: repeated string succeeded_ids = 1;
   */
  succeededIds: string[];

  /**
   * 失敗した通知IDとエラーメッセージ
   *
   * @generated from field: map<string, string> failed_ids = 2;
   */
  failedIds: { [key: string]: string };

  /**
   * 成功数
   *
   * @generated from field: int32 success_count = 3;
   */
  successCount: number;

  /**
   * 失敗数
   *
   * @generated from field: int32 failure_count = 4;
   */
  failureCount: number;
};

/**
 * Describes the message avion.notification.v1.BatchDeleteNotificationsResponse.
 * Use `create(BatchDeleteNotificationsResponseSchema)` to create a new message.
 */
export const BatchDeleteNotificationsResponseSchema: GenMessage<BatchDeleteNotificationsResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 16);

/**
 * 通知設定取得リクエスト
 *
 * @generated from message avion.notification.v1.GetNotificationPreferencesRequest
 */
export type GetNotificationPreferencesRequest = Message<"avion.notification.v1.GetNotificationPreferencesRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.GetNotificationPreferencesRequest.
 * Use `create(GetNotificationPreferencesRequestSchema)` to create a new message.
 */
export const GetNotificationPreferencesRequestSchema: GenMessage<GetNotificationPreferencesRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 17);

/**
 * 通知設定取得レスポンス
 *
 * @generated from message avion.notification.v1.GetNotificationPreferencesResponse
 */
export type GetNotificationPreferencesResponse = Message<"avion.notification.v1.GetNotificationPreferencesResponse"> & {
  /**
   * 通知設定
   *
   * @generated from field: avion.notification.v1.NotificationPreference preferences = 1;
   */
  preferences?: NotificationPreference;
};

/**
 * Describes the message avion.notification.v1.GetNotificationPreferencesResponse.
 * Use `create(GetNotificationPreferencesResponseSchema)` to create a new message.
 */
export const GetNotificationPreferencesResponseSchema: GenMessage<GetNotificationPreferencesResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 18);

/**
 * 通知設定更新リクエスト
 *
 * @generated from message avion.notification.v1.UpdateNotificationPreferencesRequest
 */
export type UpdateNotificationPreferencesRequest = Message<"avion.notification.v1.UpdateNotificationPreferencesRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 更新するフィールドのマスク
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * 通知設定
   *
   * @generated from field: avion.notification.v1.NotificationPreference preferences = 3;
   */
  preferences?: NotificationPreference;
};

/**
 * Describes the message avion.notification.v1.UpdateNotificationPreferencesRequest.
 * Use `create(UpdateNotificationPreferencesRequestSchema)` to create a new message.
 */
export const UpdateNotificationPreferencesRequestSchema: GenMessage<UpdateNotificationPreferencesRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 19);

/**
 * 通知設定更新レスポンス
 *
 * @generated from message avion.notification.v1.UpdateNotificationPreferencesResponse
 */
export type UpdateNotificationPreferencesResponse = Message<"avion.notification.v1.UpdateNotificationPreferencesResponse"> & {
  /**
   * 更新された通知設定
   *
   * @generated from field: avion.notification.v1.NotificationPreference preferences = 1;
   */
  preferences?: NotificationPreference;
};

/**
 * Describes the message avion.notification.v1.UpdateNotificationPreferencesResponse.
 * Use `create(UpdateNotificationPreferencesResponseSchema)` to create a new message.
 */
export const UpdateNotificationPreferencesResponseSchema: GenMessage<UpdateNotificationPreferencesResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 20);

/**
 * 通知送信リクエスト（内部用）
 *
 * @generated from message avion.notification.v1.SendNotificationRequest
 */
export type SendNotificationRequest = Message<"avion.notification.v1.SendNotificationRequest"> & {
  /**
   * 通知ID
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;

  /**
   * 送信チャンネル
   *
   * @generated from field: repeated avion.notification.v1.NotificationChannel channels = 2;
   */
  channels: NotificationChannel[];

  /**
   * 即座に送信（キューイングしない）
   *
   * @generated from field: bool immediate = 3;
   */
  immediate: boolean;
};

/**
 * Describes the message avion.notification.v1.SendNotificationRequest.
 * Use `create(SendNotificationRequestSchema)` to create a new message.
 */
export const SendNotificationRequestSchema: GenMessage<SendNotificationRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 21);

/**
 * 通知送信レスポンス
 *
 * @generated from message avion.notification.v1.SendNotificationResponse
 */
export type SendNotificationResponse = Message<"avion.notification.v1.SendNotificationResponse"> & {
  /**
   * 配信ステータス
   *
   * @generated from field: repeated avion.notification.v1.NotificationDelivery deliveries = 1;
   */
  deliveries: NotificationDelivery[];
};

/**
 * Describes the message avion.notification.v1.SendNotificationResponse.
 * Use `create(SendNotificationResponseSchema)` to create a new message.
 */
export const SendNotificationResponseSchema: GenMessage<SendNotificationResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 22);

/**
 * 通知ストリームリクエスト（SSE/WebSocket用）
 *
 * @generated from message avion.notification.v1.StreamNotificationsRequest
 */
export type StreamNotificationsRequest = Message<"avion.notification.v1.StreamNotificationsRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 通知タイプフィルター（省略時は全タイプ）
   *
   * @generated from field: repeated avion.notification.v1.NotificationType types = 2;
   */
  types: NotificationType[];

  /**
   * 開始位置（既存通知ID、省略時は現在時刻から）
   *
   * @generated from field: string after_notification_id = 3;
   */
  afterNotificationId: string;
};

/**
 * Describes the message avion.notification.v1.StreamNotificationsRequest.
 * Use `create(StreamNotificationsRequestSchema)` to create a new message.
 */
export const StreamNotificationsRequestSchema: GenMessage<StreamNotificationsRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 23);

/**
 * 通知ストリームレスポンス
 *
 * @generated from message avion.notification.v1.StreamNotificationsResponse
 */
export type StreamNotificationsResponse = Message<"avion.notification.v1.StreamNotificationsResponse"> & {
  /**
   * 通知
   *
   * @generated from field: avion.notification.v1.Notification notification = 1;
   */
  notification?: Notification;

  /**
   * イベントタイプ（new, update, delete）
   *
   * @generated from field: string event_type = 2;
   */
  eventType: string;

  /**
   * タイムスタンプ
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message avion.notification.v1.StreamNotificationsResponse.
 * Use `create(StreamNotificationsResponseSchema)` to create a new message.
 */
export const StreamNotificationsResponseSchema: GenMessage<StreamNotificationsResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 24);

/**
 * 未読数取得リクエスト
 *
 * @generated from message avion.notification.v1.GetUnreadCountRequest
 */
export type GetUnreadCountRequest = Message<"avion.notification.v1.GetUnreadCountRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 通知タイプ別に取得するか
   *
   * @generated from field: bool by_type = 2;
   */
  byType: boolean;
};

/**
 * Describes the message avion.notification.v1.GetUnreadCountRequest.
 * Use `create(GetUnreadCountRequestSchema)` to create a new message.
 */
export const GetUnreadCountRequestSchema: GenMessage<GetUnreadCountRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 25);

/**
 * 未読数取得レスポンス
 *
 * @generated from message avion.notification.v1.GetUnreadCountResponse
 */
export type GetUnreadCountResponse = Message<"avion.notification.v1.GetUnreadCountResponse"> & {
  /**
   * 未読数情報
   *
   * @generated from field: avion.notification.v1.UnreadCount unread_count = 1;
   */
  unreadCount?: UnreadCount;
};

/**
 * Describes the message avion.notification.v1.GetUnreadCountResponse.
 * Use `create(GetUnreadCountResponseSchema)` to create a new message.
 */
export const GetUnreadCountResponseSchema: GenMessage<GetUnreadCountResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 26);

/**
 * バッチ通知作成リクエスト
 *
 * @generated from message avion.notification.v1.BatchCreateNotificationsRequest
 */
export type BatchCreateNotificationsRequest = Message<"avion.notification.v1.BatchCreateNotificationsRequest"> & {
  /**
   * 通知作成リクエストのリスト
   *
   * @generated from field: repeated avion.notification.v1.CreateNotificationRequest notifications = 1;
   */
  notifications: CreateNotificationRequest[];

  /**
   * トランザクション処理（一つでも失敗したら全てロールバック）
   *
   * @generated from field: bool transactional = 2;
   */
  transactional: boolean;
};

/**
 * Describes the message avion.notification.v1.BatchCreateNotificationsRequest.
 * Use `create(BatchCreateNotificationsRequestSchema)` to create a new message.
 */
export const BatchCreateNotificationsRequestSchema: GenMessage<BatchCreateNotificationsRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 27);

/**
 * バッチ通知作成レスポンス
 *
 * @generated from message avion.notification.v1.BatchCreateNotificationsResponse
 */
export type BatchCreateNotificationsResponse = Message<"avion.notification.v1.BatchCreateNotificationsResponse"> & {
  /**
   * 作成された通知リスト
   *
   * @generated from field: repeated avion.notification.v1.Notification notifications = 1;
   */
  notifications: Notification[];

  /**
   * 失敗した通知のインデックスとエラー
   *
   * @generated from field: map<int32, string> failures = 2;
   */
  failures: { [key: number]: string };

  /**
   * 成功数
   *
   * @generated from field: int32 success_count = 3;
   */
  successCount: number;

  /**
   * 失敗数
   *
   * @generated from field: int32 failure_count = 4;
   */
  failureCount: number;
};

/**
 * Describes the message avion.notification.v1.BatchCreateNotificationsResponse.
 * Use `create(BatchCreateNotificationsResponseSchema)` to create a new message.
 */
export const BatchCreateNotificationsResponseSchema: GenMessage<BatchCreateNotificationsResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 28);

/**
 * WebSocketストリームリクエスト（双方向ストリーミング）
 *
 * @generated from message avion.notification.v1.WebSocketStreamRequest
 */
export type WebSocketStreamRequest = Message<"avion.notification.v1.WebSocketStreamRequest"> & {
  /**
   * リクエストID（一意識別子）
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * ユーザーID（初回接続時に必須）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * メッセージ
   *
   * @generated from field: avion.notification.v1.WebSocketMessage message = 3;
   */
  message?: WebSocketMessage;
};

/**
 * Describes the message avion.notification.v1.WebSocketStreamRequest.
 * Use `create(WebSocketStreamRequestSchema)` to create a new message.
 */
export const WebSocketStreamRequestSchema: GenMessage<WebSocketStreamRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 29);

/**
 * WebSocketストリームレスポンス
 *
 * @generated from message avion.notification.v1.WebSocketStreamResponse
 */
export type WebSocketStreamResponse = Message<"avion.notification.v1.WebSocketStreamResponse"> & {
  /**
   * レスポンスID（一意識別子）
   *
   * @generated from field: string response_id = 1;
   */
  responseId: string;

  /**
   * リクエストIDへの参照（該当する場合）
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * メッセージ
   *
   * @generated from field: avion.notification.v1.WebSocketMessage message = 3;
   */
  message?: WebSocketMessage;
};

/**
 * Describes the message avion.notification.v1.WebSocketStreamResponse.
 * Use `create(WebSocketStreamResponseSchema)` to create a new message.
 */
export const WebSocketStreamResponseSchema: GenMessage<WebSocketStreamResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 30);

/**
 * WebSocket接続管理リクエスト
 *
 * @generated from message avion.notification.v1.ManageWebSocketConnectionRequest
 */
export type ManageWebSocketConnectionRequest = Message<"avion.notification.v1.ManageWebSocketConnectionRequest"> & {
  /**
   * 接続ID
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * 操作タイプ
   *
   * @generated from field: avion.notification.v1.ConnectionAction action = 2;
   */
  action: ConnectionAction;

  /**
   * 理由（切断時など）
   *
   * @generated from field: string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message avion.notification.v1.ManageWebSocketConnectionRequest.
 * Use `create(ManageWebSocketConnectionRequestSchema)` to create a new message.
 */
export const ManageWebSocketConnectionRequestSchema: GenMessage<ManageWebSocketConnectionRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 31);

/**
 * WebSocket接続管理レスポンス
 *
 * @generated from message avion.notification.v1.ManageWebSocketConnectionResponse
 */
export type ManageWebSocketConnectionResponse = Message<"avion.notification.v1.ManageWebSocketConnectionResponse"> & {
  /**
   * 成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 更新された接続情報
   *
   * @generated from field: avion.notification.v1.WebSocketConnection connection = 2;
   */
  connection?: WebSocketConnection;
};

/**
 * Describes the message avion.notification.v1.ManageWebSocketConnectionResponse.
 * Use `create(ManageWebSocketConnectionResponseSchema)` to create a new message.
 */
export const ManageWebSocketConnectionResponseSchema: GenMessage<ManageWebSocketConnectionResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 32);

/**
 * アクティブ接続一覧取得リクエスト
 *
 * @generated from message avion.notification.v1.ListActiveConnectionsRequest
 */
export type ListActiveConnectionsRequest = Message<"avion.notification.v1.ListActiveConnectionsRequest"> & {
  /**
   * ユーザーIDでフィルター（オプション）
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * プラットフォームでフィルター（オプション）
   *
   * @generated from field: string platform = 2;
   */
  platform: string;

  /**
   * ページネーション
   *
   * @generated from field: avion.common.v1.PaginationRequest pagination = 3;
   */
  pagination?: PaginationRequest;
};

/**
 * Describes the message avion.notification.v1.ListActiveConnectionsRequest.
 * Use `create(ListActiveConnectionsRequestSchema)` to create a new message.
 */
export const ListActiveConnectionsRequestSchema: GenMessage<ListActiveConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 33);

/**
 * アクティブ接続一覧取得レスポンス
 *
 * @generated from message avion.notification.v1.ListActiveConnectionsResponse
 */
export type ListActiveConnectionsResponse = Message<"avion.notification.v1.ListActiveConnectionsResponse"> & {
  /**
   * 接続リスト
   *
   * @generated from field: repeated avion.notification.v1.WebSocketConnection connections = 1;
   */
  connections: WebSocketConnection[];

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  /**
   * 総接続数
   *
   * @generated from field: int32 total_connections = 3;
   */
  totalConnections: number;
};

/**
 * Describes the message avion.notification.v1.ListActiveConnectionsResponse.
 * Use `create(ListActiveConnectionsResponseSchema)` to create a new message.
 */
export const ListActiveConnectionsResponseSchema: GenMessage<ListActiveConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 34);

/**
 * WebSocketメッセージ送信リクエスト
 *
 * @generated from message avion.notification.v1.SendWebSocketMessageRequest
 */
export type SendWebSocketMessageRequest = Message<"avion.notification.v1.SendWebSocketMessageRequest"> & {
  /**
   * 宛先ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * 送信するメッセージ
   *
   * @generated from field: avion.notification.v1.WebSocketMessage message = 2;
   */
  message?: WebSocketMessage;

  /**
   * 特定の接続IDのみに送信（オプション）
   *
   * @generated from field: string connection_id = 3;
   */
  connectionId: string;

  /**
   * 配信保証レベル
   *
   * @generated from field: avion.notification.v1.DeliveryGuarantee delivery_guarantee = 4;
   */
  deliveryGuarantee: DeliveryGuarantee;
};

/**
 * Describes the message avion.notification.v1.SendWebSocketMessageRequest.
 * Use `create(SendWebSocketMessageRequestSchema)` to create a new message.
 */
export const SendWebSocketMessageRequestSchema: GenMessage<SendWebSocketMessageRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 35);

/**
 * WebSocketメッセージ送信レスポンス
 *
 * @generated from message avion.notification.v1.SendWebSocketMessageResponse
 */
export type SendWebSocketMessageResponse = Message<"avion.notification.v1.SendWebSocketMessageResponse"> & {
  /**
   * 送信成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 配信された接続数
   *
   * @generated from field: int32 delivered_count = 2;
   */
  deliveredCount: number;

  /**
   * 失敗した接続ID
   *
   * @generated from field: repeated string failed_connection_ids = 3;
   */
  failedConnectionIds: string[];
};

/**
 * Describes the message avion.notification.v1.SendWebSocketMessageResponse.
 * Use `create(SendWebSocketMessageResponseSchema)` to create a new message.
 */
export const SendWebSocketMessageResponseSchema: GenMessage<SendWebSocketMessageResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 36);

/**
 * ブロードキャストメッセージ送信リクエスト
 *
 * @generated from message avion.notification.v1.BroadcastWebSocketMessageRequest
 */
export type BroadcastWebSocketMessageRequest = Message<"avion.notification.v1.BroadcastWebSocketMessageRequest"> & {
  /**
   * 送信するメッセージ
   *
   * @generated from field: avion.notification.v1.WebSocketMessage message = 1;
   */
  message?: WebSocketMessage;

  /**
   * フィルター条件
   *
   * @generated from field: avion.notification.v1.BroadcastFilter filter = 2;
   */
  filter?: BroadcastFilter;

  /**
   * 配信保証レベル
   *
   * @generated from field: avion.notification.v1.DeliveryGuarantee delivery_guarantee = 3;
   */
  deliveryGuarantee: DeliveryGuarantee;
};

/**
 * Describes the message avion.notification.v1.BroadcastWebSocketMessageRequest.
 * Use `create(BroadcastWebSocketMessageRequestSchema)` to create a new message.
 */
export const BroadcastWebSocketMessageRequestSchema: GenMessage<BroadcastWebSocketMessageRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 37);

/**
 * ブロードキャストフィルター
 *
 * @generated from message avion.notification.v1.BroadcastFilter
 */
export type BroadcastFilter = Message<"avion.notification.v1.BroadcastFilter"> & {
  /**
   * 通知タイプでフィルター
   *
   * @generated from field: repeated avion.notification.v1.NotificationType notification_types = 1;
   */
  notificationTypes: NotificationType[];

  /**
   * プラットフォームでフィルター
   *
   * @generated from field: repeated string platforms = 2;
   */
  platforms: string[];

  /**
   * チャンネルでフィルター
   *
   * @generated from field: repeated string channels = 3;
   */
  channels: string[];

  /**
   * ユーザーIDリスト（特定ユーザーグループ）
   *
   * @generated from field: repeated string user_ids = 4;
   */
  userIds: string[];

  /**
   * 除外するユーザーID
   *
   * @generated from field: repeated string exclude_user_ids = 5;
   */
  excludeUserIds: string[];
};

/**
 * Describes the message avion.notification.v1.BroadcastFilter.
 * Use `create(BroadcastFilterSchema)` to create a new message.
 */
export const BroadcastFilterSchema: GenMessage<BroadcastFilter> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 38);

/**
 * ブロードキャストメッセージ送信レスポンス
 *
 * @generated from message avion.notification.v1.BroadcastWebSocketMessageResponse
 */
export type BroadcastWebSocketMessageResponse = Message<"avion.notification.v1.BroadcastWebSocketMessageResponse"> & {
  /**
   * 送信成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 配信された接続数
   *
   * @generated from field: int32 delivered_count = 2;
   */
  deliveredCount: number;

  /**
   * 配信されたユーザー数
   *
   * @generated from field: int32 delivered_user_count = 3;
   */
  deliveredUserCount: number;

  /**
   * エラーメッセージ（失敗時）
   *
   * @generated from field: string error_message = 4;
   */
  errorMessage: string;
};

/**
 * Describes the message avion.notification.v1.BroadcastWebSocketMessageResponse.
 * Use `create(BroadcastWebSocketMessageResponseSchema)` to create a new message.
 */
export const BroadcastWebSocketMessageResponseSchema: GenMessage<BroadcastWebSocketMessageResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 39);

/**
 * プッシュデバイス登録リクエスト
 *
 * @generated from message avion.notification.v1.RegisterPushDeviceRequest
 */
export type RegisterPushDeviceRequest = Message<"avion.notification.v1.RegisterPushDeviceRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * デバイストークン（FCM/APNs）
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * プラットフォーム（ios, android, web）
   *
   * @generated from field: string platform = 3;
   */
  platform: string;

  /**
   * デバイス名
   *
   * @generated from field: string device_name = 4;
   */
  deviceName: string;

  /**
   * デバイスメタデータ（オプション）
   *
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message avion.notification.v1.RegisterPushDeviceRequest.
 * Use `create(RegisterPushDeviceRequestSchema)` to create a new message.
 */
export const RegisterPushDeviceRequestSchema: GenMessage<RegisterPushDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 40);

/**
 * プッシュデバイス登録レスポンス
 *
 * @generated from message avion.notification.v1.RegisterPushDeviceResponse
 */
export type RegisterPushDeviceResponse = Message<"avion.notification.v1.RegisterPushDeviceResponse"> & {
  /**
   * 登録されたデバイス情報
   *
   * @generated from field: avion.notification.v1.PushDevice device = 1;
   */
  device?: PushDevice;
};

/**
 * Describes the message avion.notification.v1.RegisterPushDeviceResponse.
 * Use `create(RegisterPushDeviceResponseSchema)` to create a new message.
 */
export const RegisterPushDeviceResponseSchema: GenMessage<RegisterPushDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 41);

/**
 * プッシュデバイス更新リクエスト
 *
 * @generated from message avion.notification.v1.UpdatePushDeviceRequest
 */
export type UpdatePushDeviceRequest = Message<"avion.notification.v1.UpdatePushDeviceRequest"> & {
  /**
   * デバイスID
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * ユーザーID（権限確認用）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * 更新するフィールドのマスク
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  /**
   * 更新するデバイス情報
   *
   * @generated from field: avion.notification.v1.PushDevice device = 4;
   */
  device?: PushDevice;
};

/**
 * Describes the message avion.notification.v1.UpdatePushDeviceRequest.
 * Use `create(UpdatePushDeviceRequestSchema)` to create a new message.
 */
export const UpdatePushDeviceRequestSchema: GenMessage<UpdatePushDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 42);

/**
 * プッシュデバイス更新レスポンス
 *
 * @generated from message avion.notification.v1.UpdatePushDeviceResponse
 */
export type UpdatePushDeviceResponse = Message<"avion.notification.v1.UpdatePushDeviceResponse"> & {
  /**
   * 更新されたデバイス情報
   *
   * @generated from field: avion.notification.v1.PushDevice device = 1;
   */
  device?: PushDevice;
};

/**
 * Describes the message avion.notification.v1.UpdatePushDeviceResponse.
 * Use `create(UpdatePushDeviceResponseSchema)` to create a new message.
 */
export const UpdatePushDeviceResponseSchema: GenMessage<UpdatePushDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 43);

/**
 * プッシュデバイス削除リクエスト
 *
 * @generated from message avion.notification.v1.DeletePushDeviceRequest
 */
export type DeletePushDeviceRequest = Message<"avion.notification.v1.DeletePushDeviceRequest"> & {
  /**
   * デバイスID
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * ユーザーID（権限確認用）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.DeletePushDeviceRequest.
 * Use `create(DeletePushDeviceRequestSchema)` to create a new message.
 */
export const DeletePushDeviceRequestSchema: GenMessage<DeletePushDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 44);

/**
 * プッシュデバイス削除レスポンス
 *
 * @generated from message avion.notification.v1.DeletePushDeviceResponse
 */
export type DeletePushDeviceResponse = Message<"avion.notification.v1.DeletePushDeviceResponse"> & {
  /**
   * 削除成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 削除されたデバイスID
   *
   * @generated from field: string deleted_device_id = 2;
   */
  deletedDeviceId: string;
};

/**
 * Describes the message avion.notification.v1.DeletePushDeviceResponse.
 * Use `create(DeletePushDeviceResponseSchema)` to create a new message.
 */
export const DeletePushDeviceResponseSchema: GenMessage<DeletePushDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 45);

/**
 * プッシュデバイス一覧取得リクエスト
 *
 * @generated from message avion.notification.v1.ListPushDevicesRequest
 */
export type ListPushDevicesRequest = Message<"avion.notification.v1.ListPushDevicesRequest"> & {
  /**
   * ユーザーID
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * プラットフォームでフィルター（オプション）
   *
   * @generated from field: string platform = 2;
   */
  platform: string;

  /**
   * アクティブなデバイスのみ取得
   *
   * @generated from field: bool active_only = 3;
   */
  activeOnly: boolean;

  /**
   * ページネーション
   *
   * @generated from field: avion.common.v1.PaginationRequest pagination = 4;
   */
  pagination?: PaginationRequest;
};

/**
 * Describes the message avion.notification.v1.ListPushDevicesRequest.
 * Use `create(ListPushDevicesRequestSchema)` to create a new message.
 */
export const ListPushDevicesRequestSchema: GenMessage<ListPushDevicesRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 46);

/**
 * プッシュデバイス一覧取得レスポンス
 *
 * @generated from message avion.notification.v1.ListPushDevicesResponse
 */
export type ListPushDevicesResponse = Message<"avion.notification.v1.ListPushDevicesResponse"> & {
  /**
   * デバイスリスト
   *
   * @generated from field: repeated avion.notification.v1.PushDevice devices = 1;
   */
  devices: PushDevice[];

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message avion.notification.v1.ListPushDevicesResponse.
 * Use `create(ListPushDevicesResponseSchema)` to create a new message.
 */
export const ListPushDevicesResponseSchema: GenMessage<ListPushDevicesResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 47);

/**
 * プッシュデバイス取得リクエスト
 *
 * @generated from message avion.notification.v1.GetPushDeviceRequest
 */
export type GetPushDeviceRequest = Message<"avion.notification.v1.GetPushDeviceRequest"> & {
  /**
   * デバイスID
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * ユーザーID（権限確認用）
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message avion.notification.v1.GetPushDeviceRequest.
 * Use `create(GetPushDeviceRequestSchema)` to create a new message.
 */
export const GetPushDeviceRequestSchema: GenMessage<GetPushDeviceRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 48);

/**
 * プッシュデバイス取得レスポンス
 *
 * @generated from message avion.notification.v1.GetPushDeviceResponse
 */
export type GetPushDeviceResponse = Message<"avion.notification.v1.GetPushDeviceResponse"> & {
  /**
   * デバイス情報
   *
   * @generated from field: avion.notification.v1.PushDevice device = 1;
   */
  device?: PushDevice;
};

/**
 * Describes the message avion.notification.v1.GetPushDeviceResponse.
 * Use `create(GetPushDeviceResponseSchema)` to create a new message.
 */
export const GetPushDeviceResponseSchema: GenMessage<GetPushDeviceResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 49);

/**
 * 通知テンプレート作成リクエスト
 *
 * @generated from message avion.notification.v1.CreateNotificationTemplateRequest
 */
export type CreateNotificationTemplateRequest = Message<"avion.notification.v1.CreateNotificationTemplateRequest"> & {
  /**
   * テンプレート名
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * 通知タイプ
   *
   * @generated from field: avion.notification.v1.NotificationType type = 2;
   */
  type: NotificationType;

  /**
   * タイトルテンプレート
   *
   * @generated from field: string title_template = 3;
   */
  titleTemplate: string;

  /**
   * 本文テンプレート
   *
   * @generated from field: string body_template = 4;
   */
  bodyTemplate: string;

  /**
   * デフォルトアクションURLパターン
   *
   * @generated from field: string action_url_pattern = 5;
   */
  actionUrlPattern: string;

  /**
   * テンプレートメタデータ
   *
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message avion.notification.v1.CreateNotificationTemplateRequest.
 * Use `create(CreateNotificationTemplateRequestSchema)` to create a new message.
 */
export const CreateNotificationTemplateRequestSchema: GenMessage<CreateNotificationTemplateRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 50);

/**
 * 通知テンプレート作成レスポンス
 *
 * @generated from message avion.notification.v1.CreateNotificationTemplateResponse
 */
export type CreateNotificationTemplateResponse = Message<"avion.notification.v1.CreateNotificationTemplateResponse"> & {
  /**
   * 作成されたテンプレート
   *
   * @generated from field: avion.notification.v1.NotificationTemplate template = 1;
   */
  template?: NotificationTemplate;
};

/**
 * Describes the message avion.notification.v1.CreateNotificationTemplateResponse.
 * Use `create(CreateNotificationTemplateResponseSchema)` to create a new message.
 */
export const CreateNotificationTemplateResponseSchema: GenMessage<CreateNotificationTemplateResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 51);

/**
 * 通知テンプレート取得リクエスト
 *
 * @generated from message avion.notification.v1.GetNotificationTemplateRequest
 */
export type GetNotificationTemplateRequest = Message<"avion.notification.v1.GetNotificationTemplateRequest"> & {
  /**
   * テンプレートID
   *
   * @generated from field: string template_id = 1;
   */
  templateId: string;
};

/**
 * Describes the message avion.notification.v1.GetNotificationTemplateRequest.
 * Use `create(GetNotificationTemplateRequestSchema)` to create a new message.
 */
export const GetNotificationTemplateRequestSchema: GenMessage<GetNotificationTemplateRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 52);

/**
 * 通知テンプレート取得レスポンス
 *
 * @generated from message avion.notification.v1.GetNotificationTemplateResponse
 */
export type GetNotificationTemplateResponse = Message<"avion.notification.v1.GetNotificationTemplateResponse"> & {
  /**
   * テンプレート
   *
   * @generated from field: avion.notification.v1.NotificationTemplate template = 1;
   */
  template?: NotificationTemplate;
};

/**
 * Describes the message avion.notification.v1.GetNotificationTemplateResponse.
 * Use `create(GetNotificationTemplateResponseSchema)` to create a new message.
 */
export const GetNotificationTemplateResponseSchema: GenMessage<GetNotificationTemplateResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 53);

/**
 * 通知テンプレート更新リクエスト
 *
 * @generated from message avion.notification.v1.UpdateNotificationTemplateRequest
 */
export type UpdateNotificationTemplateRequest = Message<"avion.notification.v1.UpdateNotificationTemplateRequest"> & {
  /**
   * テンプレートID
   *
   * @generated from field: string template_id = 1;
   */
  templateId: string;

  /**
   * 更新するフィールドのマスク
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * 更新するテンプレート情報
   *
   * @generated from field: avion.notification.v1.NotificationTemplate template = 3;
   */
  template?: NotificationTemplate;
};

/**
 * Describes the message avion.notification.v1.UpdateNotificationTemplateRequest.
 * Use `create(UpdateNotificationTemplateRequestSchema)` to create a new message.
 */
export const UpdateNotificationTemplateRequestSchema: GenMessage<UpdateNotificationTemplateRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 54);

/**
 * 通知テンプレート更新レスポンス
 *
 * @generated from message avion.notification.v1.UpdateNotificationTemplateResponse
 */
export type UpdateNotificationTemplateResponse = Message<"avion.notification.v1.UpdateNotificationTemplateResponse"> & {
  /**
   * 更新されたテンプレート
   *
   * @generated from field: avion.notification.v1.NotificationTemplate template = 1;
   */
  template?: NotificationTemplate;
};

/**
 * Describes the message avion.notification.v1.UpdateNotificationTemplateResponse.
 * Use `create(UpdateNotificationTemplateResponseSchema)` to create a new message.
 */
export const UpdateNotificationTemplateResponseSchema: GenMessage<UpdateNotificationTemplateResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 55);

/**
 * 通知テンプレート削除リクエスト
 *
 * @generated from message avion.notification.v1.DeleteNotificationTemplateRequest
 */
export type DeleteNotificationTemplateRequest = Message<"avion.notification.v1.DeleteNotificationTemplateRequest"> & {
  /**
   * テンプレートID
   *
   * @generated from field: string template_id = 1;
   */
  templateId: string;
};

/**
 * Describes the message avion.notification.v1.DeleteNotificationTemplateRequest.
 * Use `create(DeleteNotificationTemplateRequestSchema)` to create a new message.
 */
export const DeleteNotificationTemplateRequestSchema: GenMessage<DeleteNotificationTemplateRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 56);

/**
 * 通知テンプレート削除レスポンス
 *
 * @generated from message avion.notification.v1.DeleteNotificationTemplateResponse
 */
export type DeleteNotificationTemplateResponse = Message<"avion.notification.v1.DeleteNotificationTemplateResponse"> & {
  /**
   * 削除成功フラグ
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * 削除されたテンプレートID
   *
   * @generated from field: string deleted_template_id = 2;
   */
  deletedTemplateId: string;
};

/**
 * Describes the message avion.notification.v1.DeleteNotificationTemplateResponse.
 * Use `create(DeleteNotificationTemplateResponseSchema)` to create a new message.
 */
export const DeleteNotificationTemplateResponseSchema: GenMessage<DeleteNotificationTemplateResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 57);

/**
 * 通知テンプレート一覧取得リクエスト
 *
 * @generated from message avion.notification.v1.ListNotificationTemplatesRequest
 */
export type ListNotificationTemplatesRequest = Message<"avion.notification.v1.ListNotificationTemplatesRequest"> & {
  /**
   * 通知タイプでフィルター（オプション）
   *
   * @generated from field: avion.notification.v1.NotificationType type = 1;
   */
  type: NotificationType;

  /**
   * ページネーション
   *
   * @generated from field: avion.common.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;
};

/**
 * Describes the message avion.notification.v1.ListNotificationTemplatesRequest.
 * Use `create(ListNotificationTemplatesRequestSchema)` to create a new message.
 */
export const ListNotificationTemplatesRequestSchema: GenMessage<ListNotificationTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 58);

/**
 * 通知テンプレート一覧取得レスポンス
 *
 * @generated from message avion.notification.v1.ListNotificationTemplatesResponse
 */
export type ListNotificationTemplatesResponse = Message<"avion.notification.v1.ListNotificationTemplatesResponse"> & {
  /**
   * テンプレートリスト
   *
   * @generated from field: repeated avion.notification.v1.NotificationTemplate templates = 1;
   */
  templates: NotificationTemplate[];

  /**
   * ページネーション情報
   *
   * @generated from field: avion.common.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message avion.notification.v1.ListNotificationTemplatesResponse.
 * Use `create(ListNotificationTemplatesResponseSchema)` to create a new message.
 */
export const ListNotificationTemplatesResponseSchema: GenMessage<ListNotificationTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_avion_notification_v1_notification_service, 59);

/**
 * 接続操作タイプ
 *
 * @generated from enum avion.notification.v1.ConnectionAction
 */
export enum ConnectionAction {
  /**
   * 未指定
   *
   * @generated from enum value: CONNECTION_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 接続を切断
   *
   * @generated from enum value: CONNECTION_ACTION_DISCONNECT = 1;
   */
  DISCONNECT = 1,

  /**
   * 接続をリフレッシュ
   *
   * @generated from enum value: CONNECTION_ACTION_REFRESH = 2;
   */
  REFRESH = 2,

  /**
   * 接続を一時停止
   *
   * @generated from enum value: CONNECTION_ACTION_PAUSE = 3;
   */
  PAUSE = 3,

  /**
   * 接続を再開
   *
   * @generated from enum value: CONNECTION_ACTION_RESUME = 4;
   */
  RESUME = 4,
}

/**
 * Describes the enum avion.notification.v1.ConnectionAction.
 */
export const ConnectionActionSchema: GenEnum<ConnectionAction> = /*@__PURE__*/
  enumDesc(file_avion_notification_v1_notification_service, 0);

/**
 * 配信保証レベル
 *
 * @generated from enum avion.notification.v1.DeliveryGuarantee
 */
export enum DeliveryGuarantee {
  /**
   * 未指定（ベストエフォート）
   *
   * @generated from enum value: DELIVERY_GUARANTEE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 最低1回配信
   *
   * @generated from enum value: DELIVERY_GUARANTEE_AT_LEAST_ONCE = 1;
   */
  AT_LEAST_ONCE = 1,

  /**
   * 最大1回配信
   *
   * @generated from enum value: DELIVERY_GUARANTEE_AT_MOST_ONCE = 2;
   */
  AT_MOST_ONCE = 2,

  /**
   * 正確に1回配信
   *
   * @generated from enum value: DELIVERY_GUARANTEE_EXACTLY_ONCE = 3;
   */
  EXACTLY_ONCE = 3,
}

/**
 * Describes the enum avion.notification.v1.DeliveryGuarantee.
 */
export const DeliveryGuaranteeSchema: GenEnum<DeliveryGuarantee> = /*@__PURE__*/
  enumDesc(file_avion_notification_v1_notification_service, 1);

/**
 * 通知サービス
 *
 * @generated from service avion.notification.v1.NotificationService
 */
export const NotificationService: GenService<{
  /**
   * 通知作成
   *
   * @generated from rpc avion.notification.v1.NotificationService.CreateNotification
   */
  createNotification: {
    methodKind: "unary";
    input: typeof CreateNotificationRequestSchema;
    output: typeof CreateNotificationResponseSchema;
  },
  /**
   * 通知取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.GetNotification
   */
  getNotification: {
    methodKind: "unary";
    input: typeof GetNotificationRequestSchema;
    output: typeof GetNotificationResponseSchema;
  },
  /**
   * 通知一覧取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.ListNotifications
   */
  listNotifications: {
    methodKind: "unary";
    input: typeof ListNotificationsRequestSchema;
    output: typeof ListNotificationsResponseSchema;
  },
  /**
   * 既読マーク
   *
   * @generated from rpc avion.notification.v1.NotificationService.MarkAsRead
   */
  markAsRead: {
    methodKind: "unary";
    input: typeof MarkAsReadRequestSchema;
    output: typeof MarkAsReadResponseSchema;
  },
  /**
   * 全て既読マーク
   *
   * @generated from rpc avion.notification.v1.NotificationService.MarkAllAsRead
   */
  markAllAsRead: {
    methodKind: "unary";
    input: typeof MarkAllAsReadRequestSchema;
    output: typeof MarkAllAsReadResponseSchema;
  },
  /**
   * バッチ既読マーク
   *
   * @generated from rpc avion.notification.v1.NotificationService.BatchMarkAsRead
   */
  batchMarkAsRead: {
    methodKind: "unary";
    input: typeof BatchMarkAsReadRequestSchema;
    output: typeof BatchMarkAsReadResponseSchema;
  },
  /**
   * 通知削除
   *
   * @generated from rpc avion.notification.v1.NotificationService.DeleteNotification
   */
  deleteNotification: {
    methodKind: "unary";
    input: typeof DeleteNotificationRequestSchema;
    output: typeof DeleteNotificationResponseSchema;
  },
  /**
   * バッチ通知削除
   *
   * @generated from rpc avion.notification.v1.NotificationService.BatchDeleteNotifications
   */
  batchDeleteNotifications: {
    methodKind: "unary";
    input: typeof BatchDeleteNotificationsRequestSchema;
    output: typeof BatchDeleteNotificationsResponseSchema;
  },
  /**
   * 通知設定取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.GetNotificationPreferences
   */
  getNotificationPreferences: {
    methodKind: "unary";
    input: typeof GetNotificationPreferencesRequestSchema;
    output: typeof GetNotificationPreferencesResponseSchema;
  },
  /**
   * 通知設定更新
   *
   * @generated from rpc avion.notification.v1.NotificationService.UpdateNotificationPreferences
   */
  updateNotificationPreferences: {
    methodKind: "unary";
    input: typeof UpdateNotificationPreferencesRequestSchema;
    output: typeof UpdateNotificationPreferencesResponseSchema;
  },
  /**
   * 通知送信（内部用）
   *
   * @generated from rpc avion.notification.v1.NotificationService.SendNotification
   */
  sendNotification: {
    methodKind: "unary";
    input: typeof SendNotificationRequestSchema;
    output: typeof SendNotificationResponseSchema;
  },
  /**
   * 通知ストリーム（SSE/WebSocket用）
   *
   * @generated from rpc avion.notification.v1.NotificationService.StreamNotifications
   */
  streamNotifications: {
    methodKind: "server_streaming";
    input: typeof StreamNotificationsRequestSchema;
    output: typeof StreamNotificationsResponseSchema;
  },
  /**
   * 未読数取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.GetUnreadCount
   */
  getUnreadCount: {
    methodKind: "unary";
    input: typeof GetUnreadCountRequestSchema;
    output: typeof GetUnreadCountResponseSchema;
  },
  /**
   * バッチ通知作成
   *
   * @generated from rpc avion.notification.v1.NotificationService.BatchCreateNotifications
   */
  batchCreateNotifications: {
    methodKind: "unary";
    input: typeof BatchCreateNotificationsRequestSchema;
    output: typeof BatchCreateNotificationsResponseSchema;
  },
  /**
   * WebSocket関連のRPC
   * WebSocketストリーム（双方向ストリーミング）
   *
   * @generated from rpc avion.notification.v1.NotificationService.WebSocketStream
   */
  webSocketStream: {
    methodKind: "bidi_streaming";
    input: typeof WebSocketStreamRequestSchema;
    output: typeof WebSocketStreamResponseSchema;
  },
  /**
   * WebSocket接続管理
   *
   * @generated from rpc avion.notification.v1.NotificationService.ManageWebSocketConnection
   */
  manageWebSocketConnection: {
    methodKind: "unary";
    input: typeof ManageWebSocketConnectionRequestSchema;
    output: typeof ManageWebSocketConnectionResponseSchema;
  },
  /**
   * アクティブ接続一覧取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.ListActiveConnections
   */
  listActiveConnections: {
    methodKind: "unary";
    input: typeof ListActiveConnectionsRequestSchema;
    output: typeof ListActiveConnectionsResponseSchema;
  },
  /**
   * 特定ユーザーへのメッセージ送信
   *
   * @generated from rpc avion.notification.v1.NotificationService.SendWebSocketMessage
   */
  sendWebSocketMessage: {
    methodKind: "unary";
    input: typeof SendWebSocketMessageRequestSchema;
    output: typeof SendWebSocketMessageResponseSchema;
  },
  /**
   * ブロードキャストメッセージ送信
   *
   * @generated from rpc avion.notification.v1.NotificationService.BroadcastWebSocketMessage
   */
  broadcastWebSocketMessage: {
    methodKind: "unary";
    input: typeof BroadcastWebSocketMessageRequestSchema;
    output: typeof BroadcastWebSocketMessageResponseSchema;
  },
  /**
   * プッシュデバイス管理
   * プッシュデバイス登録
   *
   * @generated from rpc avion.notification.v1.NotificationService.RegisterPushDevice
   */
  registerPushDevice: {
    methodKind: "unary";
    input: typeof RegisterPushDeviceRequestSchema;
    output: typeof RegisterPushDeviceResponseSchema;
  },
  /**
   * プッシュデバイス更新
   *
   * @generated from rpc avion.notification.v1.NotificationService.UpdatePushDevice
   */
  updatePushDevice: {
    methodKind: "unary";
    input: typeof UpdatePushDeviceRequestSchema;
    output: typeof UpdatePushDeviceResponseSchema;
  },
  /**
   * プッシュデバイス削除
   *
   * @generated from rpc avion.notification.v1.NotificationService.DeletePushDevice
   */
  deletePushDevice: {
    methodKind: "unary";
    input: typeof DeletePushDeviceRequestSchema;
    output: typeof DeletePushDeviceResponseSchema;
  },
  /**
   * プッシュデバイス一覧取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.ListPushDevices
   */
  listPushDevices: {
    methodKind: "unary";
    input: typeof ListPushDevicesRequestSchema;
    output: typeof ListPushDevicesResponseSchema;
  },
  /**
   * プッシュデバイス取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.GetPushDevice
   */
  getPushDevice: {
    methodKind: "unary";
    input: typeof GetPushDeviceRequestSchema;
    output: typeof GetPushDeviceResponseSchema;
  },
  /**
   * 通知テンプレート管理
   * テンプレート作成
   *
   * @generated from rpc avion.notification.v1.NotificationService.CreateNotificationTemplate
   */
  createNotificationTemplate: {
    methodKind: "unary";
    input: typeof CreateNotificationTemplateRequestSchema;
    output: typeof CreateNotificationTemplateResponseSchema;
  },
  /**
   * テンプレート取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.GetNotificationTemplate
   */
  getNotificationTemplate: {
    methodKind: "unary";
    input: typeof GetNotificationTemplateRequestSchema;
    output: typeof GetNotificationTemplateResponseSchema;
  },
  /**
   * テンプレート更新
   *
   * @generated from rpc avion.notification.v1.NotificationService.UpdateNotificationTemplate
   */
  updateNotificationTemplate: {
    methodKind: "unary";
    input: typeof UpdateNotificationTemplateRequestSchema;
    output: typeof UpdateNotificationTemplateResponseSchema;
  },
  /**
   * テンプレート削除
   *
   * @generated from rpc avion.notification.v1.NotificationService.DeleteNotificationTemplate
   */
  deleteNotificationTemplate: {
    methodKind: "unary";
    input: typeof DeleteNotificationTemplateRequestSchema;
    output: typeof DeleteNotificationTemplateResponseSchema;
  },
  /**
   * テンプレート一覧取得
   *
   * @generated from rpc avion.notification.v1.NotificationService.ListNotificationTemplates
   */
  listNotificationTemplates: {
    methodKind: "unary";
    input: typeof ListNotificationTemplatesRequestSchema;
    output: typeof ListNotificationTemplatesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_avion_notification_v1_notification_service, 0);

