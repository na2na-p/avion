// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file avion/notification/v1/notification_service.proto (package avion.notification.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BatchCreateNotificationsRequest, BatchCreateNotificationsResponse, BatchDeleteNotificationsRequest, BatchDeleteNotificationsResponse, BatchMarkAsReadRequest, BatchMarkAsReadResponse, BroadcastWebSocketMessageRequest, BroadcastWebSocketMessageResponse, CreateNotificationRequest, CreateNotificationResponse, CreateNotificationTemplateRequest, CreateNotificationTemplateResponse, DeleteNotificationRequest, DeleteNotificationResponse, DeleteNotificationTemplateRequest, DeleteNotificationTemplateResponse, DeletePushDeviceRequest, DeletePushDeviceResponse, GetNotificationPreferencesRequest, GetNotificationPreferencesResponse, GetNotificationRequest, GetNotificationResponse, GetNotificationTemplateRequest, GetNotificationTemplateResponse, GetPushDeviceRequest, GetPushDeviceResponse, GetUnreadCountRequest, GetUnreadCountResponse, ListActiveConnectionsRequest, ListActiveConnectionsResponse, ListNotificationsRequest, ListNotificationsResponse, ListNotificationTemplatesRequest, ListNotificationTemplatesResponse, ListPushDevicesRequest, ListPushDevicesResponse, ManageWebSocketConnectionRequest, ManageWebSocketConnectionResponse, MarkAllAsReadRequest, MarkAllAsReadResponse, MarkAsReadRequest, MarkAsReadResponse, RegisterPushDeviceRequest, RegisterPushDeviceResponse, SendNotificationRequest, SendNotificationResponse, SendWebSocketMessageRequest, SendWebSocketMessageResponse, StreamNotificationsRequest, StreamNotificationsResponse, UpdateNotificationPreferencesRequest, UpdateNotificationPreferencesResponse, UpdateNotificationTemplateRequest, UpdateNotificationTemplateResponse, UpdatePushDeviceRequest, UpdatePushDeviceResponse, WebSocketStreamRequest, WebSocketStreamResponse } from "./notification_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * 通知サービス
 *
 * @generated from service avion.notification.v1.NotificationService
 */
export const NotificationService = {
  typeName: "avion.notification.v1.NotificationService",
  methods: {
    /**
     * 通知作成
     *
     * @generated from rpc avion.notification.v1.NotificationService.CreateNotification
     */
    createNotification: {
      name: "CreateNotification",
      I: CreateNotificationRequest,
      O: CreateNotificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.GetNotification
     */
    getNotification: {
      name: "GetNotification",
      I: GetNotificationRequest,
      O: GetNotificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知一覧取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.ListNotifications
     */
    listNotifications: {
      name: "ListNotifications",
      I: ListNotificationsRequest,
      O: ListNotificationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 既読マーク
     *
     * @generated from rpc avion.notification.v1.NotificationService.MarkAsRead
     */
    markAsRead: {
      name: "MarkAsRead",
      I: MarkAsReadRequest,
      O: MarkAsReadResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 全て既読マーク
     *
     * @generated from rpc avion.notification.v1.NotificationService.MarkAllAsRead
     */
    markAllAsRead: {
      name: "MarkAllAsRead",
      I: MarkAllAsReadRequest,
      O: MarkAllAsReadResponse,
      kind: MethodKind.Unary,
    },
    /**
     * バッチ既読マーク
     *
     * @generated from rpc avion.notification.v1.NotificationService.BatchMarkAsRead
     */
    batchMarkAsRead: {
      name: "BatchMarkAsRead",
      I: BatchMarkAsReadRequest,
      O: BatchMarkAsReadResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知削除
     *
     * @generated from rpc avion.notification.v1.NotificationService.DeleteNotification
     */
    deleteNotification: {
      name: "DeleteNotification",
      I: DeleteNotificationRequest,
      O: DeleteNotificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * バッチ通知削除
     *
     * @generated from rpc avion.notification.v1.NotificationService.BatchDeleteNotifications
     */
    batchDeleteNotifications: {
      name: "BatchDeleteNotifications",
      I: BatchDeleteNotificationsRequest,
      O: BatchDeleteNotificationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知設定取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.GetNotificationPreferences
     */
    getNotificationPreferences: {
      name: "GetNotificationPreferences",
      I: GetNotificationPreferencesRequest,
      O: GetNotificationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知設定更新
     *
     * @generated from rpc avion.notification.v1.NotificationService.UpdateNotificationPreferences
     */
    updateNotificationPreferences: {
      name: "UpdateNotificationPreferences",
      I: UpdateNotificationPreferencesRequest,
      O: UpdateNotificationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知送信（内部用）
     *
     * @generated from rpc avion.notification.v1.NotificationService.SendNotification
     */
    sendNotification: {
      name: "SendNotification",
      I: SendNotificationRequest,
      O: SendNotificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知ストリーム（SSE/WebSocket用）
     *
     * @generated from rpc avion.notification.v1.NotificationService.StreamNotifications
     */
    streamNotifications: {
      name: "StreamNotifications",
      I: StreamNotificationsRequest,
      O: StreamNotificationsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * 未読数取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.GetUnreadCount
     */
    getUnreadCount: {
      name: "GetUnreadCount",
      I: GetUnreadCountRequest,
      O: GetUnreadCountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * バッチ通知作成
     *
     * @generated from rpc avion.notification.v1.NotificationService.BatchCreateNotifications
     */
    batchCreateNotifications: {
      name: "BatchCreateNotifications",
      I: BatchCreateNotificationsRequest,
      O: BatchCreateNotificationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * WebSocket関連のRPC
     * WebSocketストリーム（双方向ストリーミング）
     *
     * @generated from rpc avion.notification.v1.NotificationService.WebSocketStream
     */
    webSocketStream: {
      name: "WebSocketStream",
      I: WebSocketStreamRequest,
      O: WebSocketStreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * WebSocket接続管理
     *
     * @generated from rpc avion.notification.v1.NotificationService.ManageWebSocketConnection
     */
    manageWebSocketConnection: {
      name: "ManageWebSocketConnection",
      I: ManageWebSocketConnectionRequest,
      O: ManageWebSocketConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * アクティブ接続一覧取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.ListActiveConnections
     */
    listActiveConnections: {
      name: "ListActiveConnections",
      I: ListActiveConnectionsRequest,
      O: ListActiveConnectionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 特定ユーザーへのメッセージ送信
     *
     * @generated from rpc avion.notification.v1.NotificationService.SendWebSocketMessage
     */
    sendWebSocketMessage: {
      name: "SendWebSocketMessage",
      I: SendWebSocketMessageRequest,
      O: SendWebSocketMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ブロードキャストメッセージ送信
     *
     * @generated from rpc avion.notification.v1.NotificationService.BroadcastWebSocketMessage
     */
    broadcastWebSocketMessage: {
      name: "BroadcastWebSocketMessage",
      I: BroadcastWebSocketMessageRequest,
      O: BroadcastWebSocketMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * プッシュデバイス管理
     * プッシュデバイス登録
     *
     * @generated from rpc avion.notification.v1.NotificationService.RegisterPushDevice
     */
    registerPushDevice: {
      name: "RegisterPushDevice",
      I: RegisterPushDeviceRequest,
      O: RegisterPushDeviceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * プッシュデバイス更新
     *
     * @generated from rpc avion.notification.v1.NotificationService.UpdatePushDevice
     */
    updatePushDevice: {
      name: "UpdatePushDevice",
      I: UpdatePushDeviceRequest,
      O: UpdatePushDeviceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * プッシュデバイス削除
     *
     * @generated from rpc avion.notification.v1.NotificationService.DeletePushDevice
     */
    deletePushDevice: {
      name: "DeletePushDevice",
      I: DeletePushDeviceRequest,
      O: DeletePushDeviceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * プッシュデバイス一覧取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.ListPushDevices
     */
    listPushDevices: {
      name: "ListPushDevices",
      I: ListPushDevicesRequest,
      O: ListPushDevicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * プッシュデバイス取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.GetPushDevice
     */
    getPushDevice: {
      name: "GetPushDevice",
      I: GetPushDeviceRequest,
      O: GetPushDeviceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 通知テンプレート管理
     * テンプレート作成
     *
     * @generated from rpc avion.notification.v1.NotificationService.CreateNotificationTemplate
     */
    createNotificationTemplate: {
      name: "CreateNotificationTemplate",
      I: CreateNotificationTemplateRequest,
      O: CreateNotificationTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * テンプレート取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.GetNotificationTemplate
     */
    getNotificationTemplate: {
      name: "GetNotificationTemplate",
      I: GetNotificationTemplateRequest,
      O: GetNotificationTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * テンプレート更新
     *
     * @generated from rpc avion.notification.v1.NotificationService.UpdateNotificationTemplate
     */
    updateNotificationTemplate: {
      name: "UpdateNotificationTemplate",
      I: UpdateNotificationTemplateRequest,
      O: UpdateNotificationTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * テンプレート削除
     *
     * @generated from rpc avion.notification.v1.NotificationService.DeleteNotificationTemplate
     */
    deleteNotificationTemplate: {
      name: "DeleteNotificationTemplate",
      I: DeleteNotificationTemplateRequest,
      O: DeleteNotificationTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * テンプレート一覧取得
     *
     * @generated from rpc avion.notification.v1.NotificationService.ListNotificationTemplates
     */
    listNotificationTemplates: {
      name: "ListNotificationTemplates",
      I: ListNotificationTemplatesRequest,
      O: ListNotificationTemplatesResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

